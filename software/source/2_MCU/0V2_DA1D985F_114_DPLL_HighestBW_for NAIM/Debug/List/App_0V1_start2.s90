///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.80.5.1069 for Atmel AVR          06/Sep/2017  20:22:09
// Copyright 1996-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for Atmel AVR
//
//    Source file  =  
//        D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\App_0V1_start2.C
//    Command line =  
//        "D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\App_0V1_start2.C" --cpu=m128 -ms -o
//        "D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\Debug\Obj" -lC
//        "D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\Debug\List" -lA
//        "D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\Debug\List" -y --initializers_in_flash --no_cse --no_inline
//        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
//        -DENABLE_BIT_DEFINITIONS -e --eeprom_size 4096 --clib -Ol
//    Locale       =  Korean_Korea.949
//    List file    =  
//        D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for
//        NAIM\Debug\List\App_0V1_start2.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME App_0V1_start2

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega128"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "true"
        RTMODEL "__memory_model", "2"
        RTMODEL "__no_rampd", "enabled"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?SS_SHR_L02
        EXTERN ?S_EC_MUL_L02
        EXTERN ?S_SHL_L02
        EXTERN ?UC_DIVMOD_L01
        EXTERN ?US_SHR_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??INT3_Handler::??INTVEC 16`
        PUBWEAK `??INT5_Handler::??INTVEC 24`
        PUBWEAK `??INT6_Handler::??INTVEC 28`
        PUBWEAK `??INT7_Handler::??INTVEC 32`
        PUBWEAK `??TIMER0_OVF_Handler::??INTVEC 64`
        PUBWEAK `??TIMER1_OVF_Handler::??INTVEC 56`
        PUBWEAK `??TIMER2_OVF_Handler::??INTVEC 40`
        PUBLIC DelayTime
        PUBLIC DelayTime_ms
        PUBLIC I2C_Read
        PUBLIC I2C_SHIN
        PUBLIC I2C_SHOUT
        PUBLIC I2C_START
        PUBLIC I2C_STOP
        PUBLIC I2C_Write
        PUBLIC I2C_error
        PUBLIC INT3_Handler
        PUBLIC INT5_Handler
        PUBLIC INT6_Handler
        PUBLIC INT7_Handler
        PUBLIC IR_data
        PUBLIC IR_data_flag
        PUBLIC IR_error
        PUBLIC KeyReady
        PUBLIC Remoc_data_save
        PUBLIC TIMER0_OVF_Handler
        PUBLIC TIMER1_OVF_Handler
        PUBLIC TIMER2_OVF_Handler
        PUBLIC Time_500us
        PUBLIC Time_50ms
        PUBWEAK _A_DDRA
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DDRE
        PUBWEAK _A_DDRF
        PUBWEAK _A_DDRG
        PUBWEAK _A_EICRA
        PUBWEAK _A_EICRB
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_OCR0
        PUBWEAK _A_PINA
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PINE
        PUBWEAK _A_PINF
        PUBWEAK _A_PING
        PUBWEAK _A_PORTA
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PORTE
        PUBWEAK _A_PORTF
        PUBWEAK _A_PORTG
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR2
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC _bit_init
        PUBLIC _code_remocon
        PUBLIC _counter_remocon
        PUBLIC _flgOrKey
        PUBLIC _flg_allow_remocon_repeat
        PUBLIC _flg_enter
        PUBLIC _flg_on_remocon
        PUBLIC _flg_repeat
        PUBLIC _flg_run_repeat
        PUBLIC _inbit
        PUBLIC _inport
        PUBLIC _outbit
        PUBLIC _outport
        PUBLIC _port_init
        PUBLIC _porta
        PUBLIC _portb
        PUBLIC _portc
        PUBLIC _portd
        PUBLIC _porte
        PUBLIC _portf
        PUBLIC _portg
        PUBLIC _remocon_buffer
        PUBLIC _remocon_counter
        PUBLIC _remocon_custom
        PUBLIC _remocon_custom_2
        PUBLIC _remocon_data
        PUBLIC _remocon_data_2
        PUBLIC _remocon_processing
        PUBLIC _remocon_repeat_count
        PUBLIC _repeat_data
        PUBLIC _repeat_remocon
        PUBLIC _system_init
        PUBLIC _system_init_se
        PUBLIC audio_level_down
        PUBLIC audio_level_sp_down
        PUBLIC audio_level_sp_up
        PUBLIC audio_level_up
        PUBLIC bit_input
        PUBLIC button_data
        PUBLIC ch_data
        PUBLIC ch_led_data
        PUBLIC ch_led_enable
        PUBLIC ch_name
        PUBLIC channel_change
        PUBLIC channel_down
        PUBLIC channel_up
        PUBLIC cnt_remocon
        PUBLIC cs_audio_timer
        PUBLIC dac_audio_timer
        PUBLIC display_num
        PUBLIC dot_0x_hexadecimal
        PUBLIC dot_light_reg
        PUBLIC dot_matrix_bright
        PUBLIC dot_matrix_clear
        PUBLIC dot_matrix_digit
        PUBLIC dot_matrix_digit2
        PUBLIC dot_matrix_set
        PUBLIC dot_string
        PUBLIC dot_string_digit
        PUBLIC dot_vol_hextodeci
        PUBLIC es9018_lock
        PUBLIC es9018_lock_flag
        PUBLIC es9018_reg10
        PUBLIC ess_automute
        PUBLIC ess_filter
        PUBLIC ess_lch_master_trim
        PUBLIC ess_lock_ck
        PUBLIC ess_mute
        PUBLIC ess_rch_master_trim
        PUBLIC ess_volume
        PUBLIC exMute
        PUBLIC f1_coeff_st1
        PUBLIC f1_coeff_st2
        PUBLIC f2_coeff_st1
        PUBLIC f2_coeff_st2
        PUBLIC femto_function
        PUBLIC filter_data
        PUBLIC filter_flag
        PUBLIC filter_name
        PUBLIC grAck
        PUBLIC high_bit_0
        PUBLIC high_bit_1
        PUBLIC high_repeat_flag0
        PUBLIC high_repeat_flag1
        PUBLIC high_start_flag
        PUBLIC i2s_flag
        PUBLIC inByte
        PUBLIC init_rom_add0
        PUBLIC init_rom_add1
        PUBLIC init_rom_add2
        PUBLIC init_rom_address_data
        PUBLIC init_rom_data0
        PUBLIC init_rom_data1
        PUBLIC init_rom_data2
        PUBLIC init_setting_check
        PUBLIC init_sr_led
        PUBLIC init_vol
        PUBLIC init_vol_dn
        PUBLIC interface_ch
        PUBLIC interrupt_eicra
        PUBLIC inverse_data
        PUBLIC ir_error
        PUBLIC ir_error_check
        PUBLIC key_condition
        PUBLIC key_func
        PUBLIC key_func_tmr
        PUBLIC key_int_flag
        PUBLIC key_tmr
        PUBLIC led_tmr
        PUBLIC low_bit_time
        PUBLIC low_start_flag
        PUBLIC main
        PUBLIC max176
        PUBLIC max192
        PUBLIC max44
        PUBLIC max48
        PUBLIC max88
        PUBLIC max96
        PUBLIC min176
        PUBLIC min192
        PUBLIC min44
        PUBLIC min48
        PUBLIC min88
        PUBLIC min96
        PUBLIC mtime_flag
        PUBLIC mtime_length
        PUBLIC mute_enable
        PUBLIC new_repeat_flag
        PUBLIC normal_name
        PUBLIC old_ess_automute
        PUBLIC old_ess_lock_ck
        PUBLIC old_exMute
        PUBLIC phase_data
        PUBLIC phase_ess
        PUBLIC phase_name
        PUBLIC remocon_data
        PUBLIC reset_eeprom
        PUBLIC rom_I2C_Read
        PUBLIC rom_add_check_sum
        PUBLIC rom_add_pt
        PUBLIC rom_add_pt_high
        PUBLIC rom_add_pt_low
        PUBLIC rom_check_sum_error
        PUBLIC rom_cnt
        PUBLIC rom_cnt_check
        PUBLIC rom_cnt_high
        PUBLIC rom_cnt_low
        PUBLIC rom_cnt_mid
        PUBLIC rom_device_high
        PUBLIC rom_device_low
        PUBLIC rom_func_data
        PUBLIC rom_save_flag
        PUBLIC rom_save_flag2
        PUBLIC rom_tmr
        PUBLIC rom_write_multi
        PUBLIC sample_rate
        PUBLIC sample_rate2
        PUBLIC sample_rate_cal
        PUBLIC sp_en_cnt
        PUBLIC sr_data
        PUBLIC sr_led_data
        PUBLIC sr_name
        PUBLIC test_check
        PUBLIC test_check2
        PUBLIC test_eeprom
        PUBLIC test_osc
        PUBLIC test_set_eeprom
        PUBLIC tmr_flag_ck
        PUBLIC tmr_osc
        PUBLIC tmr_osc_ck
        PUBLIC usb_audio_timer
        PUBLIC usb_sr
        PUBLIC vol_dB
        PUBLIC volume_set
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
INT3_Handler        SYMBOL "INT3_Handler"
`??INT3_Handler::??INTVEC 16` SYMBOL "??INTVEC 16", INT3_Handler
INT5_Handler        SYMBOL "INT5_Handler"
`??INT5_Handler::??INTVEC 24` SYMBOL "??INTVEC 24", INT5_Handler
INT6_Handler        SYMBOL "INT6_Handler"
`??INT6_Handler::??INTVEC 28` SYMBOL "??INTVEC 28", INT6_Handler
INT7_Handler        SYMBOL "INT7_Handler"
`??INT7_Handler::??INTVEC 32` SYMBOL "??INTVEC 32", INT7_Handler
TIMER0_OVF_Handler  SYMBOL "TIMER0_OVF_Handler"
`??TIMER0_OVF_Handler::??INTVEC 64` SYMBOL "??INTVEC 64", TIMER0_OVF_Handler
TIMER1_OVF_Handler  SYMBOL "TIMER1_OVF_Handler"
`??TIMER1_OVF_Handler::??INTVEC 56` SYMBOL "??INTVEC 56", TIMER1_OVF_Handler
TIMER2_OVF_Handler  SYMBOL "TIMER2_OVF_Handler"
`??TIMER2_OVF_Handler::??INTVEC 40` SYMBOL "??INTVEC 40", TIMER2_OVF_Handler

// D:\workspace\Femto2\software\source\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for NAIM\App_0V1_start2.C
//    1 //2013.12.16
//    2 
//    3 // OCDEN, JTAGEN, CKOPT, SPIEN
//    4 
//    5 #include <iom128.h>

        ASEGN ABSOLUTE:DATA:NOROOT,020H
// union <unnamed> volatile __io _A_PINF
_A_PINF:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,021H
// union <unnamed> volatile __io _A_PINE
_A_PINE:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,022H
// union <unnamed> volatile __io _A_DDRE
_A_DDRE:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,023H
// union <unnamed> volatile __io _A_PORTE
_A_PORTE:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,033H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,034H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,036H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,039H
// union <unnamed> volatile __io _A_PINA
_A_PINA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03aH
// union <unnamed> volatile __io _A_DDRA
_A_DDRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03bH
// union <unnamed> volatile __io _A_PORTA
_A_PORTA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,044H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,045H
// union <unnamed> volatile __io _A_TCCR2
_A_TCCR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,051H
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,052H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,056H
// union <unnamed> volatile __io _A_TIFR
_A_TIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,057H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,058H
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,05aH
// union <unnamed> volatile __io _A_EICRB
_A_EICRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,061H
// union <unnamed> volatile __io _A_DDRF
_A_DDRF:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,062H
// union <unnamed> volatile __io _A_PORTF
_A_PORTF:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,063H
// union <unnamed> volatile __io _A_PING
_A_PING:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,064H
// union <unnamed> volatile __io _A_DDRG
_A_DDRG:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,065H
// union <unnamed> volatile __io _A_PORTG
_A_PORTG:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,06aH
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS8 1
//    6 #include <inavr.h>
//    7 #include "InitBoard.c"

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char test_eeprom[32]
test_eeprom:
        DS8 32

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char IR_data[20]
IR_data:
        DS8 20

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char IR_data_flag
IR_data_flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int rom_add_pt
rom_add_pt:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned long rom_cnt
rom_cnt:
        DS8 4

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_cnt_high
rom_cnt_high:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_cnt_mid
rom_cnt_mid:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_cnt_low
rom_cnt_low:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_func_data
rom_func_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_add_pt_high
rom_add_pt_high:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_add_pt_low
rom_add_pt_low:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_device_high
rom_device_high:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_device_low
rom_device_low:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char rom_add_check_sum
rom_add_check_sum:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char phase_data
phase_data:
        DS8 1
        REQUIRE `?<Initializer for phase_data>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char interrupt_eicra
interrupt_eicra:
        DS8 1
        REQUIRE `?<Initializer for interrupt_eicra>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_setting_check
init_setting_check:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ess_automute
ess_automute:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ess_lock_ck
ess_lock_ck:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char old_ess_automute
old_ess_automute:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char old_ess_lock_ck
old_ess_lock_ck:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char exMute
exMute:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char old_exMute
old_exMute:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int key_tmr
key_tmr:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char tmr_osc_ck
tmr_osc_ck:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char key_int_flag
key_int_flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int rom_tmr
rom_tmr:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char rom_save_flag
rom_save_flag:
        DS8 1
        REQUIRE `?<Initializer for rom_save_flag>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char rom_save_flag2
rom_save_flag2:
        DS8 1
        REQUIRE `?<Initializer for rom_save_flag2>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char Time_500us
Time_500us:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int Time_50ms
Time_50ms:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char dot_light_reg
dot_light_reg:
        DS8 1
        REQUIRE `?<Initializer for dot_light_reg>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ch_led_data
ch_led_data:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char ch_led_enable
ch_led_enable:
        DS8 1
        REQUIRE `?<Initializer for ch_led_enable>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char sr_led_data
sr_led_data:
        DS8 1
        REQUIRE `?<Initializer for sr_led_data>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char display_num
display_num:
        DS8 1
        REQUIRE `?<Initializer for display_num>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ess_lch_master_trim
ess_lch_master_trim:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ess_rch_master_trim
ess_rch_master_trim:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char vol_dB
vol_dB:
        DS8 1
        REQUIRE `?<Initializer for vol_dB>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char i2s_flag
i2s_flag:
        DS8 1
        REQUIRE `?<Initializer for i2s_flag>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char usb_sr
usb_sr:
        DS8 1
        REQUIRE `?<Initializer for usb_sr>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char button_data
button_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char filter_flag
filter_flag:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char mute_enable
mute_enable:
        DS8 1
        REQUIRE `?<Initializer for mute_enable>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char key_func
key_func:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int key_func_tmr
key_func_tmr:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char key_condition
key_condition:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char es9018_reg10
es9018_reg10:
        DS8 1
        REQUIRE `?<Initializer for es9018_reg10>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char es9018_lock
es9018_lock:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char es9018_lock_flag
es9018_lock_flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int dac_audio_timer
dac_audio_timer:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int sample_rate
sample_rate:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int sample_rate2
sample_rate2:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min44
min44:
        DS8 2
        REQUIRE `?<Initializer for min44>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max44
max44:
        DS8 2
        REQUIRE `?<Initializer for max44>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min48
min48:
        DS8 2
        REQUIRE `?<Initializer for min48>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max48
max48:
        DS8 2
        REQUIRE `?<Initializer for max48>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min88
min88:
        DS8 2
        REQUIRE `?<Initializer for min88>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max88
max88:
        DS8 2
        REQUIRE `?<Initializer for max88>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min96
min96:
        DS8 2
        REQUIRE `?<Initializer for min96>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max96
max96:
        DS8 2
        REQUIRE `?<Initializer for max96>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min176
min176:
        DS8 2
        REQUIRE `?<Initializer for min176>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max176
max176:
        DS8 2
        REQUIRE `?<Initializer for max176>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int min192
min192:
        DS8 2
        REQUIRE `?<Initializer for min192>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned int max192
max192:
        DS8 2
        REQUIRE `?<Initializer for max192>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char tmr_osc
tmr_osc:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char interface_ch
interface_ch:
        DS8 1
        REQUIRE `?<Initializer for interface_ch>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int cs_audio_timer
cs_audio_timer:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int usb_audio_timer
usb_audio_timer:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char KeyReady
KeyReady:
        DS8 1
        REQUIRE `?<Initializer for KeyReady>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char I2C_error
I2C_error:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char ch_name[8][6]
ch_name:
        DS8 48
        REQUIRE `?<Initializer for ch_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char sr_name[7][6]
sr_name:
        DS8 42
        REQUIRE `?<Initializer for sr_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char filter_name[3][8]
filter_name:
        DS8 24
        REQUIRE `?<Initializer for filter_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char phase_name[8]
phase_name:
        DS8 8
        REQUIRE `?<Initializer for phase_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char normal_name[8]
normal_name:
        DS8 8
        REQUIRE `?<Initializer for normal_name>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ch_data
ch_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char sr_data
sr_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char filter_data
filter_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char inverse_data
inverse_data:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char dot_string[16]
dot_string:
        DS8 16

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ess_volume[4]
ess_volume:
        DS8 4

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// long f1_coeff_st1[64]
f1_coeff_st1:
        DS8 256
        REQUIRE `?<Initializer for f1_coeff_st1>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// long f1_coeff_st2[16]
f1_coeff_st2:
        DS8 64
        REQUIRE `?<Initializer for f1_coeff_st2>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// long f2_coeff_st1[64]
f2_coeff_st1:
        DS8 256
        REQUIRE `?<Initializer for f2_coeff_st1>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// long f2_coeff_st2[16]
f2_coeff_st2:
        DS8 64
        REQUIRE `?<Initializer for f2_coeff_st2>`

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void DelayTime(unsigned int)
DelayTime:
??DelayTime_0:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function DelayTime
          CFI NoCalls
        MOVW    R19:R18, R17:R16
        MOVW    R17:R16, R19:R18
        SUBI    R16, 1
        SBCI    R17, 0
        OR      R18, R19
        BRNE    ??DelayTime_0
        RET
          CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void DelayTime_ms(unsigned int)
DelayTime_ms:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function DelayTime_ms
        MOVW    R23:R22, R17:R16
        LDI     R20, 0
        RJMP    ??DelayTime_ms_0
??DelayTime_ms_1:
        LDI     R16, 128
        LDI     R17, 62
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R20
??DelayTime_ms_0:
        MOVW    R31:R30, R23:R22
        ADIW    R31:R30, 1
        LDI     R21, 0
        CP      R30, R20
        CPC     R31, R21
        BRCC    ??DelayTime_ms_1
        RET
          CFI EndBlock cfiBlock1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _porta
_porta:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _portb
_portb:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _portc
_portc:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _portd
_portd:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _porte
_porte:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _portf
_portf:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _portg
_portg:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _outport(unsigned char, char)
_outport:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function _outport
          CFI NoCalls
        SUBI    R16, 1
        BREQ    ??_outport_0
        DEC     R16
        BREQ    ??_outport_1
        DEC     R16
        BREQ    ??_outport_2
        DEC     R16
        BREQ    ??_outport_3
        DEC     R16
        BREQ    ??_outport_4
        DEC     R16
        BREQ    ??_outport_5
        DEC     R16
        BREQ    ??_outport_6
        RET
??_outport_0:
        STS     _porta, R17
        LDS     R16, _porta
        OUT     0x1B, R16
        RET
??_outport_1:
        STS     _portb, R17
        LDS     R16, _portb
        OUT     0x18, R16
        RET
??_outport_2:
        STS     _portc, R17
        LDS     R16, _portc
        OUT     0x15, R16
        RET
??_outport_3:
        STS     _portd, R17
        LDS     R16, _portd
        OUT     0x12, R16
        RET
??_outport_4:
        STS     _porte, R17
        LDS     R16, _porte
        OUT     0x03, R16
        RET
??_outport_5:
        STS     _portf, R17
        LDS     R16, _portf
        STS     _A_PORTF, R16
        RET
??_outport_6:
        STS     _portg, R17
        LDS     R16, _portg
        STS     _A_PORTG, R16
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_PORTA
        REQUIRE _A_PORTB
        REQUIRE _A_PORTC
        REQUIRE _A_PORTD
        REQUIRE _A_PORTE
        REQUIRE _A_PORTF
        REQUIRE _A_PORTG

        RSEG CODE:CODE:NOROOT(1)
// __version_3 unsigned char _inport(unsigned char)
_inport:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function _inport
          CFI NoCalls
        SUBI    R16, 1
        BREQ    ??_inport_0
        DEC     R16
        BREQ    ??_inport_1
        DEC     R16
        BREQ    ??_inport_2
        DEC     R16
        BREQ    ??_inport_3
        DEC     R16
        BREQ    ??_inport_4
        DEC     R16
        BREQ    ??_inport_5
        DEC     R16
        BREQ    ??_inport_6
        RJMP    ??_inport_7
??_inport_0:
        IN      R17, 0x19
        RJMP    ??_inport_7
??_inport_1:
        IN      R17, 0x16
        RJMP    ??_inport_7
??_inport_2:
        IN      R17, 0x13
        RJMP    ??_inport_7
??_inport_3:
        IN      R17, 0x10
        RJMP    ??_inport_7
??_inport_4:
        IN      R17, 0x01
        RJMP    ??_inport_7
??_inport_5:
        IN      R17, 0x00
        RJMP    ??_inport_7
??_inport_6:
        LDS     R17, _A_PING
??_inport_7:
        MOV     R16, R17
        RET
          CFI EndBlock cfiBlock3
        REQUIRE _A_PINA
        REQUIRE _A_PINB
        REQUIRE _A_PINC
        REQUIRE _A_PIND
        REQUIRE _A_PINE
        REQUIRE _A_PINF
        REQUIRE _A_PING

        RSEG CODE:CODE:NOROOT(1)
// __version_3 char _inbit(unsigned char, unsigned char)
_inbit:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function _inbit
        MOV     R18, R16
        MOV     R20, R17
        LDI     R16, 0
        SUBI    R18, 1
        BREQ    ??_inbit_0
        DEC     R18
        BREQ    ??_inbit_1
        DEC     R18
        BREQ    ??_inbit_2
        DEC     R18
        BREQ    ??_inbit_3
        DEC     R18
        BREQ    ??_inbit_4
        DEC     R18
        BRNE    $+2+2
        RJMP    ??_inbit_5
        DEC     R18
        BRNE    $+2+2
        RJMP    ??_inbit_6
        RET
??_inbit_0:
        IN      R18, 0x19
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_7
        LDI     R16, 1
        RET
??_inbit_7:
        LDI     R16, 0
        RET
??_inbit_1:
        IN      R18, 0x16
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_8
        LDI     R16, 1
        RET
??_inbit_8:
        LDI     R16, 0
        RET
??_inbit_2:
        IN      R18, 0x13
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_9
        LDI     R16, 1
        RET
??_inbit_9:
        LDI     R16, 0
        RET
??_inbit_3:
        IN      R18, 0x10
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_10
        LDI     R16, 1
        RET
??_inbit_10:
        LDI     R16, 0
        RET
??_inbit_4:
        IN      R18, 0x01
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_11
        LDI     R16, 1
        RET
??_inbit_11:
        LDI     R16, 0
        RET
??_inbit_5:
        IN      R18, 0x00
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_12
        LDI     R16, 1
        RET
??_inbit_12:
        LDI     R16, 0
        RET
??_inbit_6:
        LDS     R18, _A_PING
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        AND     R18, R16
        TST     R18
        BREQ    ??_inbit_13
        LDI     R16, 1
        RET
??_inbit_13:
        LDI     R16, 0
        RET
          CFI EndBlock cfiBlock4
        REQUIRE _A_PINA
        REQUIRE _A_PINB
        REQUIRE _A_PINC
        REQUIRE _A_PIND
        REQUIRE _A_PINE
        REQUIRE _A_PINF
        REQUIRE _A_PING

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _outbit(unsigned char, unsigned char, char)
_outbit:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function _outbit
        MOV     R20, R17
        SUBI    R16, 1
        BREQ    ??_outbit_0
        DEC     R16
        BREQ    ??_outbit_1
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_outbit_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_outbit_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_outbit_4
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_outbit_5
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_outbit_6
        RET
??_outbit_0:
        TST     R18
        BREQ    ??_outbit_7
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _porta
        OR      R17, R16
        STS     _porta, R17
        RJMP    ??_outbit_8
??_outbit_7:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _porta
        AND     R17, R16
        STS     _porta, R17
??_outbit_8:
        LDS     R16, _porta
        OUT     0x1B, R16
        RET
??_outbit_1:
        TST     R18
        BREQ    ??_outbit_9
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _portb
        OR      R17, R16
        STS     _portb, R17
        RJMP    ??_outbit_10
??_outbit_9:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _portb
        AND     R17, R16
        STS     _portb, R17
??_outbit_10:
        LDS     R16, _portb
        OUT     0x18, R16
        RET
??_outbit_2:
        TST     R18
        BREQ    ??_outbit_11
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _portc
        OR      R17, R16
        STS     _portc, R17
        RJMP    ??_outbit_12
??_outbit_11:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _portc
        AND     R17, R16
        STS     _portc, R17
??_outbit_12:
        LDS     R16, _portc
        OUT     0x15, R16
        RET
??_outbit_3:
        TST     R18
        BREQ    ??_outbit_13
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _portd
        OR      R17, R16
        STS     _portd, R17
        RJMP    ??_outbit_14
??_outbit_13:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _portd
        AND     R17, R16
        STS     _portd, R17
??_outbit_14:
        LDS     R16, _portd
        OUT     0x12, R16
        RET
??_outbit_4:
        TST     R18
        BREQ    ??_outbit_15
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _porte
        OR      R17, R16
        STS     _porte, R17
        RJMP    ??_outbit_16
??_outbit_15:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _porte
        AND     R17, R16
        STS     _porte, R17
??_outbit_16:
        LDS     R16, _porte
        OUT     0x03, R16
        RET
??_outbit_5:
        TST     R18
        BREQ    ??_outbit_17
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _portf
        OR      R17, R16
        STS     _portf, R17
        RJMP    ??_outbit_18
??_outbit_17:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _portf
        AND     R17, R16
        STS     _portf, R17
??_outbit_18:
        LDS     R16, _portf
        STS     _A_PORTF, R16
        RET
??_outbit_6:
        TST     R18
        BREQ    ??_outbit_19
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _portg
        OR      R17, R16
        STS     _portg, R17
        RJMP    ??_outbit_20
??_outbit_19:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _portg
        AND     R17, R16
        STS     _portg, R17
??_outbit_20:
        LDS     R16, _portg
        STS     _A_PORTG, R16
        RET
          CFI EndBlock cfiBlock5
        REQUIRE _A_PORTA
        REQUIRE _A_PORTB
        REQUIRE _A_PORTC
        REQUIRE _A_PORTD
        REQUIRE _A_PORTE
        REQUIRE _A_PORTF
        REQUIRE _A_PORTG

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _port_init(unsigned char, unsigned char)
_port_init:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function _port_init
          CFI NoCalls
        SUBI    R16, 1
        BREQ    ??_port_init_0
        DEC     R16
        BREQ    ??_port_init_1
        DEC     R16
        BREQ    ??_port_init_2
        DEC     R16
        BREQ    ??_port_init_3
        DEC     R16
        BREQ    ??_port_init_4
        DEC     R16
        BREQ    ??_port_init_5
        DEC     R16
        BREQ    ??_port_init_6
        RET
??_port_init_0:
        OUT     0x1A, R17
        RET
??_port_init_1:
        OUT     0x17, R17
        RET
??_port_init_2:
        OUT     0x14, R17
        RET
??_port_init_3:
        OUT     0x11, R17
        RET
??_port_init_4:
        OUT     0x02, R17
        RET
??_port_init_5:
        STS     _A_DDRF, R17
        RET
??_port_init_6:
        STS     _A_DDRG, R17
        RET
          CFI EndBlock cfiBlock6
        REQUIRE _A_DDRA
        REQUIRE _A_DDRB
        REQUIRE _A_DDRC
        REQUIRE _A_DDRD
        REQUIRE _A_DDRE
        REQUIRE _A_DDRF
        REQUIRE _A_DDRG

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _bit_init(unsigned char, unsigned char, char)
_bit_init:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function _bit_init
        MOV     R20, R17
        SUBI    R16, 1
        BREQ    ??_bit_init_0
        DEC     R16
        BREQ    ??_bit_init_1
        DEC     R16
        BREQ    ??_bit_init_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_bit_init_3
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_bit_init_4
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_bit_init_5
        DEC     R16
        BRNE    $+2+2
        RJMP    ??_bit_init_6
        RET
??_bit_init_0:
        TST     R18
        BREQ    ??_bit_init_7
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        IN      R17, 0x1A
        OR      R17, R16
        OUT     0x1A, R17
        RET
??_bit_init_7:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        IN      R17, 0x1A
        AND     R17, R16
        OUT     0x1A, R17
        RET
??_bit_init_1:
        TST     R18
        BREQ    ??_bit_init_8
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        IN      R17, 0x17
        OR      R17, R16
        OUT     0x17, R17
        RET
??_bit_init_8:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        IN      R17, 0x17
        AND     R17, R16
        OUT     0x17, R17
        RET
??_bit_init_2:
        TST     R18
        BREQ    ??_bit_init_9
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        IN      R17, 0x14
        OR      R17, R16
        OUT     0x14, R17
        RET
??_bit_init_9:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        IN      R17, 0x14
        AND     R17, R16
        OUT     0x14, R17
        RET
??_bit_init_3:
        TST     R18
        BREQ    ??_bit_init_10
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        IN      R17, 0x11
        OR      R17, R16
        OUT     0x11, R17
        RET
??_bit_init_10:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        IN      R17, 0x11
        AND     R17, R16
        OUT     0x11, R17
        RET
??_bit_init_4:
        TST     R18
        BREQ    ??_bit_init_11
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        IN      R17, 0x02
        OR      R17, R16
        OUT     0x02, R17
        RET
??_bit_init_11:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        IN      R17, 0x02
        AND     R17, R16
        OUT     0x02, R17
        RET
??_bit_init_5:
        TST     R18
        BREQ    ??_bit_init_12
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _A_DDRF
        OR      R17, R16
        STS     _A_DDRF, R17
        RET
??_bit_init_12:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _A_DDRF
        AND     R17, R16
        STS     _A_DDRF, R17
        RET
??_bit_init_6:
        TST     R18
        BREQ    ??_bit_init_13
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        LDS     R17, _A_DDRG
        OR      R17, R16
        STS     _A_DDRG, R17
        RET
??_bit_init_13:
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall ?S_SHL_L02
        CALL    ?S_SHL_L02
        COM     R16
        LDS     R17, _A_DDRG
        AND     R17, R16
        STS     _A_DDRG, R17
        RET
          CFI EndBlock cfiBlock7
        REQUIRE _A_DDRA
        REQUIRE _A_DDRB
        REQUIRE _A_DDRC
        REQUIRE _A_DDRD
        REQUIRE _A_DDRE
        REQUIRE _A_DDRF
        REQUIRE _A_DDRG

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char inByte
inByte:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char grAck
grAck:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void I2C_START(void)
I2C_START:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function I2C_START
        SBI     0x12, 0x01
        SBI     0x12, 0x00
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x12, 0x01
        LDI     R16, 40
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x12, 0x00
        LDI     R16, 150
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        RET
          CFI EndBlock cfiBlock8
        REQUIRE _A_PORTD

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void I2C_STOP(void)
I2C_STOP:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function I2C_STOP
        LDI     R16, 150
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x12, 0x01
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBI     0x12, 0x00
        LDI     R16, 40
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBI     0x12, 0x01
        RET
          CFI EndBlock cfiBlock9
        REQUIRE _A_PORTD

        RSEG CODE:CODE:NOROOT(1)
// __version_3 unsigned char I2C_SHOUT(unsigned char)
I2C_SHOUT:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function I2C_SHOUT
        MOV     R21, R16
        LDI     R20, 0
        RJMP    ??I2C_SHOUT_0
??I2C_SHOUT_1:
        CBI     0x12, 0x00
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        MOV     R16, R21
        SBRC    R16, 7
        SBI     0x12, 0x01
??I2C_SHOUT_2:
        SBRS    R16, 7
        CBI     0x12, 0x01
??I2C_SHOUT_3:
        LSL     R21
        SBI     0x12, 0x00
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R20
??I2C_SHOUT_0:
        CPI     R20, 8
        BRCS    ??I2C_SHOUT_1
        CBI     0x12, 0x00
        LDI     R16, 20
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x11, 0x01
        SBI     0x12, 0x01
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBIS    0x10, 0x01
        RJMP    ??I2C_SHOUT_4
        LDI     R20, 1
        RJMP    ??I2C_SHOUT_5
??I2C_SHOUT_4:
        LDI     R20, 0
??I2C_SHOUT_5:
        MOV     R16, R20
        SBRC    R16, 0
        SBI     0x12, 0x01
??I2C_SHOUT_6:
        SBRS    R16, 0
        CBI     0x12, 0x01
??I2C_SHOUT_7:
        LDI     R16, 20
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBI     0x12, 0x00
        LDI     R16, 30
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x12, 0x00
        SBI     0x11, 0x01
        LDI     R16, 100
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        MOV     R16, R20
        RET
          CFI EndBlock cfiBlock10
        REQUIRE _A_PORTD
        REQUIRE _A_DDRD
        REQUIRE _A_PIND

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void I2C_SHIN(unsigned char)
I2C_SHIN:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function I2C_SHIN
        MOV     R21, R16
        LDI     R16, 0
        STS     inByte, R16
        LDI     R16, 0
        STS     grAck, R16
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x11, 0x01
        SBI     0x12, 0x01
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDI     R20, 0
        RJMP    ??I2C_SHIN_0
??I2C_SHIN_1:
        LDI     R16, 0
??I2C_SHIN_2:
        LDS     R17, inByte
        OR      R17, R16
        STS     inByte, R17
        CPI     R20, 7
        BRCC    ??I2C_SHIN_3
        LDS     R16, inByte
        LSL     R16
        STS     inByte, R16
??I2C_SHIN_3:
        SBI     0x12, 0x00
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R20
??I2C_SHIN_0:
        CPI     R20, 8
        BRCC    ??I2C_SHIN_4
        CBI     0x12, 0x00
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBIS    0x10, 0x01
        RJMP    ??I2C_SHIN_1
        LDI     R16, 1
        RJMP    ??I2C_SHIN_2
??I2C_SHIN_4:
        CBI     0x12, 0x00
        LDI     R16, 30
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBI     0x11, 0x01
        CBI     0x12, 0x01
        TST     R21
        BRNE    ??I2C_SHIN_5
        LDI     R16, 0
        STS     grAck, R16
        RJMP    ??I2C_SHIN_6
??I2C_SHIN_5:
        LDI     R16, 1
        STS     grAck, R16
??I2C_SHIN_6:
        LDI     R30, LOW(grAck)
        LDI     R31, (grAck) >> 8
        LD      R16, Z
        SBRC    R16, 0
        SBI     0x12, 0x01
??I2C_SHIN_7:
        SBRS    R16, 0
        CBI     0x12, 0x01
??I2C_SHIN_8:
        LDI     R16, 20
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        SBI     0x12, 0x00
        LDI     R16, 30
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x12, 0x00
        LDI     R16, 100
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        RET
          CFI EndBlock cfiBlock11
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_PIND

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void I2C_Write(unsigned char, unsigned char, unsigned char)
I2C_Write:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function I2C_Write
        MOV     R20, R16
        MOV     R22, R17
        MOV     R23, R18
          CFI FunCall I2C_START
        RCALL   I2C_START
        MOV     R16, R20
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        MOV     R16, R22
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        MOV     R16, R23
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
          CFI FunCall I2C_STOP
        RCALL   I2C_STOP
        RET
          CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void rom_cnt_check()
rom_cnt_check:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function rom_cnt_check
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        CPI     R16, 1
        LDI     R20, 53
        CPC     R17, R20
        LDI     R20, 12
        CPC     R18, R20
        LDI     R20, 0
        CPC     R19, R20
        BRCC    $+2+2
        RJMP    ??rom_cnt_check_0
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 255
        LDI     R18, 7
        CPC     R17, R18
        BRCS    $+2+2
        RJMP    ??rom_cnt_check_1
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 251
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        ANDI    R16, 0x0F
        CPI     R16, 15
        BRNE    ??rom_cnt_check_2
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
??rom_cnt_check_2:
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 0
        STD     Z+2, R16
        LDI     R16, 0
        STD     Z+3, R16
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 255
        LDI     R18, 7
        CPC     R17, R18
        BRCC    ??rom_cnt_check_3
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LDD     R17, Z+1
        MOV     R16, R17
        STS     rom_add_pt_high, R16
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        STS     rom_add_pt_low, R16
        RJMP    ??rom_cnt_check_4
??rom_cnt_check_3:
        LDI     R16, 128
        STS     rom_add_pt_high, R16
        LDI     R16, 0
        STS     rom_add_pt_low, R16
??rom_cnt_check_4:
        LDS     R16, rom_add_pt_high
        LDS     R17, rom_add_pt_low
        ADD     R16, R17
        STS     rom_add_check_sum, R16
          CFI FunCall I2C_START
        RCALL   I2C_START
        LDI     R16, 160
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_add_pt_high
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_add_pt_low
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_add_check_sum
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
          CFI FunCall I2C_STOP
        RCALL   I2C_STOP
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        RCALL   DelayTime_ms
        RET
??rom_cnt_check_0:
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        SUBI    R16, 255
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
??rom_cnt_check_1:
        RET
          CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void rom_write_multi()
rom_write_multi:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function rom_write_multi
          CFI FunCall rom_cnt_check
        RCALL   rom_cnt_check
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 255
        LDI     R18, 7
        CPC     R17, R18
        BRCS    $+2+2
        RJMP    ??rom_write_multi_0
        LDI     R20, 7
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
          CFI FunCall ?US_SHR_L02
        CALL    ?US_SHR_L02
        ANDI    R16, 0x0E
        SUBI    R16, 96
        STS     rom_device_high, R16
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        STS     rom_device_low, R16
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LDD     R18, Z+2
        MOV     R16, R18
        STS     rom_cnt_high, R16
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LDD     R17, Z+1
        MOV     R16, R17
        STS     rom_cnt_mid, R16
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R16, Z
        STS     rom_cnt_low, R16
        LDS     R16, ch_led_data
        STS     rom_func_data, R16
        LDS     R16, rom_func_data
        LSL     R16
        LSL     R16
        LSL     R16
        STS     rom_func_data, R16
        LDS     R16, filter_flag
        LDS     R17, rom_func_data
        ADD     R17, R16
        STS     rom_func_data, R17
        LDS     R16, rom_func_data
        LSL     R16
        STS     rom_func_data, R16
        LDS     R16, phase_data
        LDS     R17, rom_func_data
        ADD     R17, R16
        STS     rom_func_data, R17
          CFI FunCall I2C_START
        RCALL   I2C_START
        LDS     R16, rom_device_high
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_device_low
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_cnt_high
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_cnt_mid
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_cnt_low
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, vol_dB
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDS     R16, rom_func_data
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
          CFI FunCall I2C_STOP
        RCALL   I2C_STOP
??rom_write_multi_0:
        RET
          CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(1)
// __version_3 unsigned char I2C_Read(unsigned char, unsigned char)
I2C_Read:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function I2C_Read
        MOV     R22, R16
        MOV     R23, R17
          CFI FunCall I2C_START
        RCALL   I2C_START
        MOV     R16, R22
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        MOV     R16, R23
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
          CFI FunCall I2C_STOP
        RCALL   I2C_STOP
          CFI FunCall I2C_START
        RCALL   I2C_START
        INC     R22
        MOV     R16, R22
          CFI FunCall I2C_SHOUT
        RCALL   I2C_SHOUT
        LDI     R16, 1
          CFI FunCall I2C_SHIN
        RCALL   I2C_SHIN
        LDS     R20, inByte
          CFI FunCall I2C_STOP
        RCALL   I2C_STOP
        MOV     R16, R20
        RET
          CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(1)
// __version_3 unsigned char rom_I2C_Read(unsigned int)
rom_I2C_Read:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function rom_I2C_Read
        MOVW    R19:R18, R17:R16
        LDI     R20, 7
        MOVW    R17:R16, R19:R18
          CFI FunCall ?US_SHR_L02
        CALL    ?US_SHR_L02
        ANDI    R16, 0x0E
        SUBI    R16, 96
        MOV     R17, R18
          CFI FunCall I2C_Read
        RCALL   I2C_Read
        RET
          CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void reset_eeprom(unsigned int)
reset_eeprom:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function reset_eeprom
        MOVW    R19:R18, R17:R16
        LDI     R20, 7
        MOVW    R17:R16, R19:R18
          CFI FunCall ?US_SHR_L02
        CALL    ?US_SHR_L02
        ANDI    R16, 0x0E
        SUBI    R16, 96
        MOV     R17, R18
        LDI     R18, 255
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        RCALL   DelayTime_ms
        RET
          CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void test_set_eeprom(unsigned int, unsigned char)
test_set_eeprom:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function test_set_eeprom
        MOVW    R23:R22, R17:R16
        LDI     R20, 7
        MOVW    R17:R16, R23:R22
          CFI FunCall ?US_SHR_L02
        CALL    ?US_SHR_L02
        ANDI    R16, 0x0E
        SUBI    R16, 96
        MOV     R17, R22
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R16, 5
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        RCALL   DelayTime_ms
        RET
          CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_matrix_clear()
dot_matrix_clear:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function dot_matrix_clear
          CFI NoCalls
        CBI     0x12, 0x07
        LDI     R16, 0
        STS     dot_light_reg, R16
        RET
          CFI EndBlock cfiBlock19
        REQUIRE _A_PORTD

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_string_digit()
dot_string_digit:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function dot_string_digit
        MOVW    R3:R2, R25:R24
        LDI     R22, 0
        SBI     0x12, 0x07
        LDS     R16, 98
        ORI     R16, 0x08
        STS     98, R16
        LDI     R23, 0
        RJMP    ??dot_string_digit_0
??dot_string_digit_1:
        LDI     R16, 64
        LDI     R17, 6
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDI     R22, 0
        INC     R23
??dot_string_digit_0:
        CPI     R23, 2
        BRCS    $+2+2
        RJMP    ??dot_string_digit_2
        LDI     R24, 0
        RJMP    ??dot_string_digit_3
??dot_string_digit_4:
        LDS     R16, 101
        ORI     R16, 0x02
        STS     101, R16
??dot_string_digit_5:
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R22
        INC     R24
??dot_string_digit_3:
        CPI     R24, 8
        BRCC    ??dot_string_digit_1
        TST     R22
        BRNE    ??dot_string_digit_6
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_6:
        CPI     R22, 1
        BRNE    ??dot_string_digit_8
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_8:
        CPI     R22, 2
        BRNE    ??dot_string_digit_9
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_9:
        CPI     R22, 3
        BRNE    ??dot_string_digit_10
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_10:
        CPI     R22, 4
        BRNE    ??dot_string_digit_11
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_11:
        CPI     R22, 5
        BRNE    ??dot_string_digit_12
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_12:
        CPI     R22, 6
        BRNE    ??dot_string_digit_13
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_string_digit_7
??dot_string_digit_13:
        CPI     R22, 7
        BRNE    ??dot_string_digit_7
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
??dot_string_digit_7:
        TST     R23
        BREQ    ??dot_string_digit_14
        CBI     0x15, 0x07
        RJMP    ??dot_string_digit_15
??dot_string_digit_14:
        LDS     R16, 101
        ANDI    R16, 0xFD
        STS     101, R16
??dot_string_digit_15:
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFB
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        MOV     R16, R23
        LDI     R17, 0
        LDI     R20, 8
        LDI     R21, 0
          CFI FunCall ?S_EC_MUL_L02
        CALL    ?S_EC_MUL_L02
        LDI     R25, 0
        ADD     R16, R24
        ADC     R17, R25
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        LD      R16, Z
        OUT     0x1B, R16
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ORI     R16, 0x04
        STS     101, R16
        TST     R23
        BRNE    $+2+2
        RJMP    ??dot_string_digit_4
        SBI     0x15, 0x07
        RJMP    ??dot_string_digit_5
??dot_string_digit_2:
        MOVW    R25:R24, R3:R2
          CFI R24 R2
        RET
          CFI EndBlock cfiBlock20
        REQUIRE _A_PORTD
        REQUIRE _A_PORTF
        REQUIRE _A_PORTC
        REQUIRE _A_PORTG
        REQUIRE _A_PORTA

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_matrix_digit(unsigned char, unsigned char)
dot_matrix_digit:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function dot_matrix_digit
        MOV     R20, R16
        SBI     0x12, 0x07
        LDS     R16, 98
        ORI     R16, 0x08
        STS     98, R16
        TST     R17
        BRNE    ??dot_matrix_digit_0
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_0:
        CPI     R17, 1
        BRNE    ??dot_matrix_digit_2
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_2:
        CPI     R17, 2
        BRNE    ??dot_matrix_digit_3
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_3:
        CPI     R17, 3
        BRNE    ??dot_matrix_digit_4
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_4:
        CPI     R17, 4
        BRNE    ??dot_matrix_digit_5
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_5:
        CPI     R17, 5
        BRNE    ??dot_matrix_digit_6
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_6:
        CPI     R17, 6
        BRNE    ??dot_matrix_digit_7
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit_1
??dot_matrix_digit_7:
        CPI     R17, 7
        BRNE    ??dot_matrix_digit_1
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
??dot_matrix_digit_1:
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFD
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFB
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        OUT     0x1B, R20
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ORI     R16, 0x04
        STS     101, R16
        LDS     R16, 101
        ORI     R16, 0x02
        STS     101, R16
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        RET
          CFI EndBlock cfiBlock21
        REQUIRE _A_PORTD
        REQUIRE _A_PORTF
        REQUIRE _A_PORTG
        REQUIRE _A_PORTA

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_matrix_digit2(unsigned char, unsigned char)
dot_matrix_digit2:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function dot_matrix_digit2
        MOV     R20, R16
        SBI     0x12, 0x07
        LDS     R16, 98
        ORI     R16, 0x08
        STS     98, R16
        TST     R17
        BRNE    ??dot_matrix_digit2_0
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_0:
        CPI     R17, 1
        BRNE    ??dot_matrix_digit2_2
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_2:
        CPI     R17, 2
        BRNE    ??dot_matrix_digit2_3
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_3:
        CPI     R17, 3
        BRNE    ??dot_matrix_digit2_4
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_4:
        CPI     R17, 4
        BRNE    ??dot_matrix_digit2_5
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_5:
        CPI     R17, 5
        BRNE    ??dot_matrix_digit2_6
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_6:
        CPI     R17, 6
        BRNE    ??dot_matrix_digit2_7
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_digit2_1
??dot_matrix_digit2_7:
        CPI     R17, 7
        BRNE    ??dot_matrix_digit2_1
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
??dot_matrix_digit2_1:
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x15, 0x07
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFB
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        OUT     0x1B, R20
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ORI     R16, 0x04
        STS     101, R16
        SBI     0x15, 0x07
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        RET
          CFI EndBlock cfiBlock22
        REQUIRE _A_PORTD
        REQUIRE _A_PORTF
        REQUIRE _A_PORTC
        REQUIRE _A_PORTG
        REQUIRE _A_PORTA

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_matrix_bright(unsigned char)
dot_matrix_bright:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function dot_matrix_bright
        MOV     R21, R16
        LDI     R20, 0
        RJMP    ??dot_matrix_bright_0
??dot_matrix_bright_1:
        CPI     R20, 7
        BRNE    ??dot_matrix_bright_2
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
??dot_matrix_bright_2:
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFD
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFB
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        OUT     0x1B, R21
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ORI     R16, 0x04
        STS     101, R16
        LDS     R16, 101
        ORI     R16, 0x02
        STS     101, R16
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R20
??dot_matrix_bright_0:
        CPI     R20, 8
        BRCS    $+2+2
        RJMP    ??dot_matrix_bright_3
        SBI     0x12, 0x07
        LDS     R16, 98
        ANDI    R16, 0xF7
        STS     98, R16
        TST     R20
        BRNE    ??dot_matrix_bright_4
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_4:
        CPI     R20, 1
        BRNE    ??dot_matrix_bright_5
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_5:
        CPI     R20, 2
        BRNE    ??dot_matrix_bright_6
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_6:
        CPI     R20, 3
        BRNE    ??dot_matrix_bright_7
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_7:
        CPI     R20, 4
        BRNE    ??dot_matrix_bright_8
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_8:
        CPI     R20, 5
        BRNE    ??dot_matrix_bright_9
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_9:
        CPI     R20, 6
        BREQ    $+2+2
        RJMP    ??dot_matrix_bright_1
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_2
??dot_matrix_bright_3:
        LDI     R20, 0
        RJMP    ??dot_matrix_bright_10
??dot_matrix_bright_11:
        CPI     R20, 7
        BRNE    ??dot_matrix_bright_12
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
??dot_matrix_bright_12:
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        CBI     0x15, 0x07
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ANDI    R16, 0xFB
        STS     101, R16
        LDI     R16, 8
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        OUT     0x1B, R21
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        LDS     R16, 101
        ORI     R16, 0x04
        STS     101, R16
        SBI     0x15, 0x07
        LDI     R16, 16
        LDI     R17, 0
          CFI FunCall DelayTime
        RCALL   DelayTime
        INC     R20
??dot_matrix_bright_10:
        CPI     R20, 8
        BRCS    $+2+2
        RJMP    ??dot_matrix_bright_13
        SBI     0x12, 0x07
        LDS     R16, 98
        ANDI    R16, 0xF7
        STS     98, R16
        TST     R20
        BRNE    ??dot_matrix_bright_14
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_14:
        CPI     R20, 1
        BRNE    ??dot_matrix_bright_15
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_15:
        CPI     R20, 2
        BRNE    ??dot_matrix_bright_16
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_16:
        CPI     R20, 3
        BRNE    ??dot_matrix_bright_17
        LDS     R16, 98
        ANDI    R16, 0xFB
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_17:
        CPI     R20, 4
        BRNE    ??dot_matrix_bright_18
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_18:
        CPI     R20, 5
        BRNE    ??dot_matrix_bright_19
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFD
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x01
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_19:
        CPI     R20, 6
        BREQ    $+2+2
        RJMP    ??dot_matrix_bright_11
        LDS     R16, 98
        ORI     R16, 0x04
        STS     98, R16
        LDS     R16, 98
        ORI     R16, 0x02
        STS     98, R16
        LDS     R16, 98
        ANDI    R16, 0xFE
        STS     98, R16
        RJMP    ??dot_matrix_bright_12
??dot_matrix_bright_13:
        RET
          CFI EndBlock cfiBlock23
        REQUIRE _A_PORTD
        REQUIRE _A_PORTF
        REQUIRE _A_PORTG
        REQUIRE _A_PORTA
        REQUIRE _A_PORTC

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_0x_hexadecimal(unsigned char)
dot_0x_hexadecimal:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function dot_0x_hexadecimal
        MOV     R22, R16
        LDI     R17, 3
        LDI     R16, 48
          CFI FunCall dot_matrix_digit
        RCALL   dot_matrix_digit
        LDI     R17, 2
        LDI     R16, 120
          CFI FunCall dot_matrix_digit
        RCALL   dot_matrix_digit
        LDI     R21, 2
        RJMP    ??dot_0x_hexadecimal_0
??dot_0x_hexadecimal_1:
        MOV     R17, R21
        DEC     R17
        SUBI    R16, 201
          CFI FunCall dot_matrix_digit
        RCALL   dot_matrix_digit
??dot_0x_hexadecimal_2:
        DEC     R21
??dot_0x_hexadecimal_0:
        TST     R21
        BREQ    ??dot_0x_hexadecimal_3
        MOV     R16, R22
        LDI     R17, 0
        MOV     R19, R21
        DEC     R19
        LDI     R18, 4
        MUL     R19, R18
        MOV     R20, R0
          CFI FunCall ?SS_SHR_L02
        CALL    ?SS_SHR_L02
        ANDI    R16, 0x0F
        CPI     R16, 10
        BRCC    ??dot_0x_hexadecimal_1
        MOV     R17, R21
        DEC     R17
        SUBI    R16, 208
          CFI FunCall dot_matrix_digit
        RCALL   dot_matrix_digit
        RJMP    ??dot_0x_hexadecimal_2
??dot_0x_hexadecimal_3:
        RET
          CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_vol_hextodeci(unsigned char)
dot_vol_hextodeci:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function dot_vol_hextodeci
        MOV     R17, R16
        LDS     R16, mute_enable
        TST     R16
        BRNE    ??dot_vol_hextodeci_0
        LDI     R16, 77
        STS     ess_volume, R16
        LDI     R16, 85
        STS     (ess_volume + 1), R16
        LDI     R16, 84
        STS     (ess_volume + 2), R16
        LDI     R16, 69
        STS     (ess_volume + 3), R16
        RJMP    ??dot_vol_hextodeci_1
??dot_vol_hextodeci_0:
        TST     R17
        BRNE    ??dot_vol_hextodeci_2
        LDI     R16, 32
        STS     ess_volume, R16
        LDI     R16, 49
        STS     (ess_volume + 1), R16
        LDI     R16, 48
        STS     (ess_volume + 2), R16
        LDI     R16, 48
        STS     (ess_volume + 3), R16
        RJMP    ??dot_vol_hextodeci_1
??dot_vol_hextodeci_2:
        CPI     R17, 255
        BRNE    ??dot_vol_hextodeci_3
        LDI     R16, 48
        STS     ess_volume, R16
        LDI     R16, 48
        STS     (ess_volume + 1), R16
        LDI     R16, 46
        STS     (ess_volume + 2), R16
        LDI     R16, 48
        STS     (ess_volume + 3), R16
        RJMP    ??dot_vol_hextodeci_1
??dot_vol_hextodeci_3:
        LDI     R19, 20
        LDI     R16, 200
        SUB     R16, R17
        MOV     R17, R16
        LDI     R18, 0
        RJMP    ??dot_vol_hextodeci_4
??dot_vol_hextodeci_5:
        MOV     R16, R17
        MOV     R20, R19
          CFI FunCall ?UC_DIVMOD_L01
        CALL    ?UC_DIVMOD_L01
        SUBI    R16, 208
        MOV     R20, R18
        LDI     R21, 0
        MOVW    R31:R30, R21:R20
        SUBI    R30, LOW((-(ess_volume) & 0xFFFF))
        SBCI    R31, (-(ess_volume) & 0xFFFF) >> 8
        ST      Z, R16
        MOV     R16, R17
        MOV     R20, R19
          CFI FunCall ?UC_DIVMOD_L01
        CALL    ?UC_DIVMOD_L01
        MOV     R17, R20
        LDI     R20, 10
        MOV     R16, R19
          CFI FunCall ?UC_DIVMOD_L01
        CALL    ?UC_DIVMOD_L01
        MOV     R19, R16
        INC     R18
??dot_vol_hextodeci_4:
        CPI     R18, 2
        BRCS    ??dot_vol_hextodeci_5
        TST     R17
        BREQ    ??dot_vol_hextodeci_6
        LDI     R16, 46
        STS     (ess_volume + 2), R16
        LDI     R16, 53
        STS     (ess_volume + 3), R16
        RJMP    ??dot_vol_hextodeci_1
??dot_vol_hextodeci_6:
        LDI     R16, 46
        STS     (ess_volume + 2), R16
        LDI     R16, 48
        STS     (ess_volume + 3), R16
??dot_vol_hextodeci_1:
        LDI     R18, 0
        RJMP    ??dot_vol_hextodeci_7
??dot_vol_hextodeci_8:
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(ess_volume) & 0xFFFF))
        SBCI    R31, (-(ess_volume) & 0xFFFF) >> 8
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        STD     Z+12, R16
        INC     R18
??dot_vol_hextodeci_7:
        CPI     R18, 4
        BRCS    ??dot_vol_hextodeci_8
          CFI FunCall dot_string_digit
        RCALL   dot_string_digit
        RET
          CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void dot_matrix_set()
dot_matrix_set:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function dot_matrix_set
        SBI     0x12, 0x07
        LDI     R16, 1
        STS     dot_light_reg, R16
        LDS     R16, 101
        ORI     R16, 0x01
        STS     101, R16
        LDI     R16, 4
          CFI FunCall dot_matrix_bright
        RCALL   dot_matrix_bright
        RET
          CFI EndBlock cfiBlock26
        REQUIRE _A_PORTD
        REQUIRE _A_PORTG

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char test_osc
test_osc:
        DS8 1
        REQUIRE `?<Initializer for test_osc>`

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void ess_mute()
ess_mute:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ess_mute
        LDS     R16, key_func
        TST     R16
        BRNE    ??ess_mute_0
        LDS     R16, mute_enable
        TST     R16
        BRNE    ??ess_mute_1
        LDI     R16, 1
        STS     mute_enable, R16
        RJMP    ??ess_mute_2
??ess_mute_1:
        LDI     R16, 0
        STS     mute_enable, R16
??ess_mute_2:
        LDS     R16, mute_enable
        TST     R16
        BRNE    ??ess_mute_3
        LDI     R17, 1
        RJMP    ??ess_mute_4
??ess_mute_3:
        LDI     R17, 0
??ess_mute_4:
        LDS     R16, es9018_reg10
        ANDI    R16, 0xCE
        ADD     R16, R17
        STS     es9018_reg10, R16
        LDS     R18, es9018_reg10
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDS     R18, es9018_reg10
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        RCALL   dot_vol_hextodeci
??ess_mute_0:
        RET
          CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void phase_ess()
phase_ess:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function phase_ess
        LDS     R16, phase_data
        TST     R16
        BRNE    ??phase_ess_0
        LDI     R18, 255
        LDI     R17, 13
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 255
        LDI     R17, 13
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        RJMP    ??phase_ess_1
??phase_ess_0:
        LDI     R18, 0
        LDI     R17, 13
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 0
        LDI     R17, 13
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??phase_ess_1:
          CFI FunCall rom_write_multi
        RCALL   rom_write_multi
        RET
          CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void volume_set()
volume_set:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function volume_set
        LDI     R30, 0
        RJMP    ??volume_set_0
??volume_set_1:
        LDS     R18, vol_dB
        MOV     R17, R30
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDS     R18, vol_dB
        MOV     R17, R30
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        INC     R30
??volume_set_0:
        CPI     R30, 8
        BRCS    ??volume_set_1
          CFI FunCall rom_write_multi
        RCALL   rom_write_multi
        RET
          CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void init_vol_dn(unsigned char)
init_vol_dn:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function init_vol_dn
        LDI     R18, 127
        LDS     R16, ess_lch_master_trim
        SUB     R18, R16
        LDI     R17, 23
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 127
        LDS     R16, ess_rch_master_trim
        SUB     R18, R16
        LDI     R17, 23
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 254
        LDI     R17, 20
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 254
        LDI     R17, 20
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        RET
          CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void init_vol(unsigned char)
init_vol:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function init_vol
        LDI     R18, 255
        LDI     R17, 20
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 255
        LDI     R17, 20
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        RET
          CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void audio_level_sp_down()
audio_level_sp_down:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function audio_level_sp_down
        LDS     R16, key_func
        TST     R16
        BRNE    ??audio_level_sp_down_0
        LDS     R17, vol_dB
        LDS     R16, vol_dB
        CPI     R16, 197
        BRCC    ??audio_level_sp_down_1
        LDS     R16, vol_dB
        SUBI    R16, 253
        STS     vol_dB, R16
        RJMP    ??audio_level_sp_down_2
??audio_level_sp_down_1:
        LDI     R16, 255
        STS     vol_dB, R16
??audio_level_sp_down_2:
        LDS     R16, vol_dB
        CP      R17, R16
        BREQ    ??audio_level_sp_down_0
          CFI FunCall volume_set
        RCALL   volume_set
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        RCALL   dot_vol_hextodeci
??audio_level_sp_down_0:
        RET
          CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void audio_level_sp_up()
audio_level_sp_up:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function audio_level_sp_up
        LDS     R16, key_func
        TST     R16
        BRNE    ??audio_level_sp_up_0
        LDS     R17, vol_dB
        LDS     R16, vol_dB
        CPI     R16, 255
        BRNE    ??audio_level_sp_up_1
        LDI     R16, 199
        STS     vol_dB, R16
        RJMP    ??audio_level_sp_up_2
??audio_level_sp_up_1:
        LDS     R16, vol_dB
        CPI     R16, 3
        BRCS    ??audio_level_sp_up_3
        LDS     R16, vol_dB
        SUBI    R16, 3
        STS     vol_dB, R16
        RJMP    ??audio_level_sp_up_2
??audio_level_sp_up_3:
        LDI     R16, 0
        STS     vol_dB, R16
??audio_level_sp_up_2:
        LDS     R16, vol_dB
        CP      R17, R16
        BREQ    ??audio_level_sp_up_0
          CFI FunCall volume_set
        RCALL   volume_set
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        RCALL   dot_vol_hextodeci
??audio_level_sp_up_0:
        RET
          CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void audio_level_down()
audio_level_down:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function audio_level_down
        LDS     R16, key_func
        TST     R16
        BRNE    ??audio_level_down_0
        LDS     R16, mute_enable
        TST     R16
        BRNE    ??audio_level_down_1
          CFI FunCall ess_mute
        RCALL   ess_mute
??audio_level_down_1:
        LDS     R17, vol_dB
        LDS     R16, vol_dB
        CPI     R16, 199
        BRCC    ??audio_level_down_2
        LDS     R16, vol_dB
        INC     R16
        STS     vol_dB, R16
        RJMP    ??audio_level_down_3
??audio_level_down_2:
        LDI     R16, 255
        STS     vol_dB, R16
??audio_level_down_3:
        LDS     R16, vol_dB
        CP      R17, R16
        BREQ    ??audio_level_down_0
          CFI FunCall volume_set
        RCALL   volume_set
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        RCALL   dot_vol_hextodeci
??audio_level_down_0:
        RET
          CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void audio_level_up()
audio_level_up:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function audio_level_up
        LDS     R16, key_func
        TST     R16
        BRNE    ??audio_level_up_0
        LDS     R16, mute_enable
        TST     R16
        BRNE    ??audio_level_up_1
          CFI FunCall ess_mute
        RCALL   ess_mute
??audio_level_up_1:
        LDS     R17, vol_dB
        LDS     R16, vol_dB
        CPI     R16, 255
        BRNE    ??audio_level_up_2
        LDI     R16, 199
        STS     vol_dB, R16
        RJMP    ??audio_level_up_3
??audio_level_up_2:
        LDS     R16, vol_dB
        TST     R16
        BREQ    ??audio_level_up_3
        LDS     R16, vol_dB
        DEC     R16
        STS     vol_dB, R16
??audio_level_up_3:
        LDS     R16, vol_dB
        CP      R17, R16
        BREQ    ??audio_level_up_0
          CFI FunCall volume_set
        RCALL   volume_set
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        RCALL   dot_vol_hextodeci
??audio_level_up_0:
        RET
          CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void channel_change()
channel_change:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function channel_change
        LDS     R16, mute_enable
        TST     R16
        BREQ    ??channel_change_0
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??channel_change_0:
        LDS     R16, ch_led_data
        CPI     R16, 7
        BRNE    ??channel_change_1
        LDI     R16, 0
        RJMP    ??channel_change_2
??channel_change_1:
        LDI     R16, 1
??channel_change_2:
        LDS     R17, i2s_flag
        CP      R16, R17
        BREQ    ??channel_change_3
        STS     i2s_flag, R16
        LDI     R30, LOW(i2s_flag)
        LDI     R31, (i2s_flag) >> 8
        LD      R16, Z
        SBRC    R16, 0
        SBI     0x03, 0x03
??channel_change_4:
        SBRS    R16, 0
        CBI     0x03, 0x03
??channel_change_3:
        LDS     R16, interface_ch
        ANDI    R16, 0xC7
        STS     interface_ch, R16
        LDS     R16, ch_led_data
        LSL     R16
        LSL     R16
        LSL     R16
        LDS     R17, interface_ch
        ADD     R17, R16
        STS     interface_ch, R17
        LDS     R18, interface_ch
        LDI     R17, 4
        LDI     R16, 32
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDS     R16, mute_enable
        TST     R16
        BREQ    ??channel_change_5
        LDI     R18, 206
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 206
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??channel_change_5:
          CFI FunCall rom_write_multi
        RCALL   rom_write_multi
        RET
          CFI EndBlock cfiBlock36
        REQUIRE _A_PORTE

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void channel_up()
channel_up:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function channel_up
        LDS     R16, key_func
        TST     R16
        BRNE    ??channel_up_0
        LDS     R16, ch_led_data
        CPI     R16, 7
        BRCC    ??channel_up_1
        LDS     R16, ch_led_data
        INC     R16
        STS     ch_led_data, R16
        RJMP    ??channel_up_2
??channel_up_1:
        LDI     R16, 0
        STS     ch_led_data, R16
??channel_up_2:
          CFI FunCall channel_change
        RCALL   channel_change
??channel_up_0:
        RET
          CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void channel_down()
channel_down:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function channel_down
        LDS     R16, key_func
        TST     R16
        BRNE    ??channel_down_0
        LDS     R16, ch_led_data
        TST     R16
        BREQ    ??channel_down_1
        LDS     R16, ch_led_data
        DEC     R16
        STS     ch_led_data, R16
        RJMP    ??channel_down_2
??channel_down_1:
        LDI     R16, 7
        STS     ch_led_data, R16
??channel_down_2:
          CFI FunCall channel_change
        RCALL   channel_change
??channel_down_0:
        RET
          CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void ess_filter()
ess_filter:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function ess_filter
        MOV     R0, R24
        LDI     R16, 0
        STS     rom_save_flag2, R16
        LDI     R16, 0
        OUT     0x38, R16
        LDS     R16, filter_flag
        CPI     R16, 3
        BRNE    ??ess_filter_0
        LDI     R16, 0
        STS     filter_flag, R16
??ess_filter_0:
        LDS     R24, filter_flag
          CFI FunCall rom_write_multi
        RCALL   rom_write_multi
        LDI     R16, 5
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
        TST     R24
        BRNE    ??ess_filter_1
        LDI     R18, 11
        LDI     R17, 14
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 11
        LDI     R17, 14
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        RJMP    ??ess_filter_2
??ess_filter_1:
        CPI     R24, 1
        BRNE    ??ess_filter_3
        LDI     R18, 13
        LDI     R17, 14
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 13
        LDI     R17, 14
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        RJMP    ??ess_filter_2
??ess_filter_3:
        CPI     R24, 2
        BRNE    ??ess_filter_2
        LDI     R18, 15
        LDI     R17, 14
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 15
        LDI     R17, 14
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??ess_filter_2:
        TST     R24
        BREQ    ??ess_filter_4
        LDI     R16, 200
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
??ess_filter_4:
        LDI     R16, 1
        STS     rom_save_flag2, R16
        LDI     R30, LOW(rom_tmr)
        LDI     R31, (rom_tmr) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 8
        OUT     0x38, R16
        MOV     R24, R0
          CFI R24 R0
        RET
          CFI EndBlock cfiBlock39
        REQUIRE _A_EIFR

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void femto_function()
femto_function:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function femto_function
        LDS     R16, key_func
        CPI     R16, 1
        BREQ    ??femto_function_0
        LDS     R16, key_func
        CPI     R16, 2
        BRNE    ??femto_function_1
??femto_function_0:
        LDI     R16, 1
        STS     key_condition, R16
        RJMP    ??femto_function_2
??femto_function_1:
        LDS     R16, key_func
        CPI     R16, 3
        BRNE    ??femto_function_3
        LDS     R16, phase_data
        TST     R16
        BRNE    ??femto_function_4
        LDI     R16, 1
        STS     phase_data, R16
        RJMP    ??femto_function_5
??femto_function_4:
        LDI     R16, 0
        STS     phase_data, R16
??femto_function_5:
          CFI FunCall phase_ess
        RCALL   phase_ess
        RJMP    ??femto_function_2
??femto_function_3:
        LDS     R16, key_func
        CPI     R16, 4
        BRNE    ??femto_function_2
        LDS     R16, filter_flag
        INC     R16
        STS     filter_flag, R16
        LDS     R16, mute_enable
        TST     R16
        BREQ    ??femto_function_6
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??femto_function_6:
          CFI FunCall ess_filter
        RCALL   ess_filter
          CFI FunCall volume_set
        RCALL   volume_set
        LDI     R16, 5
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
        LDS     R16, mute_enable
        TST     R16
        BREQ    ??femto_function_2
        LDI     R18, 206
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        RCALL   I2C_Write
        LDI     R18, 206
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        RCALL   I2C_Write
??femto_function_2:
        LDI     R18, 0
        RJMP    ??femto_function_7
??femto_function_8:
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(normal_name - 8) & 0xFFFF))
        SBCI    R31, HIGH((-(normal_name - 8) & 0xFFFF))
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
??femto_function_9:
        INC     R18
??femto_function_7:
        CPI     R18, 16
        BRCC    ??femto_function_10
        CPI     R18, 8
        BRCC    ??femto_function_11
        LDS     R16, filter_flag
        LDI     R17, 0
        LDI     R20, 8
        LDI     R21, 0
          CFI FunCall ?S_EC_MUL_L02
        CALL    ?S_EC_MUL_L02
        LDI     R30, LOW(filter_name)
        LDI     R31, (filter_name) >> 8
        ADD     R30, R16
        ADC     R31, R17
        LDI     R19, 0
        ADD     R30, R18
        ADC     R31, R19
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
        RJMP    ??femto_function_9
??femto_function_11:
        LDS     R16, phase_data
        TST     R16
        BRNE    ??femto_function_8
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(phase_name - 8) & 0xFFFF))
        SBCI    R31, HIGH((-(phase_name - 8) & 0xFFFF))
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
        RJMP    ??femto_function_9
??femto_function_10:
        LDI     R30, LOW(key_func_tmr)
        LDI     R31, (key_func_tmr) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
          CFI FunCall dot_string_digit
        RCALL   dot_string_digit
        RET
          CFI EndBlock cfiBlock40

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flg_on_remocon
_flg_on_remocon:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _code_remocon
_code_remocon:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int _counter_remocon
_counter_remocon:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// int _remocon_custom
_remocon_custom:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// int _remocon_custom_2
_remocon_custom_2:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// int _remocon_data
_remocon_data:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// int Remoc_data_save
Remoc_data_save:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// int _remocon_data_2
_remocon_data_2:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _remocon_counter
_remocon_counter:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flgOrKey
_flgOrKey:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flg_enter
_flg_enter:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int _remocon_buffer
_remocon_buffer:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flg_repeat
_flg_repeat:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int _remocon_repeat_count
_remocon_repeat_count:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flg_run_repeat
_flg_run_repeat:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char _flg_allow_remocon_repeat
_flg_allow_remocon_repeat:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int cnt_remocon
cnt_remocon:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// char bit_input
bit_input:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char _repeat_remocon
_repeat_remocon:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
// unsigned char _repeat_data
_repeat_data:
        DS8 1
        REQUIRE `?<Initializer for _repeat_data>`

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char low_bit_time
low_bit_time:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char low_start_flag
low_start_flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char high_bit_0
high_bit_0:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char high_bit_1
high_bit_1:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char high_start_flag
high_start_flag:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char high_repeat_flag0
high_repeat_flag0:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char high_repeat_flag1
high_repeat_flag1:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ir_error_check
ir_error_check:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT TIMER2_OVF_Handler, "interrupt"
// __version_3 __interrupt void TIMER2_OVF_Handler(void)
TIMER2_OVF_Handler:
          CFI Block cfiBlock41 Using cfiCommon1
          CFI Function TIMER2_OVF_Handler
          CFI NoCalls
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        IN      R19, 0x3F
        IN      R20, 0x3B
        LDI     R16, 55
        OUT     0x24, R16
        LDI     R30, LOW(_counter_remocon)
        LDI     R31, (_counter_remocon) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, cnt_remocon
        LDS     R17, (cnt_remocon + 1)
        OR      R16, R17
        BREQ    ??TIMER2_OVF_Handler_0
        LDI     R30, LOW(cnt_remocon)
        LDI     R31, (cnt_remocon) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
??TIMER2_OVF_Handler_0:
        LDS     R16, _counter_remocon
        LDS     R17, (_counter_remocon + 1)
        CPI     R16, 77
        LDI     R18, 4
        CPC     R17, R18
        BRCC    $+2+2
        RJMP    ??TIMER2_OVF_Handler_1
        LDI     R16, 0
        STS     _flg_on_remocon, R16
        LDI     R16, 0
        STS     _code_remocon, R16
        LDI     R16, 0
        STS     _remocon_custom_2, R16
        LDI     R16, 0
        STS     (_remocon_custom_2 + 1), R16
        LDI     R16, 0
        STS     _remocon_custom, R16
        LDI     R16, 0
        STS     (_remocon_custom + 1), R16
        LDI     R16, 0
        STS     _remocon_data, R16
        LDI     R16, 0
        STS     (_remocon_data + 1), R16
        LDI     R16, 0
        STS     _remocon_data_2, R16
        LDI     R16, 0
        STS     (_remocon_data_2 + 1), R16
        LDI     R16, 0
        STS     _remocon_counter, R16
        LDI     R16, 0
        STS     low_start_flag, R16
        LDI     R16, 0
        STS     high_start_flag, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_0, R16
        LDI     R16, 0
        STS     high_bit_1, R16
        LDI     R16, 0
        STS     high_repeat_flag0, R16
        LDI     R16, 0
        STS     high_repeat_flag1, R16
        LDI     R16, 0
        STS     _repeat_remocon, R16
        LDI     R16, 0
        STS     _counter_remocon, R16
        LDI     R16, 0
        STS     (_counter_remocon + 1), R16
        LDI     R16, 0
        STS     ir_error_check, R16
        LDI     R16, 1
        STS     rom_save_flag, R16
        LDS     R16, rom_save_flag
        TST     R16
        BRNE    ??TIMER2_OVF_Handler_1
        LDI     R16, 1
        STS     rom_save_flag, R16
        LDI     R16, 0
        STS     rom_tmr, R16
        LDI     R16, 0
        STS     (rom_tmr + 1), R16
??TIMER2_OVF_Handler_1:
        OUT     0x3B, R20
        OUT     0x3F, R19
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+6
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+5
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+4
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+3
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock41
        REQUIRE _A_TCNT2

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void IR_error()
IR_error:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function IR_error
          CFI NoCalls
        LDI     R16, 0
        STS     _flg_on_remocon, R16
        LDI     R16, 0
        STS     _code_remocon, R16
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 0
        STS     _remocon_counter, R16
        LDI     R16, 0
        STS     low_start_flag, R16
        LDI     R16, 0
        STS     high_start_flag, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_0, R16
        LDI     R16, 0
        STS     high_bit_1, R16
        LDI     R16, 0
        STS     high_repeat_flag0, R16
        LDI     R16, 0
        STS     high_repeat_flag1, R16
        LDI     R16, 0
        STS     _repeat_remocon, R16
        LDI     R16, 0
        STS     ir_error_check, R16
        RET
          CFI EndBlock cfiBlock42

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char new_repeat_flag
new_repeat_flag:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void remocon_data()
remocon_data:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function remocon_data
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        LDS     R16, _code_remocon
        SUBI    R16, 1
        BREQ    ??remocon_data_0
        DEC     R16
        BREQ    ??remocon_data_1
        DEC     R16
        BREQ    ??remocon_data_2
        DEC     R16
        BRNE    $+2+2
        RJMP    ??remocon_data_3
        RJMP    ??remocon_data_4
??remocon_data_0:
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LSL     R16
        ROL     R17
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, bit_input
        LDI     R17, 0
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        OR      R18, R16
        OR      R19, R17
        ST      Z, R18
        STD     Z+1, R19
        RJMP    ??remocon_data_4
??remocon_data_1:
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LSL     R16
        ROL     R17
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, bit_input
        LDI     R17, 0
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        OR      R18, R16
        OR      R19, R17
        ST      Z, R18
        STD     Z+1, R19
        RJMP    ??remocon_data_4
??remocon_data_2:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LSL     R16
        ROL     R17
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, bit_input
        LDI     R17, 0
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        OR      R18, R16
        OR      R19, R17
        ST      Z, R18
        STD     Z+1, R19
        RJMP    ??remocon_data_4
??remocon_data_3:
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LSL     R16
        ROL     R17
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, bit_input
        LDI     R17, 0
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        OR      R18, R16
        OR      R19, R17
        ST      Z, R18
        STD     Z+1, R19
??remocon_data_4:
        LDS     R16, _remocon_counter
        INC     R16
        STS     _remocon_counter, R16
        LDS     R16, _remocon_counter
        CPI     R16, 8
        BRCS    ??remocon_data_5
        LDS     R16, _code_remocon
        INC     R16
        STS     _code_remocon, R16
        LDI     R16, 0
        STS     _remocon_counter, R16
??remocon_data_5:
        LDS     R16, _code_remocon
        CPI     R16, 5
        BRCC    $+2+2
        RJMP    ??remocon_data_6
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0x0F
        ANDI    R17, 0x00
        ST      Z, R16
        STD     Z+1, R17
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        ANDI    R16, 0x0F
        ANDI    R17, 0x00
        ST      Z, R16
        STD     Z+1, R17
        LDI     R26, LOW(_remocon_custom)
        LDI     R27, (_remocon_custom) >> 8
        LD      R30, X+
        LD      R31, X
        SBIW    R31:R30, 7
        BREQ    $+2+2
        RJMP    ??remocon_data_7
        LDI     R26, LOW(_remocon_custom_2)
        LDI     R27, (_remocon_custom_2) >> 8
        LD      R30, X+
        LD      R31, X
        SBIW    R31:R30, 10
        BREQ    $+2+2
        RJMP    ??remocon_data_7
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        LDI     R20, 255
        EOR     R18, R20
        LDI     R20, 0
        EOR     R19, R20
        CP      R16, R18
        CPC     R17, R19
        BREQ    $+2+2
        RJMP    ??remocon_data_8
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        STS     _repeat_data, R16
        LDS     R16, init_setting_check
        TST     R16
        BRNE    $+2+2
        RJMP    ??remocon_data_9
        LDI     R30, LOW(cnt_remocon)
        LDI     R31, (cnt_remocon) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 233
        SBCI    R17, 3
        CPI     R16, 243
        LDI     R18, 1
        CPC     R17, R18
        BRCC    ??remocon_data_10
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 128
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_11
          CFI FunCall audio_level_up
        RCALL   audio_level_up
        RJMP    ??remocon_data_10
??remocon_data_11:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 168
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_10
          CFI FunCall audio_level_down
        RCALL   audio_level_down
??remocon_data_10:
        LDI     R30, LOW(cnt_remocon)
        LDI     R31, (cnt_remocon) >> 8
        LDI     R16, 1
        LDI     R17, 0
        ST      Z, R16
        STD     Z+1, R17
        LDI     R16, 0
        STS     rom_save_flag, R16
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 176
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_12
          CFI FunCall ess_mute
        RCALL   ess_mute
        RJMP    ??remocon_data_9
??remocon_data_12:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 128
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_13
          CFI FunCall audio_level_up
        RCALL   audio_level_up
        RJMP    ??remocon_data_9
??remocon_data_13:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 168
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_14
          CFI FunCall audio_level_down
        RCALL   audio_level_down
        RJMP    ??remocon_data_9
??remocon_data_14:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 144
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_15
          CFI FunCall channel_up
        RCALL   channel_up
        RJMP    ??remocon_data_9
??remocon_data_15:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 136
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_16
          CFI FunCall channel_down
        RCALL   channel_down
        RJMP    ??remocon_data_9
??remocon_data_16:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 160
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_17
        LDS     R16, key_condition
        TST     R16
        BRNE    ??remocon_data_18
        LDI     R16, 1
        STS     key_func, R16
        RJMP    ??remocon_data_19
??remocon_data_18:
        LDI     R16, 3
        STS     key_func, R16
??remocon_data_19:
          CFI FunCall femto_function
        RCALL   femto_function
        RJMP    ??remocon_data_9
??remocon_data_17:
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 152
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??remocon_data_9
        LDS     R16, key_condition
        TST     R16
        BRNE    ??remocon_data_20
        LDI     R16, 2
        STS     key_func, R16
        RJMP    ??remocon_data_21
??remocon_data_20:
        LDI     R16, 4
        STS     key_func, R16
??remocon_data_21:
          CFI FunCall femto_function
        RCALL   femto_function
??remocon_data_9:
        LDI     R16, 0
        STS     new_repeat_flag, R16
        RJMP    ??remocon_data_22
??remocon_data_8:
          CFI FunCall IR_error
        RCALL   IR_error
        RJMP    ??remocon_data_22
??remocon_data_7:
          CFI FunCall IR_error
        RCALL   IR_error
??remocon_data_22:
        LDI     R16, 0
        STS     _flg_on_remocon, R16
        LDI     R16, 0
        STS     _code_remocon, R16
        LDI     R30, LOW(_remocon_custom_2)
        LDI     R31, (_remocon_custom_2) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_custom)
        LDI     R31, (_remocon_custom) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_data)
        LDI     R31, (_remocon_data) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R30, LOW(_remocon_data_2)
        LDI     R31, (_remocon_data_2) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 0
        STS     _remocon_counter, R16
        LDI     R16, 0
        STS     low_start_flag, R16
        LDI     R16, 0
        STS     high_start_flag, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_0, R16
        LDI     R16, 0
        STS     high_bit_1, R16
        LDI     R16, 0
        STS     high_repeat_flag0, R16
        LDI     R16, 0
        STS     high_repeat_flag1, R16
        LDI     R16, 0
        STS     _repeat_remocon, R16
        LDI     R16, 0
        STS     ir_error_check, R16
??remocon_data_6:
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+1
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock43

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int sp_en_cnt
sp_en_cnt:
        DS8 2

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _remocon_processing()
_remocon_processing:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function _remocon_processing
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        LDS     R16, low_start_flag
        TST     R16
        BREQ    ??_remocon_processing_0
        LDS     R16, high_start_flag
        TST     R16
        BREQ    ??_remocon_processing_0
        LDS     R16, _flg_on_remocon
        TST     R16
        BREQ    $+2+2
        RJMP    ??_remocon_processing_1
        LDI     R16, 1
        STS     _flg_on_remocon, R16
        LDI     R16, 1
        STS     _code_remocon, R16
        LDI     R16, 0
        STS     _flg_repeat, R16
        LDI     R16, 0
        STS     _flg_run_repeat, R16
        LDI     R30, LOW(_remocon_repeat_count)
        LDI     R31, (_remocon_repeat_count) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 0
        STS     low_start_flag, R16
        LDI     R16, 0
        STS     high_start_flag, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_0, R16
        LDI     R16, 0
        STS     high_bit_1, R16
        LDI     R16, 0
        STS     high_repeat_flag0, R16
        LDI     R16, 0
        STS     high_repeat_flag1, R16
        LDI     R16, 0
        STS     _repeat_remocon, R16
        LDI     R30, LOW(sp_en_cnt)
        LDI     R31, (sp_en_cnt) >> 8
        LDI     R16, 0
        ST      Z, R16
        LDI     R16, 0
        STD     Z+1, R16
        LDI     R16, 0
        STS     ir_error_check, R16
        RJMP    ??_remocon_processing_1
??_remocon_processing_0:
        LDS     R16, _flg_on_remocon
        TST     R16
        BREQ    ??_remocon_processing_2
        LDS     R16, low_bit_time
        TST     R16
        BREQ    ??_remocon_processing_2
        LDS     R16, high_bit_0
        TST     R16
        BREQ    ??_remocon_processing_2
        LDI     R16, 0
        STS     bit_input, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_0, R16
          CFI FunCall remocon_data
        RCALL   remocon_data
        RJMP    ??_remocon_processing_1
??_remocon_processing_2:
        LDS     R16, _flg_on_remocon
        TST     R16
        BREQ    ??_remocon_processing_3
        LDS     R16, low_bit_time
        TST     R16
        BREQ    ??_remocon_processing_3
        LDS     R16, high_bit_1
        TST     R16
        BREQ    ??_remocon_processing_3
        LDI     R16, 1
        STS     bit_input, R16
        LDI     R16, 0
        STS     low_bit_time, R16
        LDI     R16, 0
        STS     high_bit_1, R16
          CFI FunCall remocon_data
        RCALL   remocon_data
        RJMP    ??_remocon_processing_1
??_remocon_processing_3:
        LDS     R16, _flg_on_remocon
        TST     R16
        BRNE    ??_remocon_processing_4
        LDS     R16, high_repeat_flag0
        TST     R16
        BREQ    ??_remocon_processing_4
        LDI     R16, 1
        STS     _repeat_remocon, R16
        LDI     R16, 0
        STS     high_repeat_flag0, R16
        LDS     R16, ir_error_check
        INC     R16
        STS     ir_error_check, R16
        RJMP    ??_remocon_processing_1
??_remocon_processing_4:
        LDS     R16, _repeat_remocon
        TST     R16
        BREQ    ??_remocon_processing_1
        LDS     R16, high_repeat_flag1
        TST     R16
        BREQ    ??_remocon_processing_1
        LDS     R16, init_setting_check
        TST     R16
        BREQ    ??_remocon_processing_1
        LDS     R16, ir_error_check
        CPI     R16, 1
        BRNE    ??_remocon_processing_5
        LDI     R16, 0
        STS     high_repeat_flag1, R16
        LDI     R16, 0
        STS     rom_save_flag, R16
        LDI     R30, LOW(sp_en_cnt)
        LDI     R31, (sp_en_cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        LDI     R26, LOW(sp_en_cnt)
        LDI     R27, (sp_en_cnt) >> 8
        LD      R30, X+
        LD      R31, X
        SBIW    R31:R30, 3
        BRCS    ??_remocon_processing_6
        LDS     R16, _repeat_data
        CPI     R16, 128
        BRNE    ??_remocon_processing_7
          CFI FunCall audio_level_sp_up
        RCALL   audio_level_sp_up
        RJMP    ??_remocon_processing_1
??_remocon_processing_7:
        LDS     R16, _repeat_data
        CPI     R16, 168
        BRNE    ??_remocon_processing_1
          CFI FunCall audio_level_sp_down
        RCALL   audio_level_sp_down
        RJMP    ??_remocon_processing_1
??_remocon_processing_6:
        LDS     R16, _repeat_data
        CPI     R16, 128
        BRNE    ??_remocon_processing_8
          CFI FunCall audio_level_up
        RCALL   audio_level_up
        RJMP    ??_remocon_processing_1
??_remocon_processing_8:
        LDS     R16, _repeat_data
        CPI     R16, 168
        BRNE    ??_remocon_processing_1
          CFI FunCall audio_level_down
        RCALL   audio_level_down
        RJMP    ??_remocon_processing_1
??_remocon_processing_5:
        LDI     R16, 0
        STS     ir_error_check, R16
        LDI     R16, 0
        STS     _repeat_data, R16
??_remocon_processing_1:
        LD      R26, Y+
          CFI R26 SameValue
          CFI CFA_Y Y+1
        LD      R27, Y+
          CFI R27 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock44

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char ir_error
ir_error:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT INT5_Handler, "interrupt"
// __version_3 __interrupt void INT5_Handler(void)
INT5_Handler:
          CFI Block cfiBlock45 Using cfiCommon1
          CFI Function INT5_Handler
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        IN      R24, 0x3F
        IN      R25, 0x3B
        SBIS    0x01, 0x05
        RJMP    ??INT5_Handler_0
        LDS     R30, _counter_remocon
        LDS     R31, (_counter_remocon + 1)
        SBIW    R31:R30, 4
        SBIW    R31:R30, 5
        BRCC    ??INT5_Handler_1
        LDI     R16, 1
        STS     low_bit_time, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_1:
        LDS     R30, _counter_remocon
        LDS     R31, (_counter_remocon + 1)
        SBIW    R31:R30, 55
        SBIW    R31:R30, 46
        BRCC    ??INT5_Handler_3
        LDI     R16, 1
        STS     low_start_flag, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_3:
        LDI     R16, 1
        STS     ir_error, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_0:
        SBIC    0x01, 0x05
        RJMP    ??INT5_Handler_2
        LDS     R30, _counter_remocon
        LDS     R31, (_counter_remocon + 1)
        SBIW    R31:R30, 4
        SBIW    R31:R30, 5
        BRCC    ??INT5_Handler_4
        LDI     R16, 1
        STS     high_bit_0, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_4:
        LDS     R30, _counter_remocon
        LDS     R31, (_counter_remocon + 1)
        SBIW    R31:R30, 9
        SBIW    R31:R30, 14
        BRCC    ??INT5_Handler_5
        LDI     R16, 1
        STS     high_bit_1, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_5:
        LDS     R30, _counter_remocon
        LDS     R31, (_counter_remocon + 1)
        SBIW    R31:R30, 40
        SBIW    R31:R30, 16
        BRCC    ??INT5_Handler_6
        LDI     R16, 1
        STS     high_start_flag, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_6:
        LDS     R16, _counter_remocon
        LDS     R17, (_counter_remocon + 1)
        SUBI    R16, 200
        SBCI    R17, 0
        CPI     R16, 201
        LDI     R18, 0
        CPC     R17, R18
        BRCC    ??INT5_Handler_7
        LDI     R16, 1
        STS     high_repeat_flag0, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_7:
        LDS     R16, _counter_remocon
        LDS     R17, (_counter_remocon + 1)
        SUBI    R16, 32
        SBCI    R17, 3
        CPI     R16, 201
        LDI     R18, 0
        CPC     R17, R18
        BRCC    ??INT5_Handler_8
        LDI     R16, 1
        STS     high_repeat_flag1, R16
        RJMP    ??INT5_Handler_2
??INT5_Handler_8:
        LDI     R16, 1
        STS     ir_error, R16
??INT5_Handler_2:
        LDI     R16, 0
        STS     _counter_remocon, R16
        LDI     R16, 0
        STS     (_counter_remocon + 1), R16
        LDS     R16, ir_error
        TST     R16
        BREQ    ??INT5_Handler_9
        LDI     R16, 0
        STS     ir_error, R16
        LDI     R16, 0
        STS     high_repeat_flag1, R16
          CFI FunCall IR_error
        RCALL   IR_error
        RJMP    ??INT5_Handler_10
??INT5_Handler_9:
          CFI FunCall _remocon_processing
        RCALL   _remocon_processing
??INT5_Handler_10:
        OUT     0x3B, R25
        OUT     0x3F, R24
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+15
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+14
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+13
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+12
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+11
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+10
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+9
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+8
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+7
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+6
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+5
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+4
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+3
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock45
        REQUIRE _A_PINE

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int mtime_length
mtime_length:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char mtime_flag
mtime_flag:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _system_init(void)
_system_init:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function _system_init
        LDI     R16, 255
        OUT     0x1A, R16
        LDI     R16, 189
        OUT     0x17, R16
        LDI     R16, 255
        OUT     0x14, R16
        LDI     R16, 131
        OUT     0x11, R16
        LDI     R16, 8
        OUT     0x02, R16
        LDI     R16, 15
        STS     _A_DDRF, R16
        LDI     R16, 31
        STS     _A_DDRG, R16
        LDI     R16, 0
        OUT     0x1B, R16
        LDI     R16, 127
        OUT     0x18, R16
        LDI     R16, 255
        OUT     0x15, R16
        LDI     R16, 255
        OUT     0x12, R16
        LDI     R16, 255
        OUT     0x03, R16
        LDI     R16, 240
        STS     _A_PORTF, R16
        LDI     R16, 30
        STS     _A_PORTG, R16
        LDI     R16, 3
        OUT     0x33, R16
        LDI     R16, 5
        OUT     0x2E, R16
        LDI     R16, 2
        OUT     0x25, R16
        LDI     R16, 55
        OUT     0x24, R16
        LDI     R16, 5
        OUT     0x32, R16
        LDI     R16, 228
        LDI     R17, 249
        OUT     0x2D, R17
        OUT     0x2C, R16
        LDI     R16, 0
        OUT     0x31, R16
        LDI     R16, 69
        OUT     0x37, R16
        LDI     R16, 69
        OUT     0x36, R16
        LDI     R16, 252
        OUT     0x39, R16
        LDI     R16, 160
        STS     _A_EICRA, R16
        LDI     R16, 85
        OUT     0x3A, R16
        LDI     R16, 252
        OUT     0x38, R16
        LDI     R18, 184
        LDI     R17, 4
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
          CFI FunCall dot_matrix_clear
        CALL    dot_matrix_clear
        SEI
        LDI     R16, 0
        RJMP    ??_system_init_0
??_system_init_1:
        LDI     R17, 0
        MOVW    R31:R30, R17:R16
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        LDI     R17, 32
        ST      Z, R17
        INC     R16
??_system_init_0:
        CPI     R16, 16
        BRCS    ??_system_init_1
        LDI     R16, 0
        STS     ess_lch_master_trim, R16
        LDI     R16, 0
        STS     ess_rch_master_trim, R16
        LDI     R16, 1
        STS     tmr_osc, R16
        RET
          CFI EndBlock cfiBlock46
        REQUIRE _A_DDRA
        REQUIRE _A_DDRB
        REQUIRE _A_DDRC
        REQUIRE _A_DDRD
        REQUIRE _A_DDRE
        REQUIRE _A_DDRF
        REQUIRE _A_DDRG
        REQUIRE _A_PORTA
        REQUIRE _A_PORTB
        REQUIRE _A_PORTC
        REQUIRE _A_PORTD
        REQUIRE _A_PORTE
        REQUIRE _A_PORTF
        REQUIRE _A_PORTG
        REQUIRE _A_TCCR0
        REQUIRE _A_TCCR1B
        REQUIRE _A_TCCR2
        REQUIRE _A_TCNT2
        REQUIRE _A_TCNT0
        REQUIRE _A_TCNT1
        REQUIRE _A_OCR0
        REQUIRE _A_TIMSK
        REQUIRE _A_TIFR
        REQUIRE _A_EIMSK
        REQUIRE _A_EICRA
        REQUIRE _A_EICRB
        REQUIRE _A_EIFR

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int test_check
test_check:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int test_check2
test_check2:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_data0
init_rom_data0:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_data1
init_rom_data1:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_data2
init_rom_data2:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_add0
init_rom_add0:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_add1
init_rom_add1:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_add2
init_rom_add2:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char init_rom_address_data
init_rom_address_data:
        DS8 1

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void rom_check_sum_error()
rom_check_sum_error:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function rom_check_sum_error
        MOVW    R1:R0, R25:R24
        LDI     R24, 10
        LDI     R25, 0
??rom_check_sum_error_0:
        CPI     R24, 251
        LDI     R16, 7
        CPC     R25, R16
        BRCC    ??rom_check_sum_error_1
        ADIW    R25:R24, 5
        MOV     R16, R24
        ANDI    R16, 0x0F
        CPI     R16, 15
        BRNE    ??rom_check_sum_error_2
        ADIW    R25:R24, 1
??rom_check_sum_error_2:
        MOVW    R17:R16, R25:R24
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        STS     init_rom_address_data, R16
        LDS     R16, init_rom_address_data
        CPI     R16, 255
        BRNE    ??rom_check_sum_error_0
??rom_check_sum_error_1:
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        ST      Z, R24
        STD     Z+1, R25
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LDD     R17, Z+1
        MOV     R16, R17
        STS     init_rom_add0, R16
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
        STS     init_rom_add1, R16
        LDS     R16, init_rom_add0
        LDS     R17, init_rom_add1
        ADD     R16, R17
        STS     init_rom_add2, R16
          CFI FunCall I2C_START
        CALL    I2C_START
        LDI     R16, 160
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDS     R16, init_rom_add0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDS     R16, init_rom_add1
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDS     R16, init_rom_add2
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
          CFI FunCall I2C_STOP
        CALL    I2C_STOP
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 255
        LDI     R18, 7
        CPC     R17, R18
        BRCC    ??rom_check_sum_error_3
          CFI FunCall I2C_START
        CALL    I2C_START
        LDI     R20, 7
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
        LDD     R17, Z+1
          CFI FunCall ?US_SHR_L02
        CALL    ?US_SHR_L02
        ANDI    R16, 0x0E
        SUBI    R16, 96
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 255
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 1
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
          CFI FunCall I2C_STOP
        CALL    I2C_STOP
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
??rom_check_sum_error_3:
        MOVW    R25:R24, R1:R0
          CFI R24 R0
        RET
          CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(1)
// __version_3 void _system_init_se(void)
_system_init_se:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function _system_init_se
        MOVW    R3:R2, R25:R24
        LDI     R18, 184
        LDI     R17, 4
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 207
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R16, 0
        LDI     R17, 0
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        MOV     R24, R16
        LDI     R25, 0
        CPI     R24, 255
        LDI     R16, 0
        CPC     R25, R16
        BRNE    ??_system_init_se_0
          CFI FunCall I2C_START
        CALL    I2C_START
        LDI     R16, 160
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 16
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 16
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
          CFI FunCall I2C_STOP
        CALL    I2C_STOP
        LDI     R16, 5
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
          CFI FunCall I2C_START
        CALL    I2C_START
        LDI     R16, 160
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 16
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 0
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 255
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
        LDI     R16, 1
          CFI FunCall I2C_SHOUT
        CALL    I2C_SHOUT
          CFI FunCall I2C_STOP
        CALL    I2C_STOP
        LDI     R16, 5
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
??_system_init_se_0:
        LDI     R16, 0
        LDI     R17, 0
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        STS     init_rom_data0, R16
        LDI     R16, 1
        LDI     R17, 0
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        STS     init_rom_data1, R16
        LDI     R16, 2
        LDI     R17, 0
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        STS     init_rom_data2, R16
        LDS     R16, init_rom_data0
        LDS     R17, init_rom_data1
        ADD     R16, R17
        STS     rom_add_check_sum, R16
        LDS     R16, rom_add_check_sum
        LDS     R17, init_rom_data2
        CP      R16, R17
        BREQ    ??_system_init_se_1
          CFI FunCall rom_check_sum_error
        RCALL   rom_check_sum_error
        RJMP    ??_system_init_se_2
??_system_init_se_1:
        LDS     R16, init_rom_data0
        LDI     R17, 0
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
        MOV     R17, R16
        LDI     R16, 0
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDS     R16, init_rom_data1
        LDI     R17, 0
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R18, R16
        ADC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
??_system_init_se_2:
        LDI     R30, LOW(test_check)
        LDI     R31, (test_check) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        ST      Z, R16
        STD     Z+1, R17
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        CPI     R16, 255
        LDI     R18, 7
        CPC     R17, R18
        BRCS    $+2+2
        RJMP    ??_system_init_se_3
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        MOV     R19, R18
        MOV     R18, R17
        MOV     R17, R16
        LDI     R16, 0
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        ADD     R20, R16
        ADC     R21, R17
        ADC     R22, R18
        ADC     R23, R19
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        MOV     R19, R18
        MOV     R18, R17
        MOV     R17, R16
        LDI     R16, 0
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 254
        SBCI    R17, 255
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
        LDI     R30, LOW(rom_cnt)
        LDI     R31, (rom_cnt) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        ADD     R20, R16
        ADC     R21, R17
        ADC     R22, R18
        ADC     R23, R19
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 253
        SBCI    R17, 255
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        STS     vol_dB, R16
        LDI     R30, LOW(rom_add_pt)
        LDI     R31, (rom_add_pt) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 252
        SBCI    R17, 255
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        MOV     R24, R16
        LDI     R25, 0
        CPI     R24, 128
        LDI     R16, 0
        CPC     R25, R16
        BRCC    ??_system_init_se_4
        MOV     R16, R24
        SWAP    R16
        ANDI    R16, 0x0F
        STS     ch_led_data, R16
        MOV     R16, R24
        LSR     R16
        ANDI    R16, 0x07
        STS     filter_flag, R16
        MOV     R16, R24
        ANDI    R16, 0x01
        STS     phase_data, R16
        RJMP    ??_system_init_se_5
??_system_init_se_4:
        LDI     R16, 255
        STS     vol_dB, R16
        LDI     R16, 0
        STS     ch_led_data, R16
        LDI     R16, 0
        STS     filter_flag, R16
        LDI     R16, 1
        STS     phase_data, R16
        RJMP    ??_system_init_se_5
??_system_init_se_3:
        LDI     R16, 255
        STS     vol_dB, R16
        LDI     R16, 0
        STS     ch_led_data, R16
        LDI     R16, 0
        STS     filter_flag, R16
        LDI     R16, 1
        STS     phase_data, R16
??_system_init_se_5:
        LDI     R18, 0
        LDI     R17, 0
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 132
        LDI     R17, 1
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 9
        LDI     R17, 2
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 80
        LDI     R17, 3
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
          CFI FunCall channel_change
        RCALL   channel_change
        LDI     R18, 133
        LDI     R17, 5
        LDI     R16, 32
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 157
        LDI     R17, 11
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 32
        LDI     R17, 12
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 0
        LDI     R17, 15
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 29
        LDI     R17, 17
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 1
        LDI     R17, 25
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 157
        LDI     R17, 11
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 32
        LDI     R17, 12
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 0
        LDI     R17, 15
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 157
        LDI     R17, 17
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 1
        LDI     R17, 25
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 120
        LDI     R17, 8
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
        LDI     R18, 120
        LDI     R17, 8
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
          CFI FunCall volume_set
        RCALL   volume_set
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
          CFI FunCall phase_ess
        CALL    phase_ess
        LDI     R16, 10
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
          CFI FunCall ess_filter
        RCALL   ess_filter
        SBI     0x12, 0x07
        LDI     R16, 1
        STS     dot_light_reg, R16
        LDS     R16, 101
        ORI     R16, 0x01
        STS     101, R16
        LDI     R16, 3
          CFI FunCall dot_matrix_bright
        CALL    dot_matrix_bright
        SBI     0x18, 0x07
        LDI     R24, 0
        LDI     R25, 0
        RJMP    ??_system_init_se_6
??_system_init_se_7:
        MOVW    R17:R16, R25:R24
          CFI FunCall rom_I2C_Read
        CALL    rom_I2C_Read
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(test_eeprom) & 0xFFFF))
        SBCI    R31, (-(test_eeprom) & 0xFFFF) >> 8
        ST      Z, R16
        ADIW    R25:R24, 1
??_system_init_se_6:
        CPI     R24, 32
        LDI     R16, 0
        CPC     R25, R16
        BRCS    ??_system_init_se_7
        MOVW    R25:R24, R3:R2
          CFI R24 R2
        RET
          CFI EndBlock cfiBlock48
        REQUIRE _A_PORTD
        REQUIRE _A_PORTG
        REQUIRE _A_PORTB
//    8 
//    9 ///////////////////////////////////////////////////////////////////////////////

        RSEG CODE:CODE:NOROOT(1)
//   10 void sample_rate_cal(){
sample_rate_cal:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function sample_rate_cal
//   11   U8 i,temp;
//   12   
//   13   //if ( (old_ess_lock_ck!=ess_lock_ck) || (old_ess_automute!=ess_automute) ) {
//   14     
//   15     //if (old_ess_lock_ck!=ess_lock_ck) old_ess_lock_ck=ess_lock_ck;
//   16     //if (old_ess_automute!=ess_automute) old_ess_automute=ess_automute;
//   17   
//   18     if( ( (ch_led_data!=7) && ess_lock_ck) || (ess_lock_ck && !ess_automute) ) {
        LDS     R16, ch_led_data
        CPI     R16, 7
        BREQ    ??sample_rate_cal_0
        LDS     R16, ess_lock_ck
        TST     R16
        BRNE    ??sample_rate_cal_1
??sample_rate_cal_0:
        LDS     R16, ess_lock_ck
        TST     R16
        BRNE    $+2+2
        RJMP    ??sample_rate_cal_2
        LDS     R16, ess_automute
        TST     R16
        BREQ    $+2+2
        RJMP    ??sample_rate_cal_2
//   19        sample_rate=I2C_Read(0x90, 31);
??sample_rate_cal_1:
        LDI     R17, 31
        LDI     R16, 144
          CFI FunCall I2C_Read
        CALL    I2C_Read
        LDI     R17, 0
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   20        sample_rate<<=8;
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        MOV     R17, R16
        LDI     R16, 0
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   21        sample_rate+=I2C_Read(0x90, 30);
        LDI     R17, 30
        LDI     R16, 144
          CFI FunCall I2C_Read
        CALL    I2C_Read
        LDI     R17, 0
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R18, R16
        ADC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
//   22        sample_rate2=I2C_Read(0x92, 31);
        LDI     R17, 31
        LDI     R16, 146
          CFI FunCall I2C_Read
        CALL    I2C_Read
        LDI     R17, 0
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   23        sample_rate2<<=8;
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        MOV     R17, R16
        LDI     R16, 0
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        ST      Z, R16
        STD     Z+1, R17
//   24        sample_rate2+=I2C_Read(0x92, 30);
        LDI     R17, 30
        LDI     R16, 146
          CFI FunCall I2C_Read
        CALL    I2C_Read
        LDI     R17, 0
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        ADD     R18, R16
        ADC     R19, R17
        ST      Z, R18
        STD     Z+1, R19
//   25     
//   26         //0=44.1kHz,    1=48kHz,    2=88.2kHz,    3=96kHz,    4=176.4kHz,   5=196kHz
//   27   
//   28         //192kHz
//   29         if( (sample_rate>min192 && sample_rate<max192) || (sample_rate2>min192 && sample_rate2<max192) )	sr_led_data=5;
        LDI     R30, LOW(min192)
        LDI     R31, (min192) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_3
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max192)
        LDI     R31, (max192) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_4
??sample_rate_cal_3:
        LDI     R30, LOW(min192)
        LDI     R31, (min192) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_5
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max192)
        LDI     R31, (max192) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_5
??sample_rate_cal_4:
        LDI     R16, 5
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   30     
//   31         //176.4kHz
//   32         else if( (sample_rate>min176 && sample_rate<max176) || (sample_rate2>min176 && sample_rate2<max176) )	sr_led_data=4;
??sample_rate_cal_5:
        LDI     R30, LOW(min176)
        LDI     R31, (min176) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_7
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max176)
        LDI     R31, (max176) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_8
??sample_rate_cal_7:
        LDI     R30, LOW(min176)
        LDI     R31, (min176) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_9
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max176)
        LDI     R31, (max176) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_9
??sample_rate_cal_8:
        LDI     R16, 4
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   33         
//   34         //96kHz
//   35         else if( (sample_rate>min96 && sample_rate<max96) || (sample_rate2>min96 && sample_rate2<max96) )	sr_led_data=3;
??sample_rate_cal_9:
        LDI     R30, LOW(min96)
        LDI     R31, (min96) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_10
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max96)
        LDI     R31, (max96) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_11
??sample_rate_cal_10:
        LDI     R30, LOW(min96)
        LDI     R31, (min96) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_12
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max96)
        LDI     R31, (max96) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_12
??sample_rate_cal_11:
        LDI     R16, 3
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   36     
//   37         //88.2kHz
//   38         else if( (sample_rate>min88 && sample_rate<max88) || (sample_rate2>min88 && sample_rate2<max88) )	sr_led_data=2;
??sample_rate_cal_12:
        LDI     R30, LOW(min88)
        LDI     R31, (min88) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_13
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max88)
        LDI     R31, (max88) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_14
??sample_rate_cal_13:
        LDI     R30, LOW(min88)
        LDI     R31, (min88) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_15
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max88)
        LDI     R31, (max88) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_15
??sample_rate_cal_14:
        LDI     R16, 2
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   39     
//   40         //48kHz
//   41         else if( (sample_rate>min48 && sample_rate<max48) || (sample_rate2>min48 && sample_rate2<max48) )	sr_led_data=1;
??sample_rate_cal_15:
        LDI     R30, LOW(min48)
        LDI     R31, (min48) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_16
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max48)
        LDI     R31, (max48) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_17
??sample_rate_cal_16:
        LDI     R30, LOW(min48)
        LDI     R31, (min48) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_18
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max48)
        LDI     R31, (max48) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_18
??sample_rate_cal_17:
        LDI     R16, 1
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   42     
//   43         //44.1kHz
//   44         else if( (sample_rate>min44 && sample_rate<max44) || (sample_rate2>min44 && sample_rate2<max44) )	sr_led_data=0;
??sample_rate_cal_18:
        LDI     R30, LOW(min44)
        LDI     R31, (min44) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_19
        LDI     R30, LOW(sample_rate)
        LDI     R31, (sample_rate) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max44)
        LDI     R31, (max44) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCS    ??sample_rate_cal_20
??sample_rate_cal_19:
        LDI     R30, LOW(min44)
        LDI     R31, (min44) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_21
        LDI     R30, LOW(sample_rate2)
        LDI     R31, (sample_rate2) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDI     R30, LOW(max44)
        LDI     R31, (max44) >> 8
        LD      R18, Z
        LDD     R19, Z+1
        CP      R16, R18
        CPC     R17, R19
        BRCC    ??sample_rate_cal_21
??sample_rate_cal_20:
        LDI     R16, 0
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   45     
//   46         else sr_led_data=6;	//sr led off
??sample_rate_cal_21:
        LDI     R16, 6
        STS     sr_led_data, R16
        RJMP    ??sample_rate_cal_6
//   47     }
//   48     else sr_led_data=6;	//sr led off
??sample_rate_cal_2:
        LDI     R16, 6
        STS     sr_led_data, R16
//   49   //}
//   50   
//   51   
//   52   if(sr_led_data==6){
??sample_rate_cal_6:
        LDS     R16, sr_led_data
        CPI     R16, 6
        BRNE    ??sample_rate_cal_22
//   53     exMute=1;
        LDI     R16, 1
        STS     exMute, R16
        RJMP    ??sample_rate_cal_23
//   54   }
//   55   else exMute=0;
??sample_rate_cal_22:
        LDI     R16, 0
        STS     exMute, R16
//   56  
//   57   if(exMute!=old_exMute) {
??sample_rate_cal_23:
        LDS     R16, exMute
        LDS     R17, old_exMute
        CP      R16, R17
        BREQ    ??sample_rate_cal_24
//   58     old_exMute=exMute;
        LDS     R16, exMute
        STS     old_exMute, R16
//   59    
//   60     if(!old_exMute) temp=vol_dB;
        LDS     R16, old_exMute
        TST     R16
        BRNE    ??sample_rate_cal_25
        LDS     R31, vol_dB
        RJMP    ??sample_rate_cal_26
//   61     else temp=224;    //-114dB
??sample_rate_cal_25:
        LDI     R31, 224
//   62       
//   63     for(i=0; i<8; i++){
??sample_rate_cal_26:
        LDI     R30, 0
        RJMP    ??sample_rate_cal_27
//   64       I2C_Write(0x90,i,temp);	//Lch volume of DAC0
??sample_rate_cal_28:
        MOV     R18, R31
        MOV     R17, R30
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
//   65       I2C_Write(0x92,i,temp);	//Rch volume of DAC0
        MOV     R18, R31
        MOV     R17, R30
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
//   66     }
        INC     R30
??sample_rate_cal_27:
        CPI     R30, 8
        BRCS    ??sample_rate_cal_28
//   67   }
//   68   
//   69 }
??sample_rate_cal_24:
        RET
          CFI EndBlock cfiBlock49
//   70 
//   71 
//   72 
//   73 //ES9018 Automute check
//   74 //Any logical change
//   75 //active L : unmute, sample rate on
//   76 //active H : mute,  sample rate off
//   77 #pragma vector = INT7_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT INT7_Handler, "interrupt"
//   78 __interrupt void INT7_Handler(void)
INT7_Handler:
          CFI Block cfiBlock50 Using cfiCommon1
          CFI Function INT7_Handler
//   79 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        IN      R0, 0x3F
        IN      R1, 0x3B
//   80  if(tmr_osc_ck){
        LDS     R16, tmr_osc_ck
        TST     R16
        BREQ    ??INT7_Handler_0
//   81   if(AUTOMUTE) ess_automute=1; 			//mute,  sample rate off
        SBIS    0x01, 0x07
        RJMP    ??INT7_Handler_1
        LDI     R16, 1
        STS     ess_automute, R16
        RJMP    ??INT7_Handler_2
//   82   else ess_automute=0;            	                            //unmute, sample rate on
??INT7_Handler_1:
        LDI     R16, 0
        STS     ess_automute, R16
//   83   
//   84   sample_rate_cal();
??INT7_Handler_2:
          CFI FunCall sample_rate_cal
        RCALL   sample_rate_cal
//   85  }
//   86 }
??INT7_Handler_0:
        OUT     0x3B, R1
        OUT     0x3F, R0
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+11
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+10
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+9
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+8
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+7
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+6
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+5
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+4
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+3
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock50
        REQUIRE _A_PINE
//   87 
//   88 
//   89 //ESS LOCK-Lch
//   90 //Any logical change
//   91 //high : lock,		low : unlock
//   92 #pragma vector = INT6_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT INT6_Handler, "interrupt"
//   93 __interrupt void INT6_Handler(void)
INT6_Handler:
          CFI Block cfiBlock51 Using cfiCommon1
          CFI Function INT6_Handler
//   94 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        IN      R0, 0x3F
        IN      R1, 0x3B
//   95  if(tmr_osc_ck){
        LDS     R16, tmr_osc_ck
        TST     R16
        BREQ    ??INT6_Handler_0
//   96   if(ESS_LOCK) ess_lock_ck=1;
        SBIS    0x01, 0x06
        RJMP    ??INT6_Handler_1
        LDI     R16, 1
        STS     ess_lock_ck, R16
        RJMP    ??INT6_Handler_2
//   97   else ess_lock_ck=0;
??INT6_Handler_1:
        LDI     R16, 0
        STS     ess_lock_ck, R16
//   98   
//   99   sample_rate_cal();
??INT6_Handler_2:
          CFI FunCall sample_rate_cal
        RCALL   sample_rate_cal
//  100  }
//  101 }
??INT6_Handler_0:
        OUT     0x3B, R1
        OUT     0x3F, R0
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+11
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+10
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+9
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+8
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+7
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+6
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+5
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+4
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+3
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock51
        REQUIRE _A_PINE
//  102 /*
//  103 U8 non_audio_check=0;
//  104 //U8 old_non_audio=0;
//  105 U8 non_audio_tmr=0;
//  106 //Non_audio check
//  107 //Any logical change
//  108 //high : non_audio -> sdout: muted,		low : audio -> sdout : not muted
//  109 #pragma vector = INT4_vect
//  110 __interrupt void INT4_Handler(void)
//  111 {
//  112   U8 temp;
//  113   non_audio_check=1;
//  114   non_audio_tmr=0;
//  115   
//  116   temp=I2C_Read(0x20, 0x0b);
//  117   if((temp&0x20)==0x20) I2C_Write(0x20, 0x01, 0xc4);    //muted
//  118   else I2C_Write(0x20, 0x01, 0x84);    //not muted
//  119   //if(PINE_Bit4) old_non_audio=1;
//  120   //else I2C_Write(0x20, 0x01, 0x84);    //not muted
//  121 }
//  122 */
//  123 
//  124 //Button Key
//  125 // falling edge
//  126 #pragma vector = INT3_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT INT3_Handler, "interrupt"
//  127 __interrupt void INT3_Handler(void)
INT3_Handler:
          CFI Block cfiBlock52 Using cfiCommon1
          CFI Function INT3_Handler
//  128 {
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        IN      R24, 0x3F
        IN      R25, 0x3B
//  129   U8 data=0;
        LDI     R16, 0
//  130   
//  131   key_int_flag=0;
        LDI     R16, 0
        STS     key_int_flag, R16
//  132   data=KEY_DATA2;
        LDI     R16, 0
        SBIC    0x10, 0x06
        INC     R16
//  133   data<<=1;
??INT3_Handler_0:
        LSL     R16
//  134   data+=KEY_DATA1;
        LDI     R17, 0
        SBIC    0x10, 0x05
        INC     R17
??INT3_Handler_1:
        ADD     R16, R17
//  135   data<<=1;
        LSL     R16
//  136   data+=KEY_DATA0;
        LDI     R17, 0
        SBIC    0x10, 0x04
        INC     R17
??INT3_Handler_2:
        ADD     R16, R17
//  137   
//  138   // data =1 : ch-dn,   2: vol-up,  3 : mute,   4 : ch-up,  5 : vol-dn,   6 : inverse,  7 : filter
//  139   if(tmr_osc_ck){
        LDS     R17, tmr_osc_ck
        TST     R17
        BREQ    ??INT3_Handler_3
//  140     //channel down
//  141     if(data==1){
        CPI     R16, 1
        BRNE    ??INT3_Handler_4
//  142       channel_down();
          CFI FunCall channel_down
        CALL    channel_down
        RJMP    ??INT3_Handler_5
//  143     }
//  144   
//  145     //volume up
//  146     else if(data==2) {
??INT3_Handler_4:
        CPI     R16, 2
        BRNE    ??INT3_Handler_6
//  147       audio_level_up();                            //Master Volume Up
          CFI FunCall audio_level_up
        CALL    audio_level_up
        RJMP    ??INT3_Handler_5
//  148     }
//  149   
//  150     //mute
//  151     else if(data==3){
??INT3_Handler_6:
        CPI     R16, 3
        BRNE    ??INT3_Handler_7
//  152       ess_mute();	//mute
          CFI FunCall ess_mute
        CALL    ess_mute
        RJMP    ??INT3_Handler_5
//  153     }
//  154   
//  155     //channel up
//  156     else if(data==4){
??INT3_Handler_7:
        CPI     R16, 4
        BRNE    ??INT3_Handler_8
//  157       channel_up();
          CFI FunCall channel_up
        CALL    channel_up
        RJMP    ??INT3_Handler_5
//  158     }
//  159   
//  160     //volume down
//  161     else if(data==5){
??INT3_Handler_8:
        CPI     R16, 5
        BRNE    ??INT3_Handler_9
//  162       audio_level_down();                        //Master Volume Down
          CFI FunCall audio_level_down
        CALL    audio_level_down
        RJMP    ??INT3_Handler_5
//  163     }
//  164   
//  165     //inverse
//  166     else if(data==6){
??INT3_Handler_9:
        CPI     R16, 6
        BRNE    ??INT3_Handler_10
//  167       if(!key_condition) key_func=1;
        LDS     R16, key_condition
        TST     R16
        BRNE    ??INT3_Handler_11
        LDI     R16, 1
        STS     key_func, R16
        RJMP    ??INT3_Handler_12
//  168       else key_func=3;
??INT3_Handler_11:
        LDI     R16, 3
        STS     key_func, R16
//  169       femto_function();
??INT3_Handler_12:
          CFI FunCall femto_function
        CALL    femto_function
        RJMP    ??INT3_Handler_5
//  170       //phase_write();	//phase
//  171       //phase_ess();
//  172     }
//  173   
//  174     //filter
//  175     else if(data==7){
??INT3_Handler_10:
        CPI     R16, 7
        BRNE    ??INT3_Handler_5
//  176       if(!key_condition) key_func=2;
        LDS     R16, key_condition
        TST     R16
        BRNE    ??INT3_Handler_13
        LDI     R16, 2
        STS     key_func, R16
        RJMP    ??INT3_Handler_14
//  177       else key_func=4;
??INT3_Handler_13:
        LDI     R16, 4
        STS     key_func, R16
//  178       femto_function();
??INT3_Handler_14:
          CFI FunCall femto_function
        CALL    femto_function
//  179       //filter_led<<=1;
//  180       //if(filter_led>0x04)  filter_led=1;	//filter1
//  181       //ess_filter(filter_led);
//  182     }
//  183     key_int_flag=1;
??INT3_Handler_5:
        LDI     R16, 1
        STS     key_int_flag, R16
//  184   }
//  185 }
??INT3_Handler_3:
        OUT     0x3B, R25
        OUT     0x3F, R24
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+15
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+14
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+13
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+12
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+11
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+10
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+9
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+8
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+7
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+6
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+5
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+4
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+3
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock52
        REQUIRE _A_PIND
//  186 /*
//  187 //if(PINB_Bit6==0) PORTB_Bit7=0;       //Analog Power Disable
//  188  #pragma vector = INT2_vect
//  189 __interrupt void INT2_Handler(void)
//  190 {
//  191   PORTB_Bit7=0;       //Analog Power Disable
//  192 }
//  193 */
//  194 ///////////////////////////////////////////////////////////////////////////////
//  195 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//  196 U16 led_tmr=0;
led_tmr:
        DS8 2

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//  197 U8 init_sr_led=1;
init_sr_led:
        DS8 1
        REQUIRE `?<Initializer for init_sr_led>`
//  198 
//  199 #pragma vector = TIMER0_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT TIMER0_OVF_Handler, "interrupt"
//  200 __interrupt void TIMER0_OVF_Handler(void)
TIMER0_OVF_Handler:
          CFI Block cfiBlock53 Using cfiCommon1
          CFI Function TIMER0_OVF_Handler
//  201 {
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        IN      R24, 0x3F
        IN      R25, 0x3B
//  202   U8 i;
//  203   
//  204   TCNT0=255-250; //500usec 
        LDI     R16, 5
        OUT     0x32, R16
//  205   // 16MHz / 32prescaling = 500kHz
//  206   // T= 1 / 500kHz = 2usec
//  207   // 2usec X 250 = 500usec
//  208   
//  209   Time_500us++;  
        LDS     R16, Time_500us
        INC     R16
        STS     Time_500us, R16
//  210  // if(mtime_flag) mtime_length++;
//  211   
//  212   if(tmr_osc_ck){
        LDS     R16, tmr_osc_ck
        TST     R16
        BRNE    $+2+2
        RJMP    ??TIMER0_OVF_Handler_0
//  213     if(key_func){   //filter or inverse f();  
        LDS     R16, key_func
        TST     R16
        BREQ    ??TIMER0_OVF_Handler_1
//  214       if(key_func_tmr>6000) { key_func=0; key_condition=0; }
        LDS     R16, key_func_tmr
        LDS     R17, (key_func_tmr + 1)
        CPI     R16, 113
        LDI     R18, 23
        CPC     R17, R18
        BRCS    ??TIMER0_OVF_Handler_2
        LDI     R16, 0
        STS     key_func, R16
        LDI     R16, 0
        STS     key_condition, R16
//  215       
//  216       key_func_tmr++;
??TIMER0_OVF_Handler_2:
        LDI     R30, LOW(key_func_tmr)
        LDI     R31, (key_func_tmr) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        RJMP    ??TIMER0_OVF_Handler_0
//  217     }
//  218     
//  219     else {         // channel and sample rate, volume
//  220       if(led_tmr==200){   //0.1sec      
??TIMER0_OVF_Handler_1:
        LDS     R16, led_tmr
        LDS     R17, (led_tmr + 1)
        CPI     R16, 200
        LDI     R18, 0
        CPC     R17, R18
        BREQ    $+2+2
        RJMP    ??TIMER0_OVF_Handler_3
//  221         for(i=0; i<16; i++){
        LDI     R18, 0
        RJMP    ??TIMER0_OVF_Handler_4
//  222           if(i<6) dot_string[i]=ch_name[ch_led_data][i];
//  223           else if(i<12) dot_string[i]=sr_name[sr_led_data][i-6];
//  224           else  dot_string[i]=ess_volume[i-12];
??TIMER0_OVF_Handler_5:
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(ess_volume - 12) & 0xFFFF))
        SBCI    R31, HIGH((-(ess_volume - 12) & 0xFFFF))
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
??TIMER0_OVF_Handler_6:
        INC     R18
??TIMER0_OVF_Handler_4:
        CPI     R18, 16
        BRCC    ??TIMER0_OVF_Handler_7
        CPI     R18, 6
        BRCC    ??TIMER0_OVF_Handler_8
        LDS     R16, ch_led_data
        LDI     R17, 0
        LDI     R20, 6
        LDI     R21, 0
          CFI FunCall ?S_EC_MUL_L02
        CALL    ?S_EC_MUL_L02
        LDI     R30, LOW(ch_name)
        LDI     R31, (ch_name) >> 8
        ADD     R30, R16
        ADC     R31, R17
        LDI     R19, 0
        ADD     R30, R18
        ADC     R31, R19
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
        RJMP    ??TIMER0_OVF_Handler_6
??TIMER0_OVF_Handler_8:
        CPI     R18, 12
        BRCC    ??TIMER0_OVF_Handler_5
        LDI     R30, LOW((sr_name - 6))
        LDI     R31, HIGH((sr_name - 6))
        LDI     R19, 0
        ADD     R30, R18
        ADC     R31, R19
        LDS     R16, sr_led_data
        LDI     R17, 0
        LDI     R20, 6
        LDI     R21, 0
          CFI FunCall ?S_EC_MUL_L02
        CALL    ?S_EC_MUL_L02
        ADD     R30, R16
        ADC     R31, R17
        LD      R16, Z
        LDI     R19, 0
        MOVW    R31:R30, R19:R18
        SUBI    R30, LOW((-(dot_string) & 0xFFFF))
        SBCI    R31, (-(dot_string) & 0xFFFF) >> 8
        ST      Z, R16
        RJMP    ??TIMER0_OVF_Handler_6
//  225         }
//  226         dot_string_digit();
??TIMER0_OVF_Handler_7:
          CFI FunCall dot_string_digit
        CALL    dot_string_digit
        RJMP    ??TIMER0_OVF_Handler_9
//  227         //for(i=0; i<5; i++)        dot_matrix_digit ( ch_name[ch_led_data][i],i ); 
//  228         //dot_vol_hextodeci(vol_dB);
//  229       }
//  230       
//  231       else if(led_tmr==800){  //sample rate,  0.4sec
??TIMER0_OVF_Handler_3:
        LDS     R16, led_tmr
        LDS     R17, (led_tmr + 1)
        CPI     R16, 32
        LDI     R18, 3
        CPC     R17, R18
        BRNE    ??TIMER0_OVF_Handler_9
//  232         old_ess_automute=ess_automute;
        LDS     R16, ess_automute
        STS     old_ess_automute, R16
//  233         old_ess_lock_ck=ess_lock_ck;
        LDS     R16, ess_lock_ck
        STS     old_ess_lock_ck, R16
//  234         
//  235         if(AUTOMUTE) ess_automute=1; 			//mute,  sample rate off
        SBIS    0x01, 0x07
        RJMP    ??TIMER0_OVF_Handler_10
        LDI     R16, 1
        STS     ess_automute, R16
        RJMP    ??TIMER0_OVF_Handler_11
//  236         else ess_automute=0;            	                            //unmute, sample rate on
??TIMER0_OVF_Handler_10:
        LDI     R16, 0
        STS     ess_automute, R16
//  237       
//  238         if(ESS_LOCK) ess_lock_ck=1;
??TIMER0_OVF_Handler_11:
        SBIS    0x01, 0x06
        RJMP    ??TIMER0_OVF_Handler_12
        LDI     R16, 1
        STS     ess_lock_ck, R16
        RJMP    ??TIMER0_OVF_Handler_13
//  239         else ess_lock_ck=0;
??TIMER0_OVF_Handler_12:
        LDI     R16, 0
        STS     ess_lock_ck, R16
//  240       
//  241         if( (old_ess_automute!=ess_automute) || (old_ess_lock_ck!= ess_lock_ck))  sample_rate_cal();
??TIMER0_OVF_Handler_13:
        LDS     R16, old_ess_automute
        LDS     R17, ess_automute
        CP      R16, R17
        BRNE    ??TIMER0_OVF_Handler_14
        LDS     R16, old_ess_lock_ck
        LDS     R17, ess_lock_ck
        CP      R16, R17
        BREQ    ??TIMER0_OVF_Handler_15
??TIMER0_OVF_Handler_14:
          CFI FunCall sample_rate_cal
        RCALL   sample_rate_cal
//  242         
//  243         //for(i=0; i<2; i++)       dot_matrix_digit ( sr_name[sr_led_data][i],i+6 );
//  244         //for(i=2; i<5; i++)       dot_matrix_digit2 ( sr_name[sr_led_data][i],i-2 );
//  245       
//  246         led_tmr=0;
??TIMER0_OVF_Handler_15:
        LDI     R16, 0
        STS     led_tmr, R16
        LDI     R16, 0
        STS     (led_tmr + 1), R16
//  247       }
//  248       led_tmr++;  
??TIMER0_OVF_Handler_9:
        LDI     R30, LOW(led_tmr)
        LDI     R31, (led_tmr) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//  249     }// end else 
//  250    
//  251     
//  252   }
//  253 }
??TIMER0_OVF_Handler_0:
        OUT     0x3B, R25
        OUT     0x3F, R24
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+15
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+14
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+13
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+12
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+11
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+10
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+9
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+8
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+7
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+6
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+5
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+4
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+3
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock53
        REQUIRE _A_TCNT0
        REQUIRE _A_PINE

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//  254 U8 tmr_flag_ck=1;
tmr_flag_ck:
        DS8 1
        REQUIRE `?<Initializer for tmr_flag_ck>`
//  255 //Board Timer
//  256 #pragma vector = TIMER1_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT TIMER1_OVF_Handler, "interrupt"
//  257 __interrupt void TIMER1_OVF_Handler(void)
TIMER1_OVF_Handler:
          CFI Block cfiBlock54 Using cfiCommon1
          CFI Function TIMER1_OVF_Handler
//  258 {
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -16)
          CFI CFA_Y Y+16
        IN      R24, 0x3F
        IN      R25, 0x3B
//  259 U8 data=0;
        LDI     R16, 0
//  260 //U16 temp;
//  261   //TCNT1=0xffff-1563; //0.1sec 
//  262   TCNT1=0xffff-781; //0.05sec 
        LDI     R16, 242
        LDI     R17, 252
        OUT     0x2D, R17
        OUT     0x2C, R16
//  263   // 16MHz / 1024precaling = 15.625kHz
//  264   // T= 1 / 15.625Hz = 64usec
//  265   // 64usec X 1563 = 0.1sec
//  266   // 64usec X 781 = 50msec
//  267   
//  268   //test
//  269   if(tmr_osc) {
        LDS     R16, tmr_osc
        TST     R16
        BRNE    $+2+2
        RJMP    ??TIMER1_OVF_Handler_0
//  270     if(tmr_osc<31) tmr_osc++;
        LDS     R16, tmr_osc
        CPI     R16, 31
        BRCC    ??TIMER1_OVF_Handler_1
        LDS     R16, tmr_osc
        INC     R16
        STS     tmr_osc, R16
//  271     if(tmr_osc==10) {   //0.5sec
??TIMER1_OVF_Handler_1:
        LDS     R16, tmr_osc
        CPI     R16, 10
        BRNE    ??TIMER1_OVF_Handler_2
//  272       //_system_init_1();
//  273       _system_init_se();
          CFI FunCall _system_init_se
        RCALL   _system_init_se
        RJMP    ??TIMER1_OVF_Handler_3
//  274     }
//  275     /*else if(tmr_osc==60) {    //3sec
//  276       _system_init_se();
//  277     }*/
//  278     else if(tmr_osc==30) {    //1.5sec
??TIMER1_OVF_Handler_2:
        LDS     R16, tmr_osc
        CPI     R16, 30
        BRNE    ??TIMER1_OVF_Handler_3
//  279       //_system_init_1();
//  280       es9018_reg10=0xce;			
        LDI     R16, 206
        STS     es9018_reg10, R16
//  281       I2C_Write(0x90, 0x0a, es9018_reg10);
        LDS     R18, es9018_reg10
        LDI     R17, 10
        LDI     R16, 144
          CFI FunCall I2C_Write
        CALL    I2C_Write
//  282       I2C_Write(0x92, 0x0a, es9018_reg10);
        LDS     R18, es9018_reg10
        LDI     R17, 10
        LDI     R16, 146
          CFI FunCall I2C_Write
        CALL    I2C_Write
//  283       init_vol_dn(vol_dB);
        LDS     R16, vol_dB
          CFI FunCall init_vol_dn
        CALL    init_vol_dn
//  284       DelayTime_ms(50);  //50msec
        LDI     R16, 50
        LDI     R17, 0
          CFI FunCall DelayTime_ms
        CALL    DelayTime_ms
//  285       init_vol(vol_dB);
        LDS     R16, vol_dB
          CFI FunCall init_vol
        CALL    init_vol
//  286       dot_vol_hextodeci(vol_dB);
        LDS     R16, vol_dB
          CFI FunCall dot_vol_hextodeci
        CALL    dot_vol_hextodeci
//  287       tmr_osc_ck=1;
        LDI     R16, 1
        STS     tmr_osc_ck, R16
//  288       init_setting_check=1;   //include remocon interrupt,
        LDI     R16, 1
        STS     init_setting_check, R16
//  289     }
//  290     
//  291     if(tmr_osc_ck){
??TIMER1_OVF_Handler_3:
        LDS     R16, tmr_osc_ck
        TST     R16
        BRNE    $+2+2
        RJMP    ??TIMER1_OVF_Handler_0
//  292       
//  293       if(!KEY_FLAG){
        SBIC    0x10, 0x03
        RJMP    ??TIMER1_OVF_Handler_4
//  294         if(key_int_flag==1 && key_tmr>5) key_int_flag=2;
        LDS     R16, key_int_flag
        CPI     R16, 1
        BRNE    ??TIMER1_OVF_Handler_5
        LDS     R30, key_tmr
        LDS     R31, (key_tmr + 1)
        SBIW    R31:R30, 6
        BRCS    ??TIMER1_OVF_Handler_5
        LDI     R16, 2
        STS     key_int_flag, R16
        RJMP    ??TIMER1_OVF_Handler_6
//  295         else if(key_int_flag==2 && key_tmr>6){ //key_tmr=400 : 0.05sec
??TIMER1_OVF_Handler_5:
        LDS     R16, key_int_flag
        CPI     R16, 2
        BRNE    ??TIMER1_OVF_Handler_6
        LDS     R30, key_tmr
        LDS     R31, (key_tmr + 1)
        SBIW    R31:R30, 7
        BRCS    ??TIMER1_OVF_Handler_6
//  296  
//  297           data=KEY_DATA2;
        LDI     R16, 0
        SBIC    0x10, 0x06
        INC     R16
//  298           data<<=1;
??TIMER1_OVF_Handler_7:
        LSL     R16
//  299           data+=KEY_DATA1;
        LDI     R17, 0
        SBIC    0x10, 0x05
        INC     R17
??TIMER1_OVF_Handler_8:
        ADD     R16, R17
//  300           data<<=1;
        LSL     R16
//  301           data+=KEY_DATA0;
        LDI     R17, 0
        SBIC    0x10, 0x04
        INC     R17
??TIMER1_OVF_Handler_9:
        ADD     R16, R17
//  302           
//  303           if(data==2) {
        CPI     R16, 2
        BRNE    ??TIMER1_OVF_Handler_10
//  304             audio_level_up();                            //Master Volume Up
          CFI FunCall audio_level_up
        CALL    audio_level_up
        RJMP    ??TIMER1_OVF_Handler_6
//  305           }
//  306           else if(data==5){
??TIMER1_OVF_Handler_10:
        CPI     R16, 5
        BRNE    ??TIMER1_OVF_Handler_6
//  307             audio_level_down();                        //Master Volume Down
          CFI FunCall audio_level_down
        CALL    audio_level_down
//  308           }
//  309           
//  310         }//end else if
//  311         tmr_flag_ck=0;
??TIMER1_OVF_Handler_6:
        LDI     R16, 0
        STS     tmr_flag_ck, R16
//  312         key_tmr++;
        LDI     R30, LOW(key_tmr)
        LDI     R31, (key_tmr) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        RJMP    ??TIMER1_OVF_Handler_0
//  313       }
//  314       else { 
//  315         key_int_flag=0; key_tmr=0; 
??TIMER1_OVF_Handler_4:
        LDI     R16, 0
        STS     key_int_flag, R16
        LDI     R16, 0
        STS     key_tmr, R16
        LDI     R16, 0
        STS     (key_tmr + 1), R16
//  316         if(tmr_flag_ck==0) {
        LDS     R16, tmr_flag_ck
        TST     R16
        BRNE    ??TIMER1_OVF_Handler_0
//  317           tmr_flag_ck=1;
        LDI     R16, 1
        STS     tmr_flag_ck, R16
//  318           rom_tmr=0;
        LDI     R16, 0
        STS     rom_tmr, R16
        LDI     R16, 0
        STS     (rom_tmr + 1), R16
//  319         }
//  320       }
//  321       /*
//  322       if(IR_data_flag ){
//  323       //if(IR_data_flag && Time_50ms>1){
//  324         //Time_50ms=0;
//  325         //IR_data[IR_data_flag]=_remocon_data;
//  326 
//  327         if(IR_data[IR_data_flag]==0x80) {                             //Master Volume Up
//  328           //if(new_repeat_flag) { for(test_i=0; test_i<3; test_i++) audio_level_up(); }
//  329           //else audio_level_up();
//  330           if(IR_data[IR_data_flag]==0x80 && IR_data[IR_data_flag+1]==0x80) {
//  331             audio_level_sp_up();
//  332             IR_data_flag--;
//  333           }
//  334           else audio_level_up();
//  335         }
//  336         else if(IR_data[IR_data_flag]==0xA8) {                         //Master Volume Down
//  337           //if(new_repeat_flag) { for(test_i=0; test_i<3; test_i++) audio_level_down();}
//  338           //else audio_level_down();
//  339           if(IR_data[IR_data_flag]==0xA8 && IR_data[IR_data_flag+1]==0xA8) {
//  340             audio_level_sp_down();
//  341             IR_data_flag--;
//  342           }
//  343           else audio_level_down();
//  344         }
//  345           
//  346         IR_data_flag--;
//  347       }
//  348     */  
//  349       
//  350       
//  351     }
//  352   }		
//  353 	
//  354   Time_50ms++;
??TIMER1_OVF_Handler_0:
        LDI     R30, LOW(Time_50ms)
        LDI     R31, (Time_50ms) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
//  355 	
//  356 }
        OUT     0x3B, R25
        OUT     0x3F, R24
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+15
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+14
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+13
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+12
        LD      R20, Y+
          CFI R20 SameValue
          CFI CFA_Y Y+11
        LD      R21, Y+
          CFI R21 SameValue
          CFI CFA_Y Y+10
        LD      R22, Y+
          CFI R22 SameValue
          CFI CFA_Y Y+9
        LD      R23, Y+
          CFI R23 SameValue
          CFI CFA_Y Y+8
        LD      R0, Y+
          CFI R0 SameValue
          CFI CFA_Y Y+7
        LD      R1, Y+
          CFI R1 SameValue
          CFI CFA_Y Y+6
        LD      R2, Y+
          CFI R2 SameValue
          CFI CFA_Y Y+5
        LD      R3, Y+
          CFI R3 SameValue
          CFI CFA_Y Y+4
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+3
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+2
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock54
        REQUIRE _A_TCNT1
        REQUIRE _A_PIND
//  357 
//  358 ///////////////////////////////////////////////////////////////////////////////
//  359 //U8 non_audio_flag=0;6

        RSEG CODE:CODE:NOROOT(1)
//  360 void main(void){
main:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function main
//  361   _system_init();
          CFI FunCall _system_init
        RCALL   _system_init
//  362   //_system_init_1();
//  363     
//  364   while(1){
//  365     if(PINB_Bit6==0) PORTB_Bit7=0;       //Analog Power Disable
??main_0:
        SBIC    0x16, 0x06
        RJMP    ??main_0
        CBI     0x18, 0x07
        RJMP    ??main_0
          CFI EndBlock cfiBlock55
        REQUIRE _A_PINB
        REQUIRE _A_PORTB
//  366     //if(tmr_osc_ck) _system_init_1();
//  367     /*
//  368     if(tmr_osc_ck){
//  369       tmr_osc_ck2=1;
//  370       tmr_osc_ck=0;
//  371       //one time
//  372       if(KeyReady){
//  373         _system_init_se();
//  374         es9018_reg10=0xce;			
//  375         I2C_Write(0x90, 0x0a, es9018_reg10);
//  376         I2C_Write(0x92, 0x0a, es9018_reg10);
//  377         //led_start_flag=1;
//  378         KeyReady=0;
//  379       }
//  380       
//  381     }//end if
//  382     */
//  383   }//end while
//  384 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 16
`??INT3_Handler::??INTVEC 16`:
        JMP     INT3_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 24
`??INT5_Handler::??INTVEC 24`:
        JMP     INT5_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 28
`??INT6_Handler::??INTVEC 28`:
        JMP     INT6_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 32
`??INT7_Handler::??INTVEC 32`:
        JMP     INT7_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 40
`??TIMER2_OVF_Handler::??INTVEC 40`:
        JMP     TIMER2_OVF_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 56
`??TIMER1_OVF_Handler::??INTVEC 56`:
        JMP     TIMER1_OVF_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 64
`??TIMER0_OVF_Handler::??INTVEC 64`:
        JMP     TIMER0_OVF_Handler

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DP      0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for phase_data>`:
        DC8 1

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DP      SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for interrupt_eicra>`:
        DC8 181

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for rom_save_flag>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for rom_save_flag2>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for dot_light_reg>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ch_led_enable>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for sr_led_data>`:
        DC8 6

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for display_num>`:
        DC8 100

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for vol_dB>`:
        DC8 255

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for i2s_flag>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for usb_sr>`:
        DC8 48

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for mute_enable>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for es9018_reg10>`:
        DC8 206

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min44>`:
        DC16 2254

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max44>`:
        DC16 2359

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min48>`:
        DC16 2464

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max48>`:
        DC16 2569

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min88>`:
        DC16 4561

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max88>`:
        DC16 4666

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min96>`:
        DC16 4980

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max96>`:
        DC16 5085

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min176>`:
        DC16 9175

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max176>`:
        DC16 9279

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min192>`:
        DC16 10013

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max192>`:
        DC16 10118

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for interface_ch>`:
        DC8 128

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for KeyReady>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ch_name>`:
        DC8 43H, 4FH, 41H, 58H, 31H, 20H
        DC8 43H, 4FH, 41H, 58H, 32H, 20H
        DC8 20H, 41H, 45H, 53H, 31H, 20H
        DC8 20H, 41H, 45H, 53H, 32H, 20H
        DC8 20H, 42H, 4EH, 43H, 20H, 20H
        DC8 20H, 4FH, 50H, 54H, 31H, 20H
        DC8 20H, 4FH, 50H, 54H, 32H, 20H
        DC8 20H, 55H, 53H, 42H, 20H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for sr_name>`:
        DC8 20H, 34H, 34H, 2EH, 31H, 20H
        DC8 20H, 34H, 38H, 2EH, 30H, 20H
        DC8 20H, 38H, 38H, 2EH, 32H, 20H
        DC8 20H, 39H, 36H, 2EH, 30H, 20H
        DC8 31H, 37H, 36H, 2EH, 34H, 20H
        DC8 31H, 39H, 32H, 2EH, 30H, 20H
        DC8 20H, 20H, 20H, 20H, 20H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for filter_name>`:
        DC8 46H, 49H, 4CH, 54H, 45H, 52H, 31H, 20H
        DC8 46H, 49H, 4CH, 54H, 45H, 52H, 32H, 20H
        DC8 46H, 49H, 4CH, 54H, 45H, 52H, 33H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for phase_name>`:
        DC8 20H, 49H, 4EH, 56H, 45H, 52H, 53H, 45H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for normal_name>`:
        DC8 20H, 20H, 4EH, 4FH, 52H, 4DH, 41H, 4CH

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f1_coeff_st1>`:
        DD 0, 1656381, 9659303, 34409768, 93398781, 209942799, 407444422
        DD 699022478, 1074874807, 1492352005, 1874902824, 2124488166
        DD 2147483647, 1887806213, 1355685389, 639107586, -110755555
        DD -719588677, -1044031603, -1020728165, -690754479, -187854371
        DD 307259942, 630274318, 690105478, 497041076, 151573293, -200494787
        DD -427342979, -460267547, -313535895, -69239327, 163487939, 295508341
        DD 290781514, 173357845, 8625355, -129830628, -191689217, -166581017
        DD -81244643, 18370414, 89760574, 110702807, 84163673, 31575802
        DD -20180401, -51101617, -54545855, -36486473, -9671202, 13456521
        DD 25681054, 26272207, 19136308, 9640102, 1930723, -2245673, -3249107
        DD -2468805, -1263225, -407167, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f1_coeff_st2>`:
        DD 1475681183, 1475681183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f2_coeff_st1>`:
        DD 0, -1801695, -4008643, -5121013, -2214480, 5996574, 16606227
        DD 22319443, 15460455, -5254559, -30080590, -41104893, -23628756
        DD 20097715, 65638314, 77510493, 33703685, -51685218, -126749606
        DD -129504345, -32841829, 122779073, 237746372, 208859258, 4955037
        DD -285795146, -476804265, -374025116, 107471796, 869797120, 1652694820
        DD 2147483647, 2147483647, 1652694820, 869797120, 107471796, -374025116
        DD -476804265, -285795146, 4955037, 208859258, 237746372, 122779073
        DD -32841829, -129504345, -126749606, -51685218, 33703685, 77510493
        DD 65638314, 20097715, -23628756, -41104893, -30080590, -5254559
        DD 15460455, 22319443, 16606227, 5996574, -2214480, -5121013, -4008643
        DD -1801695, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f2_coeff_st2>`:
        DD 2147400132, 2147400132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for test_osc>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for _repeat_data>`:
        DC8 48

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for init_sr_led>`:
        DC8 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for tmr_flag_ck>`:
        DC8 1

        END
//  385 
//  386 
// 
//     35 bytes in segment ABSOLUTE
// 10 726 bytes in segment CODE
//     14 bytes in segment INITTAB
//     28 bytes in segment INTVEC
//    813 bytes in segment NEAR_I
//    813 bytes in segment NEAR_ID
//    196 bytes in segment NEAR_Z
// 
// 11 539 bytes of CODE memory (+ 42 bytes shared)
//  1 009 bytes of DATA memory (+ 35 bytes shared)
//
//Errors: none
//Warnings: none
