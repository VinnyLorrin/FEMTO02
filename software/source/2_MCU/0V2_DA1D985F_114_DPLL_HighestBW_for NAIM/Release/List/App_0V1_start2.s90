//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR Atmel AVR C/EC++ Compiler V3.10C/W32            16/Dec/2013  12:28:26 /
// Copyright 1996-2004 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  F:\Calyx\2_CalyxII\0_FEMTO\0_Circuit\2_MCU\0V2_DA1D985 /
//                    F_114_DPLL_HighestBW_for NAIM\App_0V1_start2.C         /
//    Command line =  --cpu=m128 -ms -o "F:\Calyx\2_CalyxII\0_FEMTO\0_Circui /
//                    t\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for            /
//                    NAIM\Release\Obj\" -lC "F:\Calyx\2_CalyxII\0_FEMTO\0_C /
//                    ircuit\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for       /
//                    NAIM\Release\List\" -lA "F:\Calyx\2_CalyxII\0_FEMTO\0_ /
//                    Circuit\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for      /
//                    NAIM\Release\List\" -y --initializers_in_flash -z3     /
//                    --library_module -DENABLE_BIT_DEFINITIONS -e -I        /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\avr\INC\" -I "C:\Program Files\IAR                 /
//                    Systems\Embedded Workbench 3.2\avr\INC\CLIB\"          /
//                    --eeprom_size 4096 "F:\Calyx\2_CalyxII\0_FEMTO\0_Circu /
//                    it\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for           /
//                    NAIM\App_0V1_start2.C"                                 /
//    List file    =  F:\Calyx\2_CalyxII\0_FEMTO\0_Circuit\2_MCU\0V2_DA1D985 /
//                    F_114_DPLL_HighestBW_for NAIM\Release\List\App_0V1_sta /
//                    rt2.s90                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        MODULE App_0V1_start2

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega128"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "true"
        RTMODEL "__memory_model", "2"
        RTMODEL "__no_rampd", "enabled"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B3_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE3_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?SS_SHR_L02
        EXTERN ?S_EC_MUL_L02
        EXTERN ?S_SHL_L02
        EXTERN ?UC_DIVMOD_L01
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC DelayTime
        FUNCTION DelayTime,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC DelayTime_ms
        FUNCTION DelayTime_ms,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_Read
        FUNCTION I2C_Read,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_SHIN
        FUNCTION I2C_SHIN,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_SHOUT
        FUNCTION I2C_SHOUT,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_START
        FUNCTION I2C_START,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_STOP
        FUNCTION I2C_STOP,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_Write
        FUNCTION I2C_Write,021203H
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC I2C_error
        PUBLIC INT3_Handler
        FUNCTION INT3_Handler,021233H
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC INT5_Handler
        FUNCTION INT5_Handler,021233H
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC INT6_Handler
        FUNCTION INT6_Handler,021233H
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC INT7_Handler
        FUNCTION INT7_Handler,021233H
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC IR_data
        PUBLIC IR_data_flag
        PUBLIC IR_error
        FUNCTION IR_error,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC KeyReady
        PUBLIC Remoc_data_save
        PUBLIC TIMER0_OVF_Handler
        FUNCTION TIMER0_OVF_Handler,021233H
        LOCFRAME CSTACK, 19, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC TIMER1_OVF_Handler
        FUNCTION TIMER1_OVF_Handler,021233H
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC TIMER2_OVF_Handler
        FUNCTION TIMER2_OVF_Handler,0233H
        LOCFRAME CSTACK, 6, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC Time_500us
        PUBLIC Time_50ms
        PUBWEAK _A_DDRA
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_DDRE
        PUBWEAK _A_DDRF
        PUBWEAK _A_DDRG
        PUBWEAK _A_EICRA
        PUBWEAK _A_EICRB
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_OCR0
        PUBWEAK _A_PINA
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PINE
        PUBWEAK _A_PINF
        PUBWEAK _A_PING
        PUBWEAK _A_PORTA
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_PORTE
        PUBWEAK _A_PORTF
        PUBWEAK _A_PORTG
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR2
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR
        PUBWEAK _A_TIMSK
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC _bit_init
        FUNCTION _bit_init,0203H
        LOCFRAME RSTACK, 4, STACK
        PUBLIC _code_remocon
        PUBLIC _counter_remocon
        PUBLIC _flgOrKey
        PUBLIC _flg_allow_remocon_repeat
        PUBLIC _flg_enter
        PUBLIC _flg_on_remocon
        PUBLIC _flg_repeat
        PUBLIC _flg_run_repeat
        PUBLIC _inbit
        FUNCTION _inbit,0203H
        LOCFRAME RSTACK, 4, STACK
        PUBLIC _inport
        FUNCTION _inport,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC _outbit
        FUNCTION _outbit,0203H
        LOCFRAME RSTACK, 4, STACK
        PUBLIC _outport
        FUNCTION _outport,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC _port_init
        FUNCTION _port_init,0203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC _porta
        PUBLIC _portb
        PUBLIC _portc
        PUBLIC _portd
        PUBLIC _porte
        PUBLIC _portf
        PUBLIC _portg
        PUBLIC _remocon_buffer
        PUBLIC _remocon_counter
        PUBLIC _remocon_custom
        PUBLIC _remocon_custom_2
        PUBLIC _remocon_data
        PUBLIC _remocon_data_2
        PUBLIC _remocon_processing
        FUNCTION _remocon_processing,021201H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC _remocon_repeat_count
        PUBLIC _repeat_data
        PUBLIC _repeat_remocon
        PUBLIC _system_init
        FUNCTION _system_init,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC _system_init_se
        FUNCTION _system_init_se,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC audio_level_down
        FUNCTION audio_level_down,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC audio_level_sp_down
        FUNCTION audio_level_sp_down,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC audio_level_sp_up
        FUNCTION audio_level_sp_up,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC audio_level_up
        FUNCTION audio_level_up,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC bit_input
        PUBLIC button_data
        PUBLIC ch_data
        PUBLIC ch_led_data
        PUBLIC ch_led_enable
        PUBLIC ch_name
        PUBLIC channel_change
        FUNCTION channel_change,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC channel_down
        FUNCTION channel_down,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC channel_up
        FUNCTION channel_up,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC cnt_remocon
        PUBLIC cs_audio_timer
        PUBLIC dac_audio_timer
        PUBLIC display_num
        PUBLIC dot_0x_hexadecimal
        FUNCTION dot_0x_hexadecimal,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC dot_light_reg
        PUBLIC dot_matrix_bright
        FUNCTION dot_matrix_bright,021203H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC dot_matrix_clear
        FUNCTION dot_matrix_clear,0201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC dot_matrix_digit
        FUNCTION dot_matrix_digit,021203H
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC dot_matrix_digit2
        FUNCTION dot_matrix_digit2,021203H
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC dot_matrix_set
        FUNCTION dot_matrix_set,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC dot_string
        PUBLIC dot_string_digit
        FUNCTION dot_string_digit,021201H
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC dot_vol_hextodeci
        FUNCTION dot_vol_hextodeci,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC es9018_lock
        PUBLIC es9018_lock_flag
        PUBLIC es9018_reg10
        PUBLIC ess_automute
        PUBLIC ess_filter
        FUNCTION ess_filter,021201H
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ess_lch_master_trim
        PUBLIC ess_lock_ck
        PUBLIC ess_mute
        FUNCTION ess_mute,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC ess_rch_master_trim
        PUBLIC ess_volume
        PUBLIC exMute
        PUBLIC f1_coeff_st1
        PUBLIC f1_coeff_st2
        PUBLIC f2_coeff_st1
        PUBLIC f2_coeff_st2
        PUBLIC femto_function
        FUNCTION femto_function,021201H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 4, STACK
        PUBLIC filter_data
        PUBLIC filter_flag
        PUBLIC filter_name
        PUBLIC grAck
        PUBLIC high_bit_0
        PUBLIC high_bit_1
        PUBLIC high_repeat_flag0
        PUBLIC high_repeat_flag1
        PUBLIC high_start_flag
        PUBLIC i2s_flag
        PUBLIC inByte
        PUBLIC init_rom_add0
        PUBLIC init_rom_add1
        PUBLIC init_rom_add2
        PUBLIC init_rom_address_data
        PUBLIC init_rom_data0
        PUBLIC init_rom_data1
        PUBLIC init_rom_data2
        PUBLIC init_setting_check
        PUBLIC init_sr_led
        PUBLIC init_vol
        FUNCTION init_vol,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC init_vol_dn
        FUNCTION init_vol_dn,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC interface_ch
        PUBLIC interrupt_eicra
        PUBLIC inverse_data
        PUBLIC ir_error
        PUBLIC ir_error_check
        PUBLIC key_condition
        PUBLIC key_func
        PUBLIC key_func_tmr
        PUBLIC key_int_flag
        PUBLIC key_tmr
        PUBLIC led_tmr
        PUBLIC low_bit_time
        PUBLIC low_start_flag
        PUBLIC main
        FUNCTION main,021a03H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC max176
        PUBLIC max192
        PUBLIC max44
        PUBLIC max48
        PUBLIC max88
        PUBLIC max96
        PUBLIC min176
        PUBLIC min192
        PUBLIC min44
        PUBLIC min48
        PUBLIC min88
        PUBLIC min96
        PUBLIC mtime_flag
        PUBLIC mtime_length
        PUBLIC mute_enable
        PUBLIC new_repeat_flag
        PUBLIC normal_name
        PUBLIC old_ess_automute
        PUBLIC old_ess_lock_ck
        PUBLIC old_exMute
        PUBLIC phase_data
        PUBLIC phase_ess
        FUNCTION phase_ess,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC phase_name
        PUBLIC remocon_data
        FUNCTION remocon_data,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC reset_eeprom
        FUNCTION reset_eeprom,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC rom_I2C_Read
        FUNCTION rom_I2C_Read,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC rom_add_check_sum
        PUBLIC rom_add_pt
        PUBLIC rom_add_pt_high
        PUBLIC rom_add_pt_low
        PUBLIC rom_check_sum_error
        FUNCTION rom_check_sum_error,021201H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC rom_cnt
        PUBLIC rom_cnt_check
        FUNCTION rom_cnt_check,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC rom_cnt_high
        PUBLIC rom_cnt_low
        PUBLIC rom_cnt_mid
        PUBLIC rom_device_high
        PUBLIC rom_device_low
        PUBLIC rom_func_data
        PUBLIC rom_save_flag
        PUBLIC rom_save_flag2
        PUBLIC rom_tmr
        PUBLIC rom_write_multi
        FUNCTION rom_write_multi,021201H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC sample_rate
        PUBLIC sample_rate2
        PUBLIC sample_rate_cal
        FUNCTION sample_rate_cal,021201H
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC sp_en_cnt
        PUBLIC sr_data
        PUBLIC sr_led_data
        PUBLIC sr_name
        PUBLIC test_check
        PUBLIC test_check2
        PUBLIC test_eeprom
        PUBLIC test_osc
        PUBLIC test_set_eeprom
        FUNCTION test_set_eeprom,021203H
        LOCFRAME RSTACK, 2, STACK
        PUBLIC tmr_flag_ck
        PUBLIC tmr_osc
        PUBLIC tmr_osc_ck
        PUBLIC usb_audio_timer
        PUBLIC usb_sr
        PUBLIC vol_dB
        PUBLIC volume_set
        FUNCTION volume_set,021201H
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8, SP:16, SPH:8
        CFI Resource SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh Frame(CFA_SP, -1)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh Frame(CFA_SP, -1)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 SameValue
        CFI R17 SameValue
        CFI R18 SameValue
        CFI R19 SameValue
        CFI R20 SameValue
        CFI R21 SameValue
        CFI R22 SameValue
        CFI R23 SameValue
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 SameValue
        CFI R31 SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon1
        
// F:\Calyx\2_CalyxII\0_FEMTO\0_Circuit\2_MCU\0V2_DA1D985F_114_DPLL_HighestBW_for NAIM\App_0V1_start2.C
//    1 //2013.12.16
//    2 
//    3 // OCDEN, JTAGEN, CKOPT, SPIEN
//    4 
//    5 #include <iom128.h>
//    6 #include <inavr.h>
//    7 #include "InitBoard.c"

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near test_eeprom[32]
test_eeprom:
        DS 32

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near IR_data[20]
IR_data:
        DS 20

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near IR_data_flag
IR_data_flag:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near rom_add_pt
rom_add_pt:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned long __near rom_cnt
rom_cnt:
        DS 4

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_cnt_high
rom_cnt_high:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_cnt_mid
rom_cnt_mid:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_cnt_low
rom_cnt_low:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_func_data
rom_func_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_add_pt_high
rom_add_pt_high:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_add_pt_low
rom_add_pt_low:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_device_high
rom_device_high:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_device_low
rom_device_low:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near rom_add_check_sum
rom_add_check_sum:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near phase_data
phase_data:
        DS 1
	REQUIRE `?<Initializer for phase_data>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near interrupt_eicra
interrupt_eicra:
        DS 1
	REQUIRE `?<Initializer for interrupt_eicra>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_setting_check
init_setting_check:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ess_automute
ess_automute:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ess_lock_ck
ess_lock_ck:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near old_ess_automute
old_ess_automute:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near old_ess_lock_ck
old_ess_lock_ck:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near exMute
exMute:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near old_exMute
old_exMute:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near key_tmr
key_tmr:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near tmr_osc_ck
tmr_osc_ck:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near key_int_flag
key_int_flag:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near rom_tmr
rom_tmr:
        DS 2

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near rom_save_flag
rom_save_flag:
        DS 1
	REQUIRE `?<Initializer for rom_save_flag>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near rom_save_flag2
rom_save_flag2:
        DS 1
	REQUIRE `?<Initializer for rom_save_flag2>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near Time_500us
Time_500us:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near Time_50ms
Time_50ms:
        DS 2

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near dot_light_reg
dot_light_reg:
        DS 1
	REQUIRE `?<Initializer for dot_light_reg>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ch_led_data
ch_led_data:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near ch_led_enable
ch_led_enable:
        DS 1
	REQUIRE `?<Initializer for ch_led_enable>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near sr_led_data
sr_led_data:
        DS 1
	REQUIRE `?<Initializer for sr_led_data>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near display_num
display_num:
        DS 1
	REQUIRE `?<Initializer for display_num>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ess_lch_master_trim
ess_lch_master_trim:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ess_rch_master_trim
ess_rch_master_trim:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near vol_dB
vol_dB:
        DS 1
	REQUIRE `?<Initializer for vol_dB>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near i2s_flag
i2s_flag:
        DS 1
	REQUIRE `?<Initializer for i2s_flag>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near usb_sr
usb_sr:
        DS 1
	REQUIRE `?<Initializer for usb_sr>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near button_data
button_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near filter_flag
filter_flag:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near mute_enable
mute_enable:
        DS 1
	REQUIRE `?<Initializer for mute_enable>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near key_func
key_func:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near key_func_tmr
key_func_tmr:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near key_condition
key_condition:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near es9018_reg10
es9018_reg10:
        DS 1
	REQUIRE `?<Initializer for es9018_reg10>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near es9018_lock
es9018_lock:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near es9018_lock_flag
es9018_lock_flag:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near dac_audio_timer
dac_audio_timer:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near sample_rate
sample_rate:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near sample_rate2
sample_rate2:
        DS 2

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min44
min44:
        DS 2
	REQUIRE `?<Initializer for min44>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max44
max44:
        DS 2
	REQUIRE `?<Initializer for max44>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min48
min48:
        DS 2
	REQUIRE `?<Initializer for min48>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max48
max48:
        DS 2
	REQUIRE `?<Initializer for max48>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min88
min88:
        DS 2
	REQUIRE `?<Initializer for min88>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max88
max88:
        DS 2
	REQUIRE `?<Initializer for max88>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min96
min96:
        DS 2
	REQUIRE `?<Initializer for min96>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max96
max96:
        DS 2
	REQUIRE `?<Initializer for max96>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min176
min176:
        DS 2
	REQUIRE `?<Initializer for min176>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max176
max176:
        DS 2
	REQUIRE `?<Initializer for max176>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near min192
min192:
        DS 2
	REQUIRE `?<Initializer for min192>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned int __near max192
max192:
        DS 2
	REQUIRE `?<Initializer for max192>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near tmr_osc
tmr_osc:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near interface_ch
interface_ch:
        DS 1
	REQUIRE `?<Initializer for interface_ch>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near cs_audio_timer
cs_audio_timer:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near usb_audio_timer
usb_audio_timer:
        DS 2

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near KeyReady
KeyReady:
        DS 1
	REQUIRE `?<Initializer for KeyReady>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near I2C_error
I2C_error:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near ch_name[8][6]
ch_name:
        DS 48
	REQUIRE `?<Initializer for ch_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near sr_name[7][6]
sr_name:
        DS 42
	REQUIRE `?<Initializer for sr_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near filter_name[3][8]
filter_name:
        DS 24
	REQUIRE `?<Initializer for filter_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near phase_name[8]
phase_name:
        DS 8
	REQUIRE `?<Initializer for phase_name>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near normal_name[8]
normal_name:
        DS 8
	REQUIRE `?<Initializer for normal_name>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ch_data
ch_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near sr_data
sr_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near filter_data
filter_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near inverse_data
inverse_data:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near dot_string[16]
dot_string:
        DS 16

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ess_volume[4]
ess_volume:
        DS 4

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// long __near f1_coeff_st1[64]
f1_coeff_st1:
        DS 256
	REQUIRE `?<Initializer for f1_coeff_st1>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// long __near f1_coeff_st2[16]
f1_coeff_st2:
        DS 64
	REQUIRE `?<Initializer for f1_coeff_st2>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// long __near f2_coeff_st1[64]
f2_coeff_st1:
        DS 256
	REQUIRE `?<Initializer for f2_coeff_st1>`

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// long __near f2_coeff_st2[16]
f2_coeff_st2:
        DS 64
	REQUIRE `?<Initializer for f2_coeff_st2>`

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void DelayTime(unsigned int)
DelayTime:
??DelayTime_0:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function DelayTime
	MOVW	R19 : R18,R17 : R16
	MOVW	R17 : R16,R19 : R18
	SUBI	R16,1
	SBCI	R17,0
	OR	R18,R19
	BRNE	??DelayTime_0
	RET
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void DelayTime_ms(unsigned int)
DelayTime_ms:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function DelayTime_ms
        FUNCALL DelayTime_ms, DelayTime
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	MOVW	R27 : R26,R17 : R16
	LDI	R24,0
	RJMP	??DelayTime_ms_0
??DelayTime_ms_1:
	LDI	R16,128
	LDI	R17,62
	RCALL	DelayTime
	INC	R24
??DelayTime_ms_0:
	MOVW	R17 : R16,R27 : R26
	SUBI	R16,255
	SBCI	R17,255
	LDI	R25,0
	CP	R16,R24
	CPC	R17,R25
	BRCC	??DelayTime_ms_1
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _porta
_porta:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _portb
_portb:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _portc
_portc:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _portd
_portd:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _porte
_porte:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _portf
_portf:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _portg
_portg:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _outport(unsigned char, char)
_outport:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function _outport
	SUBI	R16,1
	BREQ	??_outport_0
	DEC	R16
	BREQ	??_outport_1
	DEC	R16
	BREQ	??_outport_2
	DEC	R16
	BREQ	??_outport_3
	DEC	R16
	BREQ	??_outport_4
	DEC	R16
	BREQ	??_outport_5
	DEC	R16
	BREQ	??_outport_6
	RET
??_outport_0:
	STS	_porta,R17
	LDS	R16,_porta
	OUT	0x1B,R16
	RET
??_outport_1:
	STS	_portb,R17
	LDS	R16,_portb
	OUT	0x18,R16
	RET
??_outport_2:
	STS	_portc,R17
	LDS	R16,_portc
	OUT	0x15,R16
	RET
??_outport_3:
	STS	_portd,R17
	LDS	R16,_portd
	OUT	0x12,R16
	RET
??_outport_4:
	STS	_porte,R17
	LDS	R16,_porte
	OUT	0x03,R16
	RET
??_outport_5:
	STS	_portf,R17
	LDS	R16,_portf
	STS	98,R16
	RET
??_outport_6:
	STS	_portg,R17
	LDS	R16,_portg
	STS	101,R16
	RET
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc unsigned char _inport(unsigned char)
_inport:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function _inport
	SUBI	R16,1
	BREQ	??_inport_0
	DEC	R16
	BREQ	??_inport_1
	DEC	R16
	BREQ	??_inport_2
	DEC	R16
	BREQ	??_inport_3
	DEC	R16
	BREQ	??_inport_4
	DEC	R16
	BREQ	??_inport_5
	DEC	R16
	BREQ	??_inport_6
	RJMP	??_inport_7
??_inport_0:
	IN	R17,0x19
	RJMP	??_inport_7
??_inport_1:
	IN	R17,0x16
	RJMP	??_inport_7
??_inport_2:
	IN	R17,0x13
	RJMP	??_inport_7
??_inport_3:
	IN	R17,0x10
	RJMP	??_inport_7
??_inport_4:
	IN	R17,0x01
	RJMP	??_inport_7
??_inport_5:
	IN	R17,0x00
	RJMP	??_inport_7
??_inport_6:
	LDS	R17,99
??_inport_7:
	MOV	R16,R17
	RET
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc char _inbit(unsigned char, unsigned char)
_inbit:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function _inbit
	MOV	R18,R16
	MOV	R20,R17
	LDI	R16,0
	SUBI	R18,1
	BREQ	??_inbit_0
	DEC	R18
	BREQ	??_inbit_1
	DEC	R18
	BREQ	??_inbit_2
	DEC	R18
	BREQ	??_inbit_3
	DEC	R18
	BREQ	??_inbit_4
	DEC	R18
	BRNE	$+2+2
	RJMP	??_inbit_5
	DEC	R18
	BRNE	$+2+2
	RJMP	??_inbit_6
	RET
??_inbit_0:
	IN	R18,0x19
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_7
	LDI	R16,1
	RET
??_inbit_7:
	LDI	R16,0
	RET
??_inbit_1:
	IN	R18,0x16
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_8
	LDI	R16,1
	RET
??_inbit_8:
	LDI	R16,0
	RET
??_inbit_2:
	IN	R18,0x13
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_9
	LDI	R16,1
	RET
??_inbit_9:
	LDI	R16,0
	RET
??_inbit_3:
	IN	R18,0x10
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_10
	LDI	R16,1
	RET
??_inbit_10:
	LDI	R16,0
	RET
??_inbit_4:
	IN	R18,0x01
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_11
	LDI	R16,1
	RET
??_inbit_11:
	LDI	R16,0
	RET
??_inbit_5:
	IN	R18,0x00
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_12
	LDI	R16,1
	RET
??_inbit_12:
	LDI	R16,0
	RET
??_inbit_6:
	LDS	R18,99
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	AND	R16,R18
	TST	R16
	BREQ	??_inbit_13
	LDI	R16,1
	RET
??_inbit_13:
	LDI	R16,0
	RET
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _outbit(unsigned char, unsigned char, char)
_outbit:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function _outbit
	MOV	R20,R17
	SUBI	R16,1
	BREQ	??_outbit_0
	DEC	R16
	BREQ	??_outbit_1
	DEC	R16
	BRNE	$+2+2
	RJMP	??_outbit_2
	DEC	R16
	BRNE	$+2+2
	RJMP	??_outbit_3
	DEC	R16
	BRNE	$+2+2
	RJMP	??_outbit_4
	DEC	R16
	BRNE	$+2+2
	RJMP	??_outbit_5
	DEC	R16
	BRNE	$+2+2
	RJMP	??_outbit_6
	RET
??_outbit_0:
	TST	R18
	BREQ	??_outbit_7
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_porta)
	LDI	R31,(_porta) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_8
??_outbit_7:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_porta)
	LDI	R31,(_porta) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_8:
	LDS	R16,_porta
	OUT	0x1B,R16
	RET
??_outbit_1:
	TST	R18
	BREQ	??_outbit_9
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_portb)
	LDI	R31,(_portb) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_10
??_outbit_9:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_portb)
	LDI	R31,(_portb) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_10:
	LDS	R16,_portb
	OUT	0x18,R16
	RET
??_outbit_2:
	TST	R18
	BREQ	??_outbit_11
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_portc)
	LDI	R31,(_portc) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_12
??_outbit_11:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_portc)
	LDI	R31,(_portc) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_12:
	LDS	R16,_portc
	OUT	0x15,R16
	RET
??_outbit_3:
	TST	R18
	BREQ	??_outbit_13
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_portd)
	LDI	R31,(_portd) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_14
??_outbit_13:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_portd)
	LDI	R31,(_portd) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_14:
	LDS	R16,_portd
	OUT	0x12,R16
	RET
??_outbit_4:
	TST	R18
	BREQ	??_outbit_15
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_porte)
	LDI	R31,(_porte) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_16
??_outbit_15:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_porte)
	LDI	R31,(_porte) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_16:
	LDS	R16,_porte
	OUT	0x03,R16
	RET
??_outbit_5:
	TST	R18
	BREQ	??_outbit_17
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_portf)
	LDI	R31,(_portf) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_18
??_outbit_17:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_portf)
	LDI	R31,(_portf) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_18:
	LDS	R16,_portf
	STS	98,R16
	RET
??_outbit_6:
	TST	R18
	BREQ	??_outbit_19
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDI	R30,LOW(_portg)
	LDI	R31,(_portg) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	RJMP	??_outbit_20
??_outbit_19:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDI	R30,LOW(_portg)
	LDI	R31,(_portg) >> 8
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
??_outbit_20:
	LDS	R16,_portg
	STS	101,R16
	RET
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _port_init(unsigned char, unsigned char)
_port_init:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function _port_init
	SUBI	R16,1
	BREQ	??_port_init_0
	DEC	R16
	BREQ	??_port_init_1
	DEC	R16
	BREQ	??_port_init_2
	DEC	R16
	BREQ	??_port_init_3
	DEC	R16
	BREQ	??_port_init_4
	DEC	R16
	BREQ	??_port_init_5
	DEC	R16
	BREQ	??_port_init_6
	RET
??_port_init_0:
	OUT	0x1A,R17
	RET
??_port_init_1:
	OUT	0x17,R17
	RET
??_port_init_2:
	OUT	0x14,R17
	RET
??_port_init_3:
	OUT	0x11,R17
	RET
??_port_init_4:
	OUT	0x02,R17
	RET
??_port_init_5:
	STS	97,R17
	RET
??_port_init_6:
	STS	100,R17
	RET
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _bit_init(unsigned char, unsigned char, char)
_bit_init:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function _bit_init
	MOV	R20,R17
	SUBI	R16,1
	BREQ	??_bit_init_0
	DEC	R16
	BREQ	??_bit_init_1
	DEC	R16
	BREQ	??_bit_init_2
	DEC	R16
	BRNE	$+2+2
	RJMP	??_bit_init_3
	DEC	R16
	BRNE	$+2+2
	RJMP	??_bit_init_4
	DEC	R16
	BRNE	$+2+2
	RJMP	??_bit_init_5
	DEC	R16
	BRNE	$+2+2
	RJMP	??_bit_init_6
	RET
??_bit_init_0:
	TST	R18
	BREQ	??_bit_init_7
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	IN	R17,0x1A
	OR	R17,R16
	OUT	0x1A,R17
	RET
??_bit_init_7:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	IN	R17,0x1A
	AND	R17,R16
	OUT	0x1A,R17
	RET
??_bit_init_1:
	TST	R18
	BREQ	??_bit_init_8
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	IN	R17,0x17
	OR	R17,R16
	OUT	0x17,R17
	RET
??_bit_init_8:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	IN	R17,0x17
	AND	R17,R16
	OUT	0x17,R17
	RET
??_bit_init_2:
	TST	R18
	BREQ	??_bit_init_9
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	IN	R17,0x14
	OR	R17,R16
	OUT	0x14,R17
	RET
??_bit_init_9:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	IN	R17,0x14
	AND	R17,R16
	OUT	0x14,R17
	RET
??_bit_init_3:
	TST	R18
	BREQ	??_bit_init_10
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	IN	R17,0x11
	OR	R17,R16
	OUT	0x11,R17
	RET
??_bit_init_10:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	IN	R17,0x11
	AND	R17,R16
	OUT	0x11,R17
	RET
??_bit_init_4:
	TST	R18
	BREQ	??_bit_init_11
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	IN	R17,0x02
	OR	R17,R16
	OUT	0x02,R17
	RET
??_bit_init_11:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	IN	R17,0x02
	AND	R17,R16
	OUT	0x02,R17
	RET
??_bit_init_5:
	TST	R18
	BREQ	??_bit_init_12
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDS	R17,97
	OR	R17,R16
	STS	97,R17
	RET
??_bit_init_12:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDS	R17,97
	AND	R17,R16
	STS	97,R17
	RET
??_bit_init_6:
	TST	R18
	BREQ	??_bit_init_13
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	LDS	R17,100
	OR	R17,R16
	STS	100,R17
	RET
??_bit_init_13:
	LDI	R16,1
	LDI	R17,0
	CALL	?S_SHL_L02
	COM	R16
	LDS	R17,100
	AND	R17,R16
	STS	100,R17
	RET
        CFI EndBlock cfiBlock7

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near inByte
inByte:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near grAck
grAck:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void I2C_START()
I2C_START:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function I2C_START
        FUNCALL I2C_START, DelayTime
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_START, DelayTime
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_START, DelayTime
        LOCFRAME RSTACK, 2, STACK
	SBI	0x12,0x01
	SBI	0x12,0x00
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x12,0x01
	LDI	R16,40
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x12,0x00
	LDI	R16,150
	LDI	R17,0
	RCALL	DelayTime
	RET
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void I2C_STOP()
I2C_STOP:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function I2C_STOP
        FUNCALL I2C_STOP, DelayTime
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_STOP, DelayTime
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_STOP, DelayTime
        LOCFRAME RSTACK, 2, STACK
	LDI	R16,150
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x12,0x01
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	SBI	0x12,0x00
	LDI	R16,40
	LDI	R17,0
	RCALL	DelayTime
	SBI	0x12,0x01
	RET
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc unsigned char I2C_SHOUT(unsigned char)
I2C_SHOUT:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function I2C_SHOUT
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHOUT, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	MOV	R25,R16
	LDI	R24,0
	RJMP	??I2C_SHOUT_0
??I2C_SHOUT_1:
	LDI	R16,0
??I2C_SHOUT_2:
	BST	R16,0
	IN	R16,0x12
	BLD	R16,1
	OUT	0x12,R16
	LSL	R25
	SBI	0x12,0x00
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	INC	R24
??I2C_SHOUT_0:
	CPI	R24,8
	BRCC	??I2C_SHOUT_3
	CBI	0x12,0x00
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	BST	R25,7
	BRTC	??I2C_SHOUT_1
	LDI	R16,1
	RJMP	??I2C_SHOUT_2
??I2C_SHOUT_3:
	CBI	0x12,0x00
	LDI	R16,20
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x11,0x01
	SBI	0x12,0x01
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	SBIS	0x10,0x01
	RJMP	??I2C_SHOUT_4
	LDI	R24,1
	RJMP	??I2C_SHOUT_5
??I2C_SHOUT_4:
	LDI	R24,0
??I2C_SHOUT_5:
	MOV	R16,R24
	SBRC	R16,0
	SBI	0x12,0x01
??I2C_SHOUT_6:
	SBRS	R16,0
	CBI	0x12,0x01
??I2C_SHOUT_7:
	LDI	R16,20
	LDI	R17,0
	RCALL	DelayTime
	SBI	0x12,0x00
	LDI	R16,30
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x12,0x00
	SBI	0x11,0x01
	LDI	R16,100
	LDI	R17,0
	RCALL	DelayTime
	MOV	R16,R24
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void I2C_SHIN(unsigned char)
I2C_SHIN:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function I2C_SHIN
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_SHIN, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	MOV	R25,R16
	LDI	R16,0
	STS	inByte,R16
	LDI	R16,0
	STS	grAck,R16
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x11,0x01
	SBI	0x12,0x01
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	LDI	R24,0
	RJMP	??I2C_SHIN_0
??I2C_SHIN_1:
	LDI	R16,0
??I2C_SHIN_2:
	LDI	R30,LOW(inByte)
	LDI	R31,(inByte) >> 8
	LD	R17,Z
	OR	R17,R16
	ST	Z,R17
	CPI	R24,7
	BRCC	??I2C_SHIN_3
	LDS	R16,inByte
	LSL	R16
	STS	inByte,R16
??I2C_SHIN_3:
	SBI	0x12,0x00
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	INC	R24
??I2C_SHIN_0:
	CPI	R24,8
	BRCC	??I2C_SHIN_4
	CBI	0x12,0x00
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime
	SBIS	0x10,0x01
	RJMP	??I2C_SHIN_1
	LDI	R16,1
	RJMP	??I2C_SHIN_2
??I2C_SHIN_4:
	CBI	0x12,0x00
	LDI	R16,30
	LDI	R17,0
	RCALL	DelayTime
	SBI	0x11,0x01
	CBI	0x12,0x01
	TST	R25
	BRNE	??I2C_SHIN_5
	LDI	R16,0
	STS	grAck,R16
	RJMP	??I2C_SHIN_6
??I2C_SHIN_5:
	LDI	R16,1
	STS	grAck,R16
??I2C_SHIN_6:
	LDI	R30,LOW(grAck)
	LDI	R31,(grAck) >> 8
	LD	R16,Z
	SBRC	R16,0
	SBI	0x12,0x01
??I2C_SHIN_7:
	SBRS	R16,0
	CBI	0x12,0x01
??I2C_SHIN_8:
	LDI	R16,20
	LDI	R17,0
	RCALL	DelayTime
	SBI	0x12,0x00
	LDI	R16,30
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x12,0x00
	LDI	R16,100
	LDI	R17,0
	RCALL	DelayTime
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void I2C_Write(unsigned char, unsigned char, unsigned char)
I2C_Write:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function I2C_Write
        FUNCALL I2C_Write, I2C_START
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Write, I2C_SHOUT
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Write, I2C_SHOUT
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Write, I2C_SHOUT
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Write, I2C_STOP
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE3_L09
        CFI R26 Frame(CFA_Y, -1)
        CFI R25 Frame(CFA_Y, -2)
        CFI R24 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	MOV	R26,R16
	MOV	R24,R17
	MOV	R25,R18
	RCALL	I2C_START
	MOV	R16,R26
	RCALL	I2C_SHOUT
	MOV	R16,R24
	RCALL	I2C_SHOUT
	MOV	R16,R25
	RCALL	I2C_SHOUT
	RCALL	I2C_STOP
	LDI	R30,3
	JMP	?EPILOGUE_B3_L09
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void rom_cnt_check()
rom_cnt_check:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function rom_cnt_check
        FUNCALL rom_cnt_check, I2C_START
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, I2C_STOP
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_cnt_check, DelayTime_ms
        LOCFRAME RSTACK, 2, STACK
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDD	R18,Z+2
	LDD	R19,Z+3
	CPI	R16,1
	LDI	R20,53
	CPC	R17,R20
	LDI	R20,12
	CPC	R18,R20
	LDI	R20,0
	CPC	R19,R20
	BRCC	$+2+2
	RJMP	??rom_cnt_check_0
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,255
	LDI	R18,7
	CPC	R17,R18
	BRCS	$+2+2
	RJMP	??rom_cnt_check_1
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,251
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	ANDI	R16,0x0F
	CPI	R16,15
	BRNE	??rom_cnt_check_2
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
??rom_cnt_check_2:
	LDI	R16,0
	LDI	R17,0
	LDI	R18,0
	LDI	R19,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	STD	Z+2,R18
	STD	Z+3,R19
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,255
	LDI	R18,7
	CPC	R17,R18
	BRCC	??rom_cnt_check_3
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LDD	R17,Z+1
	MOV	R16,R17
	STS	rom_add_pt_high,R16
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	STS	rom_add_pt_low,R16
	RJMP	??rom_cnt_check_4
??rom_cnt_check_3:
	LDI	R16,128
	STS	rom_add_pt_high,R16
	LDI	R16,0
	STS	rom_add_pt_low,R16
??rom_cnt_check_4:
	LDS	R16,rom_add_pt_high
	LDS	R17,rom_add_pt_low
	ADD	R17,R16
	STS	rom_add_check_sum,R17
	RCALL	I2C_START
	LDI	R16,160
	RCALL	I2C_SHOUT
	LDI	R16,0
	RCALL	I2C_SHOUT
	LDS	R16,rom_add_pt_high
	RCALL	I2C_SHOUT
	LDS	R16,rom_add_pt_low
	RCALL	I2C_SHOUT
	LDS	R16,rom_add_check_sum
	RCALL	I2C_SHOUT
	RCALL	I2C_STOP
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime_ms
	RET
??rom_cnt_check_0:
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDD	R18,Z+2
	LDD	R19,Z+3
	SUBI	R16,255
	SBCI	R17,255
	SBCI	R18,255
	SBCI	R19,255
	ST	Z,R16
	STD	Z+1,R17
	STD	Z+2,R18
	STD	Z+3,R19
??rom_cnt_check_1:
	RET
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void rom_write_multi()
rom_write_multi:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function rom_write_multi
        FUNCALL rom_write_multi, rom_cnt_check
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_START
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_SHOUT
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_write_multi, I2C_STOP
        LOCFRAME RSTACK, 2, STACK
	RCALL	rom_cnt_check
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,255
	LDI	R18,7
	CPC	R17,R18
	BRCS	$+2+2
	RJMP	??rom_write_multi_0
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	MOV	R16,R17
	ROL	R16
	ANDI	R16,0x0E
	SUBI	R16,96
	STS	rom_device_high,R16
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	STS	rom_device_low,R16
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LDD	R18,Z+2
	MOV	R16,R18
	STS	rom_cnt_high,R16
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LDD	R17,Z+1
	MOV	R16,R17
	STS	rom_cnt_mid,R16
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R16,Z
	STS	rom_cnt_low,R16
	LDS	R16,ch_led_data
	STS	rom_func_data,R16
	LDS	R16,rom_func_data
	LSL	R16
	LSL	R16
	LSL	R16
	STS	rom_func_data,R16
	LDS	R16,filter_flag
	LDI	R30,LOW(rom_func_data)
	LDI	R31,(rom_func_data) >> 8
	LD	R17,Z
	ADD	R17,R16
	ST	Z,R17
	LDS	R16,rom_func_data
	LSL	R16
	STS	rom_func_data,R16
	LDS	R16,phase_data
	LDI	R30,LOW(rom_func_data)
	LDI	R31,(rom_func_data) >> 8
	LD	R17,Z
	ADD	R17,R16
	ST	Z,R17
	RCALL	I2C_START
	LDS	R16,rom_device_high
	RCALL	I2C_SHOUT
	LDS	R16,rom_device_low
	RCALL	I2C_SHOUT
	LDS	R16,rom_cnt_high
	RCALL	I2C_SHOUT
	LDS	R16,rom_cnt_mid
	RCALL	I2C_SHOUT
	LDS	R16,rom_cnt_low
	RCALL	I2C_SHOUT
	LDS	R16,vol_dB
	RCALL	I2C_SHOUT
	LDS	R16,rom_func_data
	RCALL	I2C_SHOUT
	RCALL	I2C_STOP
??rom_write_multi_0:
	RET
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc unsigned char I2C_Read(unsigned char, unsigned char)
I2C_Read:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function I2C_Read
        FUNCALL I2C_Read, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_SHIN
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL I2C_Read, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	MOV	R24,R16
	MOV	R25,R17
	RCALL	I2C_START
	MOV	R16,R24
	RCALL	I2C_SHOUT
	MOV	R16,R25
	RCALL	I2C_SHOUT
	RCALL	I2C_STOP
	RCALL	I2C_START
	INC	R24
	MOV	R16,R24
	RCALL	I2C_SHOUT
	LDI	R16,1
	RCALL	I2C_SHIN
	LDS	R24,inByte
	RCALL	I2C_STOP
	MOV	R16,R24
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc unsigned char rom_I2C_Read(unsigned int)
rom_I2C_Read:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function rom_I2C_Read
        FUNCALL rom_I2C_Read, I2C_Read
        LOCFRAME RSTACK, 2, STACK
	MOVW	R19 : R18,R17 : R16
	LSL	R18
	MOV	R18,R19
	ROL	R18
	ANDI	R18,0x0E
	SUBI	R18,96
	MOV	R17,R16
	MOV	R16,R18
	RCALL	I2C_Read
	RET
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void reset_eeprom(unsigned int)
reset_eeprom:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function reset_eeprom
        FUNCALL reset_eeprom, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL reset_eeprom, DelayTime_ms
        LOCFRAME RSTACK, 2, STACK
	MOVW	R19 : R18,R17 : R16
	LSL	R18
	MOV	R18,R19
	ROL	R18
	MOV	R19,R18
	ANDI	R19,0x0E
	SUBI	R19,96
	MOV	R17,R16
	LDI	R18,255
	MOV	R16,R19
	RCALL	I2C_Write
	LDI	R16,10
	LDI	R17,0
	RCALL	DelayTime_ms
	RET
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void test_set_eeprom(unsigned int, unsigned char)
test_set_eeprom:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function test_set_eeprom
        FUNCALL test_set_eeprom, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL test_set_eeprom, DelayTime_ms
        LOCFRAME RSTACK, 2, STACK
	MOVW	R21 : R20,R17 : R16
	LSL	R20
	MOV	R20,R21
	ROL	R20
	ANDI	R20,0x0E
	SUBI	R20,96
	MOV	R17,R16
	MOV	R16,R20
	RCALL	I2C_Write
	LDI	R16,5
	LDI	R17,0
	RCALL	DelayTime_ms
	RET
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_matrix_clear()
dot_matrix_clear:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function dot_matrix_clear
	CBI	0x12,0x07
	LDI	R16,0
	STS	dot_light_reg,R16
	RET
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_string_digit()
dot_string_digit:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function dot_string_digit
        FUNCALL dot_string_digit, DelayTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_string_digit, DelayTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_string_digit, DelayTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_string_digit, DelayTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_string_digit, DelayTime
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE3_L09
        CFI R26 Frame(CFA_Y, -1)
        CFI R25 Frame(CFA_Y, -2)
        CFI R24 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	LDI	R24,0
	SBI	0x12,0x07
	LDS	R16,98
	ORI	R16,0x08
	STS	98,R16
	LDI	R25,0
	RJMP	??dot_string_digit_0
??dot_string_digit_1:
	LDI	R16,64
	LDI	R17,6
	RCALL	DelayTime
	LDI	R24,0
	INC	R25
??dot_string_digit_0:
	CPI	R25,2
	BRCS	$+2+2
	RJMP	??dot_string_digit_2
	LDI	R26,0
	RJMP	??dot_string_digit_3
??dot_string_digit_4:
	LDS	R16,101
	ORI	R16,0x02
	STS	101,R16
??dot_string_digit_5:
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	INC	R24
	INC	R26
??dot_string_digit_3:
	CPI	R26,8
	BRCC	??dot_string_digit_1
	TST	R24
	BRNE	??dot_string_digit_6
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_6:
	CPI	R24,1
	BRNE	??dot_string_digit_8
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_8:
	CPI	R24,2
	BRNE	??dot_string_digit_9
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_9:
	CPI	R24,3
	BRNE	??dot_string_digit_10
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_10:
	CPI	R24,4
	BRNE	??dot_string_digit_11
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_11:
	CPI	R24,5
	BRNE	??dot_string_digit_12
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_12:
	CPI	R24,6
	BRNE	??dot_string_digit_13
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_string_digit_7
??dot_string_digit_13:
	CPI	R24,7
	BRNE	??dot_string_digit_7
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
??dot_string_digit_7:
	TST	R25
	BREQ	??dot_string_digit_14
	CBI	0x15,0x07
	RJMP	??dot_string_digit_15
??dot_string_digit_14:
	LDS	R16,101
	ANDI	R16,0xFD
	STS	101,R16
??dot_string_digit_15:
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFB
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	MOV	R20,R25
	LDI	R21,0
	LDI	R16,8
	LDI	R17,0
	CALL	?S_EC_MUL_L02
	MOV	R18,R26
	LDI	R19,0
	ADD	R18,R16
	ADC	R19,R17
	MOVW	R31 : R30,R19 : R18
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	LD	R16,Z
	OUT	0x1B,R16
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ORI	R16,0x04
	STS	101,R16
	TST	R25
	BRNE	$+2+2
	RJMP	??dot_string_digit_4
	SBI	0x15,0x07
	RJMP	??dot_string_digit_5
??dot_string_digit_2:
	LDI	R30,3
	JMP	?EPILOGUE_B3_L09
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_matrix_digit(unsigned char, unsigned char)
dot_matrix_digit:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function dot_matrix_digit
        FUNCALL dot_matrix_digit, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	MOV	R24,R16
	SBI	0x12,0x07
	LDS	R16,98
	ORI	R16,0x08
	STS	98,R16
	TST	R17
	BRNE	??dot_matrix_digit_0
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_0:
	CPI	R17,1
	BRNE	??dot_matrix_digit_2
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_2:
	CPI	R17,2
	BRNE	??dot_matrix_digit_3
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_3:
	CPI	R17,3
	BRNE	??dot_matrix_digit_4
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_4:
	CPI	R17,4
	BRNE	??dot_matrix_digit_5
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_5:
	CPI	R17,5
	BRNE	??dot_matrix_digit_6
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_6:
	CPI	R17,6
	BRNE	??dot_matrix_digit_7
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit_1
??dot_matrix_digit_7:
	CPI	R17,7
	BRNE	??dot_matrix_digit_1
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
??dot_matrix_digit_1:
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFD
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFB
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	OUT	0x1B,R24
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ORI	R16,0x04
	STS	101,R16
	LDS	R16,101
	ORI	R16,0x02
	STS	101,R16
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_matrix_digit2(unsigned char, unsigned char)
dot_matrix_digit2:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function dot_matrix_digit2
        FUNCALL dot_matrix_digit2, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit2, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit2, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit2, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_digit2, DelayTime
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	MOV	R24,R16
	SBI	0x12,0x07
	LDS	R16,98
	ORI	R16,0x08
	STS	98,R16
	TST	R17
	BRNE	??dot_matrix_digit2_0
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_0:
	CPI	R17,1
	BRNE	??dot_matrix_digit2_2
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_2:
	CPI	R17,2
	BRNE	??dot_matrix_digit2_3
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_3:
	CPI	R17,3
	BRNE	??dot_matrix_digit2_4
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_4:
	CPI	R17,4
	BRNE	??dot_matrix_digit2_5
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_5:
	CPI	R17,5
	BRNE	??dot_matrix_digit2_6
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_6:
	CPI	R17,6
	BRNE	??dot_matrix_digit2_7
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_digit2_1
??dot_matrix_digit2_7:
	CPI	R17,7
	BRNE	??dot_matrix_digit2_1
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
??dot_matrix_digit2_1:
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x15,0x07
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFB
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	OUT	0x1B,R24
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ORI	R16,0x04
	STS	101,R16
	SBI	0x15,0x07
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_matrix_bright(unsigned char)
dot_matrix_bright:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function dot_matrix_bright
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_matrix_bright, DelayTime
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	MOV	R25,R16
	LDI	R24,0
	RJMP	??dot_matrix_bright_0
??dot_matrix_bright_1:
	CPI	R24,7
	BRNE	??dot_matrix_bright_2
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
??dot_matrix_bright_2:
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFD
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFB
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	OUT	0x1B,R25
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ORI	R16,0x04
	STS	101,R16
	LDS	R16,101
	ORI	R16,0x02
	STS	101,R16
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	INC	R24
??dot_matrix_bright_0:
	CPI	R24,8
	BRCS	$+2+2
	RJMP	??dot_matrix_bright_3
	SBI	0x12,0x07
	LDS	R16,98
	ANDI	R16,0xF7
	STS	98,R16
	TST	R24
	BRNE	??dot_matrix_bright_4
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_4:
	CPI	R24,1
	BRNE	??dot_matrix_bright_5
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_5:
	CPI	R24,2
	BRNE	??dot_matrix_bright_6
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_6:
	CPI	R24,3
	BRNE	??dot_matrix_bright_7
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_7:
	CPI	R24,4
	BRNE	??dot_matrix_bright_8
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_8:
	CPI	R24,5
	BRNE	??dot_matrix_bright_9
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_9:
	CPI	R24,6
	BREQ	$+2+2
	RJMP	??dot_matrix_bright_1
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_2
??dot_matrix_bright_3:
	LDI	R24,0
	RJMP	??dot_matrix_bright_10
??dot_matrix_bright_11:
	CPI	R24,7
	BRNE	??dot_matrix_bright_12
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
??dot_matrix_bright_12:
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	CBI	0x15,0x07
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ANDI	R16,0xFB
	STS	101,R16
	LDI	R16,8
	LDI	R17,0
	RCALL	DelayTime
	OUT	0x1B,R25
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	LDS	R16,101
	ORI	R16,0x04
	STS	101,R16
	SBI	0x15,0x07
	LDI	R16,16
	LDI	R17,0
	RCALL	DelayTime
	INC	R24
??dot_matrix_bright_10:
	CPI	R24,8
	BRCS	$+2+2
	RJMP	??dot_matrix_bright_13
	SBI	0x12,0x07
	LDS	R16,98
	ANDI	R16,0xF7
	STS	98,R16
	TST	R24
	BRNE	??dot_matrix_bright_14
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_14:
	CPI	R24,1
	BRNE	??dot_matrix_bright_15
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_15:
	CPI	R24,2
	BRNE	??dot_matrix_bright_16
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_16:
	CPI	R24,3
	BRNE	??dot_matrix_bright_17
	LDS	R16,98
	ANDI	R16,0xFB
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_17:
	CPI	R24,4
	BRNE	??dot_matrix_bright_18
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_18:
	CPI	R24,5
	BRNE	??dot_matrix_bright_19
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFD
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x01
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_19:
	CPI	R24,6
	BREQ	$+2+2
	RJMP	??dot_matrix_bright_11
	LDS	R16,98
	ORI	R16,0x04
	STS	98,R16
	LDS	R16,98
	ORI	R16,0x02
	STS	98,R16
	LDS	R16,98
	ANDI	R16,0xFE
	STS	98,R16
	RJMP	??dot_matrix_bright_12
??dot_matrix_bright_13:
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_0x_hexadecimal(unsigned char)
dot_0x_hexadecimal:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function dot_0x_hexadecimal
        FUNCALL dot_0x_hexadecimal, dot_matrix_digit
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_0x_hexadecimal, dot_matrix_digit
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_0x_hexadecimal, dot_matrix_digit
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL dot_0x_hexadecimal, dot_matrix_digit
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	MOV	R25,R16
	LDI	R17,3
	LDI	R16,48
	RCALL	dot_matrix_digit
	LDI	R17,2
	LDI	R16,120
	RCALL	dot_matrix_digit
	LDI	R24,2
	RJMP	??dot_0x_hexadecimal_0
??dot_0x_hexadecimal_1:
	MOV	R17,R24
	DEC	R17
	SUBI	R16,201
	RCALL	dot_matrix_digit
??dot_0x_hexadecimal_2:
	DEC	R24
??dot_0x_hexadecimal_0:
	CPI	R24,1
	BRCS	??dot_0x_hexadecimal_3
	MOV	R16,R25
	LDI	R17,0
	MOV	R19,R24
	DEC	R19
	LDI	R18,4
	MUL	R19,R18
	MOV	R20,R0
	CALL	?SS_SHR_L02
	ANDI	R16,0x0F
	CPI	R16,10
	BRCC	??dot_0x_hexadecimal_1
	MOV	R17,R24
	DEC	R17
	SUBI	R16,208
	RCALL	dot_matrix_digit
	RJMP	??dot_0x_hexadecimal_2
??dot_0x_hexadecimal_3:
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_vol_hextodeci(unsigned char)
dot_vol_hextodeci:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function dot_vol_hextodeci
        FUNCALL dot_vol_hextodeci, dot_string_digit
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	MOV	R25,R16
	LDS	R16,mute_enable
	TST	R16
	BRNE	??dot_vol_hextodeci_0
	LDI	R16,77
	STS	ess_volume,R16
	LDI	R16,85
	STS	(ess_volume + 1),R16
	LDI	R16,84
	STS	(ess_volume + 2),R16
	LDI	R16,69
	STS	(ess_volume + 3),R16
	RJMP	??dot_vol_hextodeci_1
??dot_vol_hextodeci_0:
	TST	R25
	BRNE	??dot_vol_hextodeci_2
	LDI	R16,32
	STS	ess_volume,R16
	LDI	R16,49
	STS	(ess_volume + 1),R16
	LDI	R16,48
	STS	(ess_volume + 2),R16
	LDI	R16,48
	STS	(ess_volume + 3),R16
	RJMP	??dot_vol_hextodeci_1
??dot_vol_hextodeci_2:
	CPI	R25,255
	BRNE	??dot_vol_hextodeci_3
	LDI	R16,48
	STS	ess_volume,R16
	LDI	R16,48
	STS	(ess_volume + 1),R16
	LDI	R16,46
	STS	(ess_volume + 2),R16
	LDI	R16,48
	STS	(ess_volume + 3),R16
	RJMP	??dot_vol_hextodeci_1
??dot_vol_hextodeci_3:
	LDI	R26,20
	LDI	R16,200
	SUB	R16,R25
	MOV	R25,R16
	LDI	R24,0
	RJMP	??dot_vol_hextodeci_4
??dot_vol_hextodeci_5:
	MOV	R16,R25
	MOV	R20,R26
	CALL	?UC_DIVMOD_L01
	SUBI	R16,208
	MOV	R18,R24
	LDI	R19,0
	MOVW	R31 : R30,R19 : R18
	SUBI	R30,LOW((-(ess_volume) & 0xFFFF))
	SBCI	R31,(-(ess_volume) & 0xFFFF) >> 8
	ST	Z,R16
	MOV	R16,R25
	MOV	R20,R26
	CALL	?UC_DIVMOD_L01
	MOV	R25,R20
	MOV	R16,R26
	LDI	R20,10
	CALL	?UC_DIVMOD_L01
	MOV	R26,R16
	INC	R24
??dot_vol_hextodeci_4:
	CPI	R24,2
	BRCS	??dot_vol_hextodeci_5
	TST	R25
	BREQ	??dot_vol_hextodeci_6
	LDI	R16,46
	STS	(ess_volume + 2),R16
	LDI	R16,53
	STS	(ess_volume + 3),R16
	RJMP	??dot_vol_hextodeci_1
??dot_vol_hextodeci_6:
	LDI	R16,46
	STS	(ess_volume + 2),R16
	LDI	R16,48
	STS	(ess_volume + 3),R16
??dot_vol_hextodeci_1:
	LDI	R24,0
	RJMP	??dot_vol_hextodeci_7
??dot_vol_hextodeci_8:
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(ess_volume) & 0xFFFF))
	SBCI	R31,(-(ess_volume) & 0xFFFF) >> 8
	LD	R16,Z
	MOV	R26,R24
	LDI	R27,0
	ADIW	R27 : R26,12
	MOVW	R31 : R30,R27 : R26
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
	INC	R24
??dot_vol_hextodeci_7:
	CPI	R24,4
	BRCS	??dot_vol_hextodeci_8
	RCALL	dot_string_digit
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void dot_matrix_set()
dot_matrix_set:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function dot_matrix_set
        FUNCALL dot_matrix_set, dot_matrix_bright
        LOCFRAME RSTACK, 2, STACK
	SBI	0x12,0x07
	LDI	R16,1
	STS	dot_light_reg,R16
	LDS	R16,101
	ORI	R16,0x01
	STS	101,R16
	LDI	R16,4
	RCALL	dot_matrix_bright
	RET
        CFI EndBlock cfiBlock26

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near test_osc
test_osc:
        DS 1
	REQUIRE `?<Initializer for test_osc>`

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void ess_mute()
ess_mute:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function ess_mute
        FUNCALL ess_mute, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_mute, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_mute, dot_vol_hextodeci
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??ess_mute_0
	LDS	R16,mute_enable
	TST	R16
	BRNE	??ess_mute_1
	LDI	R16,1
	RJMP	??ess_mute_2
??ess_mute_1:
	LDI	R16,0
??ess_mute_2:
	STS	mute_enable,R16
	LDS	R16,mute_enable
	TST	R16
	BRNE	??ess_mute_3
	LDI	R17,1
	RJMP	??ess_mute_4
??ess_mute_3:
	LDI	R17,0
??ess_mute_4:
	LDS	R16,es9018_reg10
	ANDI	R16,0xCE
	ADD	R16,R17
	STS	es9018_reg10,R16
	LDS	R18,es9018_reg10
	LDI	R17,10
	LDI	R16,144
	RCALL	I2C_Write
	LDS	R18,es9018_reg10
	LDI	R17,10
	LDI	R16,146
	RCALL	I2C_Write
	LDS	R16,vol_dB
	RCALL	dot_vol_hextodeci
??ess_mute_0:
	RET
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void phase_ess()
phase_ess:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function phase_ess
        FUNCALL phase_ess, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL phase_ess, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL phase_ess, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL phase_ess, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL phase_ess, rom_write_multi
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,phase_data
	TST	R16
	BRNE	??phase_ess_0
	LDI	R18,255
	LDI	R17,13
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,255
	LDI	R17,13
	LDI	R16,146
	RCALL	I2C_Write
	RJMP	??phase_ess_1
??phase_ess_0:
	LDI	R18,0
	LDI	R17,13
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,0
	LDI	R17,13
	LDI	R16,146
	RCALL	I2C_Write
??phase_ess_1:
	RCALL	rom_write_multi
	RET
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void volume_set()
volume_set:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function volume_set
        FUNCALL volume_set, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL volume_set, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL volume_set, rom_write_multi
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	LDI	R24,0
	RJMP	??volume_set_0
??volume_set_1:
	LDS	R18,vol_dB
	MOV	R17,R24
	LDI	R16,144
	RCALL	I2C_Write
	LDS	R18,vol_dB
	MOV	R17,R24
	LDI	R16,146
	RCALL	I2C_Write
	INC	R24
??volume_set_0:
	CPI	R24,8
	BRCS	??volume_set_1
	RCALL	rom_write_multi
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void init_vol_dn(unsigned char)
init_vol_dn:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function init_vol_dn
        FUNCALL init_vol_dn, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL init_vol_dn, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL init_vol_dn, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL init_vol_dn, I2C_Write
        LOCFRAME RSTACK, 2, STACK
	LDI	R18,127
	LDS	R16,ess_lch_master_trim
	SUB	R18,R16
	LDI	R17,23
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,127
	LDS	R16,ess_rch_master_trim
	SUB	R18,R16
	LDI	R17,23
	LDI	R16,146
	RCALL	I2C_Write
	LDI	R18,254
	LDI	R17,20
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,254
	LDI	R17,20
	LDI	R16,146
	RCALL	I2C_Write
	RET
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void init_vol(unsigned char)
init_vol:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function init_vol
        FUNCALL init_vol, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL init_vol, I2C_Write
        LOCFRAME RSTACK, 2, STACK
	LDI	R18,255
	LDI	R17,20
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,255
	LDI	R17,20
	LDI	R16,146
	RCALL	I2C_Write
	RET
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void audio_level_sp_down()
audio_level_sp_down:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function audio_level_sp_down
        FUNCALL audio_level_sp_down, volume_set
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_sp_down, dot_vol_hextodeci
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??audio_level_sp_down_0
	LDS	R17,vol_dB
	LDS	R16,vol_dB
	CPI	R16,197
	BRCC	??audio_level_sp_down_1
	LDI	R30,LOW(vol_dB)
	LDI	R31,(vol_dB) >> 8
	LD	R16,Z
	SUBI	R16,253
	ST	Z,R16
	RJMP	??audio_level_sp_down_2
??audio_level_sp_down_1:
	LDI	R16,255
	STS	vol_dB,R16
??audio_level_sp_down_2:
	LDS	R16,vol_dB
	CP	R17,R16
	BREQ	??audio_level_sp_down_0
	RCALL	volume_set
	LDS	R16,vol_dB
	RCALL	dot_vol_hextodeci
??audio_level_sp_down_0:
	RET
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void audio_level_sp_up()
audio_level_sp_up:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function audio_level_sp_up
        FUNCALL audio_level_sp_up, volume_set
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_sp_up, dot_vol_hextodeci
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??audio_level_sp_up_0
	LDS	R17,vol_dB
	LDS	R16,vol_dB
	CPI	R16,255
	BRNE	??audio_level_sp_up_1
	LDI	R16,199
	STS	vol_dB,R16
	RJMP	??audio_level_sp_up_2
??audio_level_sp_up_1:
	LDS	R16,vol_dB
	CPI	R16,3
	BRCS	??audio_level_sp_up_3
	LDI	R30,LOW(vol_dB)
	LDI	R31,(vol_dB) >> 8
	LD	R16,Z
	SUBI	R16,3
	ST	Z,R16
	RJMP	??audio_level_sp_up_2
??audio_level_sp_up_3:
	LDI	R16,0
	STS	vol_dB,R16
??audio_level_sp_up_2:
	LDS	R16,vol_dB
	CP	R17,R16
	BREQ	??audio_level_sp_up_0
	RCALL	volume_set
	LDS	R16,vol_dB
	RCALL	dot_vol_hextodeci
??audio_level_sp_up_0:
	RET
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void audio_level_down()
audio_level_down:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function audio_level_down
        FUNCALL audio_level_down, ess_mute
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_down, volume_set
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_down, dot_vol_hextodeci
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??audio_level_down_0
	LDS	R16,mute_enable
	TST	R16
	BRNE	??audio_level_down_1
	RCALL	ess_mute
??audio_level_down_1:
	LDS	R17,vol_dB
	LDS	R16,vol_dB
	CPI	R16,199
	BRCC	??audio_level_down_2
	LDI	R30,LOW(vol_dB)
	LDI	R31,(vol_dB) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	RJMP	??audio_level_down_3
??audio_level_down_2:
	LDI	R16,255
	STS	vol_dB,R16
??audio_level_down_3:
	LDS	R16,vol_dB
	CP	R17,R16
	BREQ	??audio_level_down_0
	RCALL	volume_set
	LDS	R16,vol_dB
	RCALL	dot_vol_hextodeci
??audio_level_down_0:
	RET
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void audio_level_up()
audio_level_up:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function audio_level_up
        FUNCALL audio_level_up, ess_mute
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_up, volume_set
        LOCFRAME RSTACK, 2, STACK
        FUNCALL audio_level_up, dot_vol_hextodeci
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??audio_level_up_0
	LDS	R16,mute_enable
	TST	R16
	BRNE	??audio_level_up_1
	RCALL	ess_mute
??audio_level_up_1:
	LDS	R17,vol_dB
	LDS	R16,vol_dB
	CPI	R16,255
	BRNE	??audio_level_up_2
	LDI	R16,199
	STS	vol_dB,R16
	RJMP	??audio_level_up_3
??audio_level_up_2:
	LDS	R16,vol_dB
	CPI	R16,1
	BRCS	??audio_level_up_3
	LDI	R30,LOW(vol_dB)
	LDI	R31,(vol_dB) >> 8
	LD	R16,Z
	DEC	R16
	ST	Z,R16
??audio_level_up_3:
	LDS	R16,vol_dB
	CP	R17,R16
	BREQ	??audio_level_up_0
	RCALL	volume_set
	LDS	R16,vol_dB
	RCALL	dot_vol_hextodeci
??audio_level_up_0:
	RET
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void channel_change()
channel_change:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function channel_change
        FUNCALL channel_change, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL channel_change, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL channel_change, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL channel_change, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL channel_change, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL channel_change, rom_write_multi
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,mute_enable
	TST	R16
	BREQ	??channel_change_0
	LDI	R18,207
	LDI	R17,10
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,146
	RCALL	I2C_Write
??channel_change_0:
	LDS	R16,ch_led_data
	CPI	R16,7
	BRNE	??channel_change_1
	LDI	R16,0
	RJMP	??channel_change_2
??channel_change_1:
	LDI	R16,1
??channel_change_2:
	LDS	R17,i2s_flag
	CP	R16,R17
	BREQ	??channel_change_3
	STS	i2s_flag,R16
	LDI	R30,LOW(i2s_flag)
	LDI	R31,(i2s_flag) >> 8
	LD	R16,Z
	SBRC	R16,0
	SBI	0x03,0x03
??channel_change_4:
	SBRS	R16,0
	CBI	0x03,0x03
??channel_change_3:
	LDI	R30,LOW(interface_ch)
	LDI	R31,(interface_ch) >> 8
	LD	R16,Z
	ANDI	R16,0xC7
	ST	Z,R16
	LDS	R16,ch_led_data
	LSL	R16
	LSL	R16
	LSL	R16
	LDI	R30,LOW(interface_ch)
	LDI	R31,(interface_ch) >> 8
	LD	R17,Z
	ADD	R17,R16
	ST	Z,R17
	LDS	R18,interface_ch
	LDI	R17,4
	LDI	R16,32
	RCALL	I2C_Write
	LDS	R16,mute_enable
	TST	R16
	BREQ	??channel_change_5
	LDI	R18,206
	LDI	R17,10
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,206
	LDI	R17,10
	LDI	R16,146
	RCALL	I2C_Write
??channel_change_5:
	RCALL	rom_write_multi
	RET
        CFI EndBlock cfiBlock36

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void channel_up()
channel_up:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function channel_up
        FUNCALL channel_up, channel_change
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??channel_up_0
	LDS	R16,ch_led_data
	CPI	R16,7
	BRCC	??channel_up_1
	LDI	R30,LOW(ch_led_data)
	LDI	R31,(ch_led_data) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	RJMP	??channel_up_2
??channel_up_1:
	LDI	R16,0
	STS	ch_led_data,R16
??channel_up_2:
	RCALL	channel_change
??channel_up_0:
	RET
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void channel_down()
channel_down:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function channel_down
        FUNCALL channel_down, channel_change
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,key_func
	TST	R16
	BRNE	??channel_down_0
	LDS	R16,ch_led_data
	TST	R16
	BREQ	??channel_down_1
	LDI	R30,LOW(ch_led_data)
	LDI	R31,(ch_led_data) >> 8
	LD	R16,Z
	DEC	R16
	ST	Z,R16
	RJMP	??channel_down_2
??channel_down_1:
	LDI	R16,7
	STS	ch_led_data,R16
??channel_down_2:
	RCALL	channel_change
??channel_down_0:
	RET
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void ess_filter()
ess_filter:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ess_filter
        FUNCALL ess_filter, rom_write_multi
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, DelayTime_ms
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, I2C_Write
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL ess_filter, DelayTime_ms
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	LDI	R16,0
	STS	rom_save_flag2,R16
	LDI	R16,0
	OUT	0x38,R16
	LDS	R16,filter_flag
	CPI	R16,3
	BRNE	??ess_filter_0
	LDI	R16,0
	STS	filter_flag,R16
??ess_filter_0:
	LDS	R24,filter_flag
	RCALL	rom_write_multi
	LDI	R16,5
	LDI	R17,0
	CALL	DelayTime_ms
	TST	R24
	BRNE	??ess_filter_1
	LDI	R18,11
	LDI	R17,14
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,11
	LDI	R17,14
	LDI	R16,146
	RCALL	I2C_Write
	RJMP	??ess_filter_2
??ess_filter_1:
	CPI	R24,1
	BRNE	??ess_filter_3
	LDI	R18,13
	LDI	R17,14
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,13
	LDI	R17,14
	LDI	R16,146
	RCALL	I2C_Write
	RJMP	??ess_filter_2
??ess_filter_3:
	CPI	R24,2
	BRNE	??ess_filter_2
	LDI	R18,15
	LDI	R17,14
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,15
	LDI	R17,14
	LDI	R16,146
	RCALL	I2C_Write
??ess_filter_2:
	TST	R24
	BREQ	??ess_filter_4
	LDI	R16,200
	LDI	R17,0
	CALL	DelayTime_ms
??ess_filter_4:
	LDI	R16,1
	STS	rom_save_flag2,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(rom_tmr)
	LDI	R31,(rom_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,8
	OUT	0x38,R16
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void femto_function()
femto_function:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function femto_function
        FUNCALL femto_function, phase_ess
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, I2C_Write
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, I2C_Write
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, ess_filter
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, volume_set
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, DelayTime_ms
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, I2C_Write
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, I2C_Write
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL femto_function, dot_string_digit
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	LDS	R16,key_func
	CPI	R16,1
	BREQ	??femto_function_0
	LDS	R16,key_func
	CPI	R16,2
	BRNE	??femto_function_1
??femto_function_0:
	LDI	R16,1
	STS	key_condition,R16
	RJMP	??femto_function_2
??femto_function_1:
	LDS	R16,key_func
	CPI	R16,3
	BRNE	??femto_function_3
	LDS	R16,phase_data
	TST	R16
	BRNE	??femto_function_4
	LDI	R16,1
	RJMP	??femto_function_5
??femto_function_4:
	LDI	R16,0
??femto_function_5:
	STS	phase_data,R16
	RCALL	phase_ess
	RJMP	??femto_function_2
??femto_function_3:
	LDS	R16,key_func
	CPI	R16,4
	BRNE	??femto_function_2
	LDI	R30,LOW(filter_flag)
	LDI	R31,(filter_flag) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	LDS	R16,mute_enable
	TST	R16
	BREQ	??femto_function_6
	LDI	R18,207
	LDI	R17,10
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,146
	RCALL	I2C_Write
??femto_function_6:
	RCALL	ess_filter
	RCALL	volume_set
	LDI	R16,5
	LDI	R17,0
	CALL	DelayTime_ms
	LDS	R16,mute_enable
	TST	R16
	BREQ	??femto_function_2
	LDI	R18,206
	LDI	R17,10
	LDI	R16,144
	RCALL	I2C_Write
	LDI	R18,206
	LDI	R17,10
	LDI	R16,146
	RCALL	I2C_Write
??femto_function_2:
	LDI	R24,0
	RJMP	??femto_function_7
??femto_function_8:
	MOV	R26,R24
	LDI	R27,0
	SBIW	R27 : R26,8
	MOVW	R31 : R30,R27 : R26
	SUBI	R30,LOW((-(normal_name) & 0xFFFF))
	SBCI	R31,(-(normal_name) & 0xFFFF) >> 8
	LD	R16,Z
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
??femto_function_9:
	INC	R24
??femto_function_7:
	CPI	R24,16
	BRCC	??femto_function_10
	CPI	R24,8
	BRCC	??femto_function_11
	LDI	R26,LOW(filter_name)
	LDI	R27,(filter_name) >> 8
	LDS	R20,filter_flag
	LDI	R21,0
	LDI	R16,8
	LDI	R17,0
	CALL	?S_EC_MUL_L02
	ADD	R26,R16
	ADC	R27,R17
	LDI	R25,0
	ADD	R26,R24
	ADC	R27,R25
	LD	R16,X
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
	RJMP	??femto_function_9
??femto_function_11:
	LDS	R16,phase_data
	TST	R16
	BRNE	??femto_function_8
	MOV	R26,R24
	LDI	R27,0
	SBIW	R27 : R26,8
	MOVW	R31 : R30,R27 : R26
	SUBI	R30,LOW((-(phase_name) & 0xFFFF))
	SBCI	R31,(-(phase_name) & 0xFFFF) >> 8
	LD	R16,Z
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
	RJMP	??femto_function_9
??femto_function_10:
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(key_func_tmr)
	LDI	R31,(key_func_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
	RCALL	dot_string_digit
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock40

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flg_on_remocon
_flg_on_remocon:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _code_remocon
_code_remocon:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near _counter_remocon
_counter_remocon:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// int __near _remocon_custom
_remocon_custom:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// int __near _remocon_custom_2
_remocon_custom_2:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// int __near _remocon_data
_remocon_data:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// int __near Remoc_data_save
Remoc_data_save:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// int __near _remocon_data_2
_remocon_data_2:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _remocon_counter
_remocon_counter:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flgOrKey
_flgOrKey:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flg_enter
_flg_enter:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near _remocon_buffer
_remocon_buffer:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flg_repeat
_flg_repeat:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near _remocon_repeat_count
_remocon_repeat_count:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flg_run_repeat
_flg_run_repeat:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near _flg_allow_remocon_repeat
_flg_allow_remocon_repeat:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near cnt_remocon
cnt_remocon:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// char __near bit_input
bit_input:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near _repeat_remocon
_repeat_remocon:
        DS 1

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
// unsigned char __near _repeat_data
_repeat_data:
        DS 1
	REQUIRE `?<Initializer for _repeat_data>`

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near low_bit_time
low_bit_time:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near low_start_flag
low_start_flag:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near high_bit_0
high_bit_0:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near high_bit_1
high_bit_1:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near high_start_flag
high_start_flag:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near high_repeat_flag0
high_repeat_flag0:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near high_repeat_flag1
high_repeat_flag1:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ir_error_check
ir_error_check:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc __interrupt void TIMER2_OVF_Handler()
TIMER2_OVF_Handler:
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function TIMER2_OVF_Handler
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	IN	R19,0x3F
	LDI	R16,55
	OUT	0x24,R16
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(cnt_remocon)
	LDI	R31,(cnt_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	OR	R16,R17
	BREQ	??TIMER2_OVF_Handler_0
	LDI	R30,LOW(cnt_remocon)
	LDI	R31,(cnt_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
??TIMER2_OVF_Handler_0:
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,77
	LDI	R18,4
	CPC	R17,R18
	BRCC	$+2+2
	RJMP	??TIMER2_OVF_Handler_1
	LDI	R16,0
	STS	_flg_on_remocon,R16
	LDI	R16,0
	STS	_code_remocon,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	_remocon_counter,R16
	LDI	R16,0
	STS	low_start_flag,R16
	LDI	R16,0
	STS	high_start_flag,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_0,R16
	LDI	R16,0
	STS	high_bit_1,R16
	LDI	R16,0
	STS	high_repeat_flag0,R16
	LDI	R16,0
	STS	high_repeat_flag1,R16
	LDI	R16,0
	STS	_repeat_remocon,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	ir_error_check,R16
	LDI	R16,1
	STS	rom_save_flag,R16
	LDS	R16,rom_save_flag
	TST	R16
	BRNE	??TIMER2_OVF_Handler_1
	LDI	R16,1
	STS	rom_save_flag,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(rom_tmr)
	LDI	R31,(rom_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
??TIMER2_OVF_Handler_1:
	OUT	0x3F,R19
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+5
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+4
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+3
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+2
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+1
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void IR_error()
IR_error:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function IR_error
	LDI	R16,0
	STS	_flg_on_remocon,R16
	LDI	R16,0
	STS	_code_remocon,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	_remocon_counter,R16
	LDI	R16,0
	STS	low_start_flag,R16
	LDI	R16,0
	STS	high_start_flag,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_0,R16
	LDI	R16,0
	STS	high_bit_1,R16
	LDI	R16,0
	STS	high_repeat_flag0,R16
	LDI	R16,0
	STS	high_repeat_flag1,R16
	LDI	R16,0
	STS	_repeat_remocon,R16
	LDI	R16,0
	STS	ir_error_check,R16
	RET
        CFI EndBlock cfiBlock42

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near new_repeat_flag
new_repeat_flag:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void remocon_data()
remocon_data:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function remocon_data
        FUNCALL remocon_data, audio_level_up
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, audio_level_down
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, ess_mute
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, audio_level_up
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, audio_level_down
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, channel_up
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, channel_down
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, femto_function
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, femto_function
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, IR_error
        LOCFRAME RSTACK, 2, STACK
        FUNCALL remocon_data, IR_error
        LOCFRAME RSTACK, 2, STACK
	LDS	R16,_code_remocon
	SUBI	R16,1
	BREQ	??remocon_data_0
	DEC	R16
	BREQ	??remocon_data_1
	DEC	R16
	BREQ	??remocon_data_2
	DEC	R16
	BRNE	$+2+2
	RJMP	??remocon_data_3
	RJMP	??remocon_data_4
??remocon_data_0:
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	ROL	R17
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,bit_input
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	OR	R18,R16
	OR	R19,R17
	ST	Z,R18
	STD	Z+1,R19
	RJMP	??remocon_data_4
??remocon_data_1:
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	ROL	R17
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,bit_input
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	OR	R18,R16
	OR	R19,R17
	ST	Z,R18
	STD	Z+1,R19
	RJMP	??remocon_data_4
??remocon_data_2:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	ROL	R17
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,bit_input
	LDI	R17,0
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	OR	R18,R16
	OR	R19,R17
	ST	Z,R18
	STD	Z+1,R19
	RJMP	??remocon_data_4
??remocon_data_3:
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	ROL	R17
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,bit_input
	LDI	R17,0
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	OR	R18,R16
	OR	R19,R17
	ST	Z,R18
	STD	Z+1,R19
??remocon_data_4:
	LDI	R30,LOW(_remocon_counter)
	LDI	R31,(_remocon_counter) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	LDS	R16,_remocon_counter
	CPI	R16,8
	BRCS	??remocon_data_5
	LDI	R30,LOW(_code_remocon)
	LDI	R31,(_code_remocon) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	LDI	R16,0
	STS	_remocon_counter,R16
??remocon_data_5:
	LDS	R16,_code_remocon
	CPI	R16,5
	BRCC	$+2+2
	RJMP	??remocon_data_6
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	ANDI	R16,0x0F
	ANDI	R17,0x00
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	ANDI	R16,0x0F
	ANDI	R17,0x00
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,7
	LDI	R18,0
	CPC	R17,R18
	BREQ	$+2+2
	RJMP	??remocon_data_7
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,10
	LDI	R18,0
	CPC	R17,R18
	BREQ	$+2+2
	RJMP	??remocon_data_7
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R20,Z
	LDD	R21,Z+1
	LDI	R16,255
	LDI	R17,0
	EOR	R16,R20
	EOR	R17,R21
	CP	R18,R16
	CPC	R19,R17
	BREQ	$+2+2
	RJMP	??remocon_data_8
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	STS	_repeat_data,R16
	LDS	R16,init_setting_check
	TST	R16
	BRNE	$+2+2
	RJMP	??remocon_data_9
	LDI	R30,LOW(cnt_remocon)
	LDI	R31,(cnt_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,233
	LDI	R18,3
	CPC	R17,R18
	BRCS	??remocon_data_10
	LDI	R30,LOW(cnt_remocon)
	LDI	R31,(cnt_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,220
	LDI	R18,5
	CPC	R17,R18
	BRCC	??remocon_data_10
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,128
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_11
	RCALL	audio_level_up
	RJMP	??remocon_data_10
??remocon_data_11:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,168
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_10
	RCALL	audio_level_down
??remocon_data_10:
	LDI	R16,1
	LDI	R17,0
	LDI	R30,LOW(cnt_remocon)
	LDI	R31,(cnt_remocon) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	rom_save_flag,R16
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,176
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_12
	RCALL	ess_mute
	RJMP	??remocon_data_9
??remocon_data_12:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,128
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_13
	RCALL	audio_level_up
	RJMP	??remocon_data_9
??remocon_data_13:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,168
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_14
	RCALL	audio_level_down
	RJMP	??remocon_data_9
??remocon_data_14:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,144
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_15
	RCALL	channel_up
	RJMP	??remocon_data_9
??remocon_data_15:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,136
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_16
	RCALL	channel_down
	RJMP	??remocon_data_9
??remocon_data_16:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,160
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_17
	LDS	R16,key_condition
	TST	R16
	BRNE	??remocon_data_18
	LDI	R16,1
	STS	key_func,R16
	RJMP	??remocon_data_19
??remocon_data_18:
	LDI	R16,3
	STS	key_func,R16
??remocon_data_19:
	RCALL	femto_function
	RJMP	??remocon_data_9
??remocon_data_17:
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,152
	LDI	R18,0
	CPC	R17,R18
	BRNE	??remocon_data_9
	LDS	R16,key_condition
	TST	R16
	BRNE	??remocon_data_20
	LDI	R16,2
	STS	key_func,R16
	RJMP	??remocon_data_21
??remocon_data_20:
	LDI	R16,4
	STS	key_func,R16
??remocon_data_21:
	RCALL	femto_function
??remocon_data_9:
	LDI	R16,0
	STS	new_repeat_flag,R16
	RJMP	??remocon_data_22
??remocon_data_8:
	RCALL	IR_error
	RJMP	??remocon_data_22
??remocon_data_7:
	RCALL	IR_error
??remocon_data_22:
	LDI	R16,0
	STS	_flg_on_remocon,R16
	LDI	R16,0
	STS	_code_remocon,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom_2)
	LDI	R31,(_remocon_custom_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_custom)
	LDI	R31,(_remocon_custom) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data)
	LDI	R31,(_remocon_data) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_data_2)
	LDI	R31,(_remocon_data_2) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	_remocon_counter,R16
	LDI	R16,0
	STS	low_start_flag,R16
	LDI	R16,0
	STS	high_start_flag,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_0,R16
	LDI	R16,0
	STS	high_bit_1,R16
	LDI	R16,0
	STS	high_repeat_flag0,R16
	LDI	R16,0
	STS	high_repeat_flag1,R16
	LDI	R16,0
	STS	_repeat_remocon,R16
	LDI	R16,0
	STS	ir_error_check,R16
??remocon_data_6:
	RET
        CFI EndBlock cfiBlock43

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near sp_en_cnt
sp_en_cnt:
        DS 2

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _remocon_processing()
_remocon_processing:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function _remocon_processing
        FUNCALL _remocon_processing, remocon_data
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _remocon_processing, remocon_data
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _remocon_processing, audio_level_sp_up
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _remocon_processing, audio_level_sp_down
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _remocon_processing, audio_level_up
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _remocon_processing, audio_level_down
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	LDS	R16,low_start_flag
	TST	R16
	BREQ	??_remocon_processing_0
	LDS	R16,high_start_flag
	TST	R16
	BREQ	??_remocon_processing_0
	LDS	R16,_flg_on_remocon
	TST	R16
	BREQ	$+2+2
	RJMP	??_remocon_processing_1
	LDI	R16,1
	STS	_flg_on_remocon,R16
	LDI	R16,1
	STS	_code_remocon,R16
	LDI	R16,0
	STS	_flg_repeat,R16
	LDI	R16,0
	STS	_flg_run_repeat,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_remocon_repeat_count)
	LDI	R31,(_remocon_repeat_count) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	low_start_flag,R16
	LDI	R16,0
	STS	high_start_flag,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_0,R16
	LDI	R16,0
	STS	high_bit_1,R16
	LDI	R16,0
	STS	high_repeat_flag0,R16
	LDI	R16,0
	STS	high_repeat_flag1,R16
	LDI	R16,0
	STS	_repeat_remocon,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(sp_en_cnt)
	LDI	R31,(sp_en_cnt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R16,0
	STS	ir_error_check,R16
	RJMP	??_remocon_processing_1
??_remocon_processing_0:
	LDS	R16,_flg_on_remocon
	TST	R16
	BREQ	??_remocon_processing_2
	LDS	R16,low_bit_time
	TST	R16
	BREQ	??_remocon_processing_2
	LDS	R16,high_bit_0
	TST	R16
	BREQ	??_remocon_processing_2
	LDI	R16,0
	STS	bit_input,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_0,R16
	RCALL	remocon_data
	RJMP	??_remocon_processing_1
??_remocon_processing_2:
	LDS	R16,_flg_on_remocon
	TST	R16
	BREQ	??_remocon_processing_3
	LDS	R16,low_bit_time
	TST	R16
	BREQ	??_remocon_processing_3
	LDS	R16,high_bit_1
	TST	R16
	BREQ	??_remocon_processing_3
	LDI	R16,1
	STS	bit_input,R16
	LDI	R16,0
	STS	low_bit_time,R16
	LDI	R16,0
	STS	high_bit_1,R16
	RCALL	remocon_data
	RJMP	??_remocon_processing_1
??_remocon_processing_3:
	LDS	R16,_flg_on_remocon
	TST	R16
	BRNE	??_remocon_processing_4
	LDS	R16,high_repeat_flag0
	TST	R16
	BREQ	??_remocon_processing_4
	LDI	R16,1
	STS	_repeat_remocon,R16
	LDI	R16,0
	STS	high_repeat_flag0,R16
	LDI	R30,LOW(ir_error_check)
	LDI	R31,(ir_error_check) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
	RJMP	??_remocon_processing_1
??_remocon_processing_4:
	LDS	R16,_repeat_remocon
	TST	R16
	BREQ	??_remocon_processing_1
	LDS	R16,high_repeat_flag1
	TST	R16
	BREQ	??_remocon_processing_1
	LDS	R16,init_setting_check
	TST	R16
	BREQ	??_remocon_processing_1
	LDS	R16,ir_error_check
	CPI	R16,1
	BRNE	??_remocon_processing_5
	LDI	R16,0
	STS	high_repeat_flag1,R16
	LDI	R16,0
	STS	rom_save_flag,R16
	LDI	R30,LOW(sp_en_cnt)
	LDI	R31,(sp_en_cnt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
	LDI	R26,LOW(sp_en_cnt)
	LDI	R27,(sp_en_cnt) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,3
	BRCS	??_remocon_processing_6
	LDS	R16,_repeat_data
	CPI	R16,128
	BRNE	??_remocon_processing_7
	RCALL	audio_level_sp_up
	RJMP	??_remocon_processing_1
??_remocon_processing_7:
	LDS	R16,_repeat_data
	CPI	R16,168
	BRNE	??_remocon_processing_1
	RCALL	audio_level_sp_down
	RJMP	??_remocon_processing_1
??_remocon_processing_6:
	LDS	R16,_repeat_data
	CPI	R16,128
	BRNE	??_remocon_processing_8
	RCALL	audio_level_up
	RJMP	??_remocon_processing_1
??_remocon_processing_8:
	LDS	R16,_repeat_data
	CPI	R16,168
	BRNE	??_remocon_processing_1
	RCALL	audio_level_down
	RJMP	??_remocon_processing_1
??_remocon_processing_5:
	LDI	R16,0
	STS	ir_error_check,R16
	LDI	R16,0
	STS	_repeat_data,R16
??_remocon_processing_1:
	LD	R26,Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
	LD	R27,Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock44

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near ir_error
ir_error:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc __interrupt void INT5_Handler()
INT5_Handler:
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function INT5_Handler
        FUNCALL INT5_Handler, IR_error
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT5_Handler, _remocon_processing
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -17)
        CFI CFA_Y Y+17
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -18)
        CFI CFA_Y Y+18
	IN	R24,0x3F
	IN	R25,0x3B
	SBIS	0x01,0x05
	RJMP	??INT5_Handler_0
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,4
	BRCS	??INT5_Handler_1
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,9
	BRCC	??INT5_Handler_1
	LDI	R16,1
	STS	low_bit_time,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_1:
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,55
	BRCS	??INT5_Handler_3
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,101
	LDI	R18,0
	CPC	R17,R18
	BRCC	??INT5_Handler_3
	LDI	R16,1
	STS	low_start_flag,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_3:
	LDI	R16,1
	STS	ir_error,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_0:
	SBIC	0x01,0x05
	RJMP	??INT5_Handler_2
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,4
	BRCS	??INT5_Handler_4
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,9
	BRCC	??INT5_Handler_4
	LDI	R16,1
	STS	high_bit_0,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_4:
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,9
	BRCS	??INT5_Handler_5
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,23
	BRCC	??INT5_Handler_5
	LDI	R16,1
	STS	high_bit_1,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_5:
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,40
	BRCS	??INT5_Handler_6
	LDI	R26,LOW(_counter_remocon)
	LDI	R27,(_counter_remocon) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,56
	BRCC	??INT5_Handler_6
	LDI	R16,1
	STS	high_start_flag,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_6:
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,200
	LDI	R18,0
	CPC	R17,R18
	BRCS	??INT5_Handler_7
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,145
	LDI	R18,1
	CPC	R17,R18
	BRCC	??INT5_Handler_7
	LDI	R16,1
	STS	high_repeat_flag0,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_7:
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,32
	LDI	R18,3
	CPC	R17,R18
	BRCS	??INT5_Handler_8
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,233
	LDI	R18,3
	CPC	R17,R18
	BRCC	??INT5_Handler_8
	LDI	R16,1
	STS	high_repeat_flag1,R16
	RJMP	??INT5_Handler_2
??INT5_Handler_8:
	LDI	R16,1
	STS	ir_error,R16
??INT5_Handler_2:
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(_counter_remocon)
	LDI	R31,(_counter_remocon) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,ir_error
	TST	R16
	BREQ	??INT5_Handler_9
	LDI	R16,0
	STS	ir_error,R16
	LDI	R16,0
	STS	high_repeat_flag1,R16
	RCALL	IR_error
	RJMP	??INT5_Handler_10
??INT5_Handler_9:
	RCALL	_remocon_processing
??INT5_Handler_10:
	OUT	0x3B,R25
	OUT	0x3F,R24
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+17
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+16
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+15
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+14
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+13
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+12
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+11
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+10
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+9
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+8
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+7
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+6
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+5
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+4
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+3
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+2
	LD	R26,Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
	LD	R27,Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock45

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near mtime_length
mtime_length:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near mtime_flag
mtime_flag:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _system_init()
_system_init:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function _system_init
        FUNCALL _system_init, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init, I2C_Write
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init, dot_matrix_clear
        LOCFRAME RSTACK, 2, STACK
	LDI	R16,255
	OUT	0x1A,R16
	LDI	R16,189
	OUT	0x17,R16
	LDI	R16,255
	OUT	0x14,R16
	LDI	R16,131
	OUT	0x11,R16
	LDI	R16,8
	OUT	0x02,R16
	LDI	R16,15
	STS	97,R16
	LDI	R16,31
	STS	100,R16
	LDI	R16,0
	OUT	0x1B,R16
	LDI	R16,127
	OUT	0x18,R16
	LDI	R16,255
	OUT	0x15,R16
	LDI	R16,255
	OUT	0x12,R16
	LDI	R16,255
	OUT	0x03,R16
	LDI	R16,240
	STS	98,R16
	LDI	R16,30
	STS	101,R16
	LDI	R16,3
	OUT	0x33,R16
	LDI	R16,5
	OUT	0x2E,R16
	LDI	R16,2
	OUT	0x25,R16
	LDI	R16,55
	OUT	0x24,R16
	LDI	R16,5
	OUT	0x32,R16
	LDI	R16,228
	LDI	R17,249
	OUT	0x2D,R17
	OUT	0x2C,R16
	LDI	R16,0
	OUT	0x31,R16
	LDI	R16,69
	OUT	0x37,R16
	LDI	R16,69
	OUT	0x36,R16
	LDI	R16,252
	OUT	0x39,R16
	LDI	R16,160
	STS	106,R16
	LDI	R16,85
	OUT	0x3A,R16
	LDI	R16,252
	OUT	0x38,R16
	LDI	R18,184
	LDI	R17,4
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,146
	CALL	I2C_Write
	CALL	dot_matrix_clear
	SEI
	LDI	R16,0
	RJMP	??_system_init_0
??_system_init_1:
	LDI	R18,32
	LDI	R17,0
	MOVW	R31 : R30,R17 : R16
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R18
	INC	R16
??_system_init_0:
	CPI	R16,16
	BRCS	??_system_init_1
	LDI	R16,0
	STS	ess_lch_master_trim,R16
	LDI	R16,0
	STS	ess_rch_master_trim,R16
	LDI	R16,1
	STS	tmr_osc,R16
	RET
        CFI EndBlock cfiBlock46

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near test_check
test_check:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned int __near test_check2
test_check2:
        DS 2

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_data0
init_rom_data0:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_data1
init_rom_data1:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_data2
init_rom_data2:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_add0
init_rom_add0:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_add1
init_rom_add1:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_add2
init_rom_add2:
        DS 1

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
// unsigned char __near init_rom_address_data
init_rom_address_data:
        DS 1

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void rom_check_sum_error()
rom_check_sum_error:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function rom_check_sum_error
        FUNCALL rom_check_sum_error, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL rom_check_sum_error, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	LDI	R24,10
	LDI	R25,0
??rom_check_sum_error_0:
	CPI	R24,251
	LDI	R16,7
	CPC	R25,R16
	BRCC	??rom_check_sum_error_1
	ADIW	R25 : R24,5
	MOV	R16,R24
	ANDI	R16,0x0F
	CPI	R16,15
	BRNE	??rom_check_sum_error_2
	ADIW	R25 : R24,1
??rom_check_sum_error_2:
	MOVW	R17 : R16,R25 : R24
	CALL	rom_I2C_Read
	STS	init_rom_address_data,R16
	LDS	R16,init_rom_address_data
	CPI	R16,255
	BRNE	??rom_check_sum_error_0
??rom_check_sum_error_1:
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	ST	Z,R24
	STD	Z+1,R25
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LDD	R17,Z+1
	MOV	R16,R17
	STS	init_rom_add0,R16
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	STS	init_rom_add1,R16
	LDS	R16,init_rom_add0
	LDS	R17,init_rom_add1
	ADD	R17,R16
	STS	init_rom_add2,R17
	CALL	I2C_START
	LDI	R16,160
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDS	R16,init_rom_add0
	CALL	I2C_SHOUT
	LDS	R16,init_rom_add1
	CALL	I2C_SHOUT
	LDS	R16,init_rom_add2
	CALL	I2C_SHOUT
	CALL	I2C_STOP
	LDI	R16,10
	LDI	R17,0
	CALL	DelayTime_ms
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,255
	LDI	R18,7
	CPC	R17,R18
	BRCC	??rom_check_sum_error_3
	CALL	I2C_START
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LSL	R16
	MOV	R16,R17
	ROL	R16
	ANDI	R16,0x0E
	SUBI	R16,96
	CALL	I2C_SHOUT
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,255
	CALL	I2C_SHOUT
	LDI	R16,1
	CALL	I2C_SHOUT
	CALL	I2C_STOP
	LDI	R16,10
	LDI	R17,0
	CALL	DelayTime_ms
??rom_check_sum_error_3:
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(1)
// __nearfunc void _system_init_se()
_system_init_se:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function _system_init_se
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_START
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_SHOUT
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_STOP
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_check_sum_error
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, channel_change
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, volume_set
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, phase_ess
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, DelayTime_ms
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, ess_filter
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, dot_matrix_bright
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL _system_init_se, rom_I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	LDI	R18,184
	LDI	R17,4
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,207
	LDI	R17,10
	LDI	R16,146
	CALL	I2C_Write
	LDI	R16,0
	LDI	R17,0
	CALL	rom_I2C_Read
	MOV	R24,R16
	LDI	R25,0
	CPI	R24,255
	LDI	R16,0
	CPC	R25,R16
	BRNE	??_system_init_se_0
	CALL	I2C_START
	LDI	R16,160
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,16
	CALL	I2C_SHOUT
	LDI	R16,16
	CALL	I2C_SHOUT
	CALL	I2C_STOP
	LDI	R16,5
	LDI	R17,0
	CALL	DelayTime_ms
	CALL	I2C_START
	LDI	R16,160
	CALL	I2C_SHOUT
	LDI	R16,16
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,0
	CALL	I2C_SHOUT
	LDI	R16,255
	CALL	I2C_SHOUT
	LDI	R16,1
	CALL	I2C_SHOUT
	CALL	I2C_STOP
	LDI	R16,5
	LDI	R17,0
	CALL	DelayTime_ms
??_system_init_se_0:
	LDI	R16,0
	LDI	R17,0
	CALL	rom_I2C_Read
	STS	init_rom_data0,R16
	LDI	R16,1
	LDI	R17,0
	CALL	rom_I2C_Read
	STS	init_rom_data1,R16
	LDI	R16,2
	LDI	R17,0
	CALL	rom_I2C_Read
	STS	init_rom_data2,R16
	LDS	R16,init_rom_data0
	LDS	R17,init_rom_data1
	ADD	R17,R16
	STS	rom_add_check_sum,R17
	LDS	R16,rom_add_check_sum
	LDS	R17,init_rom_data2
	CP	R16,R17
	BREQ	??_system_init_se_1
	RCALL	rom_check_sum_error
	RJMP	??_system_init_se_2
??_system_init_se_1:
	LDS	R16,init_rom_data0
	LDI	R17,0
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	MOV	R17,R16
	LDI	R16,0
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDS	R16,init_rom_data1
	LDI	R17,0
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	ADD	R18,R16
	ADC	R19,R17
	ST	Z,R18
	STD	Z+1,R19
??_system_init_se_2:
	LDI	R30,LOW(test_check)
	LDI	R31,(test_check) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,255
	LDI	R18,7
	CPC	R17,R18
	BRCS	$+2+2
	RJMP	??_system_init_se_3
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CALL	rom_I2C_Read
	LDI	R17,0
	LDI	R18,0
	LDI	R19,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	STD	Z+2,R18
	STD	Z+3,R19
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDD	R18,Z+2
	MOV	R19,R18
	MOV	R18,R17
	MOV	R17,R16
	LDI	R16,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	STD	Z+2,R18
	STD	Z+3,R19
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	CALL	rom_I2C_Read
	LDI	R17,0
	LDI	R18,0
	LDI	R19,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R20,Z
	LDD	R21,Z+1
	LDD	R22,Z+2
	LDD	R23,Z+3
	ADD	R20,R16
	ADC	R21,R17
	ADC	R22,R18
	ADC	R23,R19
	ST	Z,R20
	STD	Z+1,R21
	STD	Z+2,R22
	STD	Z+3,R23
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDD	R18,Z+2
	MOV	R19,R18
	MOV	R18,R17
	MOV	R17,R16
	LDI	R16,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	ST	Z,R16
	STD	Z+1,R17
	STD	Z+2,R18
	STD	Z+3,R19
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,254
	SBCI	R17,255
	CALL	rom_I2C_Read
	LDI	R17,0
	LDI	R18,0
	LDI	R19,0
	LDI	R30,LOW(rom_cnt)
	LDI	R31,(rom_cnt) >> 8
	LD	R20,Z
	LDD	R21,Z+1
	LDD	R22,Z+2
	LDD	R23,Z+3
	ADD	R20,R16
	ADC	R21,R17
	ADC	R22,R18
	ADC	R23,R19
	ST	Z,R20
	STD	Z+1,R21
	STD	Z+2,R22
	STD	Z+3,R23
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,253
	SBCI	R17,255
	CALL	rom_I2C_Read
	STS	vol_dB,R16
	LDI	R30,LOW(rom_add_pt)
	LDI	R31,(rom_add_pt) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,252
	SBCI	R17,255
	CALL	rom_I2C_Read
	MOV	R24,R16
	LDI	R25,0
	CPI	R24,128
	LDI	R16,0
	CPC	R25,R16
	BRCC	??_system_init_se_4
	MOV	R16,R24
	SWAP	R16
	ANDI	R16,0x0F
	STS	ch_led_data,R16
	MOV	R16,R24
	LSR	R16
	ANDI	R16,0x07
	STS	filter_flag,R16
	MOV	R16,R24
	ANDI	R16,0x01
	STS	phase_data,R16
	RJMP	??_system_init_se_5
??_system_init_se_4:
	LDI	R16,255
	STS	vol_dB,R16
	LDI	R16,0
	STS	ch_led_data,R16
	LDI	R16,0
	STS	filter_flag,R16
	LDI	R16,1
	STS	phase_data,R16
	RJMP	??_system_init_se_5
??_system_init_se_3:
	LDI	R16,255
	STS	vol_dB,R16
	LDI	R16,0
	STS	ch_led_data,R16
	LDI	R16,0
	STS	filter_flag,R16
	LDI	R16,1
	STS	phase_data,R16
??_system_init_se_5:
	LDI	R18,0
	LDI	R17,0
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,132
	LDI	R17,1
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,9
	LDI	R17,2
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,80
	LDI	R17,3
	LDI	R16,32
	CALL	I2C_Write
	RCALL	channel_change
	LDI	R18,133
	LDI	R17,5
	LDI	R16,32
	CALL	I2C_Write
	LDI	R18,157
	LDI	R17,11
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,32
	LDI	R17,12
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,0
	LDI	R17,15
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,29
	LDI	R17,17
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,1
	LDI	R17,25
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,157
	LDI	R17,11
	LDI	R16,146
	CALL	I2C_Write
	LDI	R18,32
	LDI	R17,12
	LDI	R16,146
	CALL	I2C_Write
	LDI	R18,0
	LDI	R17,15
	LDI	R16,146
	CALL	I2C_Write
	LDI	R18,157
	LDI	R17,17
	LDI	R16,146
	CALL	I2C_Write
	LDI	R18,1
	LDI	R17,25
	LDI	R16,146
	CALL	I2C_Write
	LDI	R18,120
	LDI	R17,8
	LDI	R16,144
	CALL	I2C_Write
	LDI	R18,120
	LDI	R17,8
	LDI	R16,146
	CALL	I2C_Write
	CALL	volume_set
	LDI	R16,10
	LDI	R17,0
	CALL	DelayTime_ms
	CALL	phase_ess
	LDI	R16,10
	LDI	R17,0
	CALL	DelayTime_ms
	RCALL	ess_filter
	SBI	0x12,0x07
	LDI	R16,1
	STS	dot_light_reg,R16
	LDS	R16,101
	ORI	R16,0x01
	STS	101,R16
	LDI	R16,3
	CALL	dot_matrix_bright
	SBI	0x18,0x07
	LDI	R24,0
	LDI	R25,0
	RJMP	??_system_init_se_6
??_system_init_se_7:
	MOVW	R17 : R16,R25 : R24
	CALL	rom_I2C_Read
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(test_eeprom) & 0xFFFF))
	SBCI	R31,(-(test_eeprom) & 0xFFFF) >> 8
	ST	Z,R16
	ADIW	R25 : R24,1
??_system_init_se_6:
	CPI	R24,32
	LDI	R16,0
	CPC	R25,R16
	BRCS	??_system_init_se_7
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock48
//    8 
//    9 ///////////////////////////////////////////////////////////////////////////////

        RSEG CODE:CODE:NOROOT(1)
//   10 void sample_rate_cal(){
sample_rate_cal:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function sample_rate_cal
        FUNCALL sample_rate_cal, I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL sample_rate_cal, I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL sample_rate_cal, I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL sample_rate_cal, I2C_Read
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL sample_rate_cal, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL sample_rate_cal, I2C_Write
        LOCFRAME CSTACK, 2, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
//   11   U8 i,temp;
//   12   
//   13   //if ( (old_ess_lock_ck!=ess_lock_ck) || (old_ess_automute!=ess_automute) ) {
//   14     
//   15     //if (old_ess_lock_ck!=ess_lock_ck) old_ess_lock_ck=ess_lock_ck;
//   16     //if (old_ess_automute!=ess_automute) old_ess_automute=ess_automute;
//   17   
//   18     if( ( (ch_led_data!=7) && ess_lock_ck) || (ess_lock_ck && !ess_automute) ) {
	LDS	R16,ch_led_data
	CPI	R16,7
	BREQ	??sample_rate_cal_0
	LDS	R16,ess_lock_ck
	TST	R16
	BRNE	??sample_rate_cal_1
??sample_rate_cal_0:
	LDS	R16,ess_lock_ck
	TST	R16
	BRNE	$+2+2
	RJMP	??sample_rate_cal_2
	LDS	R16,ess_automute
	TST	R16
	BREQ	$+2+2
	RJMP	??sample_rate_cal_2
//   19        sample_rate=I2C_Read(0x90, 31);
??sample_rate_cal_1:
	LDI	R17,31
	LDI	R16,144
	CALL	I2C_Read
	LDI	R17,0
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	ST	Z,R16
	STD	Z+1,R17
//   20        sample_rate<<=8;
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	MOV	R17,R16
	LDI	R16,0
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	ST	Z,R16
	STD	Z+1,R17
//   21        sample_rate+=I2C_Read(0x90, 30);
	LDI	R17,30
	LDI	R16,144
	CALL	I2C_Read
	LDI	R17,0
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	ADD	R18,R16
	ADC	R19,R17
	ST	Z,R18
	STD	Z+1,R19
//   22        sample_rate2=I2C_Read(0x92, 31);
	LDI	R17,31
	LDI	R16,146
	CALL	I2C_Read
	LDI	R17,0
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	ST	Z,R16
	STD	Z+1,R17
//   23        sample_rate2<<=8;
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	MOV	R17,R16
	LDI	R16,0
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	ST	Z,R16
	STD	Z+1,R17
//   24        sample_rate2+=I2C_Read(0x92, 30);
	LDI	R17,30
	LDI	R16,146
	CALL	I2C_Read
	LDI	R17,0
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	ADD	R18,R16
	ADC	R19,R17
	ST	Z,R18
	STD	Z+1,R19
//   25     
//   26         //0=44.1kHz,    1=48kHz,    2=88.2kHz,    3=96kHz,    4=176.4kHz,   5=196kHz
//   27   
//   28         //192kHz
//   29         if( (sample_rate>min192 && sample_rate<max192) || (sample_rate2>min192 && sample_rate2<max192) )	sr_led_data=5;
	LDI	R30,LOW(min192)
	LDI	R31,(min192) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_3
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max192)
	LDI	R31,(max192) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_4
??sample_rate_cal_3:
	LDI	R30,LOW(min192)
	LDI	R31,(min192) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_5
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max192)
	LDI	R31,(max192) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_5
??sample_rate_cal_4:
	LDI	R16,5
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   30     
//   31         //176.4kHz
//   32         else if( (sample_rate>min176 && sample_rate<max176) || (sample_rate2>min176 && sample_rate2<max176) )	sr_led_data=4;
??sample_rate_cal_5:
	LDI	R30,LOW(min176)
	LDI	R31,(min176) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_7
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max176)
	LDI	R31,(max176) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_8
??sample_rate_cal_7:
	LDI	R30,LOW(min176)
	LDI	R31,(min176) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_9
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max176)
	LDI	R31,(max176) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_9
??sample_rate_cal_8:
	LDI	R16,4
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   33         
//   34         //96kHz
//   35         else if( (sample_rate>min96 && sample_rate<max96) || (sample_rate2>min96 && sample_rate2<max96) )	sr_led_data=3;
??sample_rate_cal_9:
	LDI	R30,LOW(min96)
	LDI	R31,(min96) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_10
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max96)
	LDI	R31,(max96) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_11
??sample_rate_cal_10:
	LDI	R30,LOW(min96)
	LDI	R31,(min96) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_12
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max96)
	LDI	R31,(max96) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_12
??sample_rate_cal_11:
	LDI	R16,3
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   36     
//   37         //88.2kHz
//   38         else if( (sample_rate>min88 && sample_rate<max88) || (sample_rate2>min88 && sample_rate2<max88) )	sr_led_data=2;
??sample_rate_cal_12:
	LDI	R30,LOW(min88)
	LDI	R31,(min88) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_13
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max88)
	LDI	R31,(max88) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_14
??sample_rate_cal_13:
	LDI	R30,LOW(min88)
	LDI	R31,(min88) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_15
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max88)
	LDI	R31,(max88) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_15
??sample_rate_cal_14:
	LDI	R16,2
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   39     
//   40         //48kHz
//   41         else if( (sample_rate>min48 && sample_rate<max48) || (sample_rate2>min48 && sample_rate2<max48) )	sr_led_data=1;
??sample_rate_cal_15:
	LDI	R30,LOW(min48)
	LDI	R31,(min48) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_16
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max48)
	LDI	R31,(max48) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_17
??sample_rate_cal_16:
	LDI	R30,LOW(min48)
	LDI	R31,(min48) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_18
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max48)
	LDI	R31,(max48) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_18
??sample_rate_cal_17:
	LDI	R16,1
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   42     
//   43         //44.1kHz
//   44         else if( (sample_rate>min44 && sample_rate<max44) || (sample_rate2>min44 && sample_rate2<max44) )	sr_led_data=0;
??sample_rate_cal_18:
	LDI	R30,LOW(min44)
	LDI	R31,(min44) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_19
	LDI	R30,LOW(sample_rate)
	LDI	R31,(sample_rate) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max44)
	LDI	R31,(max44) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCS	??sample_rate_cal_20
??sample_rate_cal_19:
	LDI	R30,LOW(min44)
	LDI	R31,(min44) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_21
	LDI	R30,LOW(sample_rate2)
	LDI	R31,(sample_rate2) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	LDI	R30,LOW(max44)
	LDI	R31,(max44) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	CP	R16,R18
	CPC	R17,R19
	BRCC	??sample_rate_cal_21
??sample_rate_cal_20:
	LDI	R16,0
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   45     
//   46         else sr_led_data=6;	//sr led off
??sample_rate_cal_21:
	LDI	R16,6
	STS	sr_led_data,R16
	RJMP	??sample_rate_cal_6
//   47     }
//   48     else sr_led_data=6;	//sr led off
??sample_rate_cal_2:
	LDI	R16,6
	STS	sr_led_data,R16
//   49   //}
//   50   
//   51   
//   52   if(sr_led_data==6){
??sample_rate_cal_6:
	LDS	R16,sr_led_data
	CPI	R16,6
	BRNE	??sample_rate_cal_22
//   53     exMute=1;
	LDI	R16,1
	STS	exMute,R16
	RJMP	??sample_rate_cal_23
//   54   }
//   55   else exMute=0;
??sample_rate_cal_22:
	LDI	R16,0
	STS	exMute,R16
//   56  
//   57   if(exMute!=old_exMute) {
??sample_rate_cal_23:
	LDS	R16,exMute
	LDS	R17,old_exMute
	CP	R16,R17
	BREQ	??sample_rate_cal_24
//   58     old_exMute=exMute;
	LDS	R16,exMute
	STS	old_exMute,R16
//   59    
//   60     if(!old_exMute) temp=vol_dB;
	LDS	R16,old_exMute
	TST	R16
	BRNE	??sample_rate_cal_25
	LDS	R25,vol_dB
	RJMP	??sample_rate_cal_26
//   61     else temp=224;    //-114dB
??sample_rate_cal_25:
	LDI	R25,224
//   62       
//   63     for(i=0; i<8; i++){
??sample_rate_cal_26:
	LDI	R24,0
	RJMP	??sample_rate_cal_27
//   64       I2C_Write(0x90,i,temp);	//Lch volume of DAC0
??sample_rate_cal_28:
	MOV	R18,R25
	MOV	R17,R24
	LDI	R16,144
	CALL	I2C_Write
//   65       I2C_Write(0x92,i,temp);	//Rch volume of DAC0
	MOV	R18,R25
	MOV	R17,R24
	LDI	R16,146
	CALL	I2C_Write
//   66     }
	INC	R24
??sample_rate_cal_27:
	CPI	R24,8
	BRCS	??sample_rate_cal_28
//   67   }
//   68   
//   69 }
??sample_rate_cal_24:
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock49
//   70 
//   71 
//   72 
//   73 //ES9018 Automute check
//   74 //Any logical change
//   75 //active L : unmute, sample rate on
//   76 //active H : mute,  sample rate off
//   77 #pragma vector = INT7_vect

        RSEG CODE:CODE:NOROOT(1)
//   78 __interrupt void INT7_Handler(void)
INT7_Handler:
        CFI Block cfiBlock50 Using cfiCommon1
        CFI Function INT7_Handler
//   79 {
        FUNCALL INT7_Handler, sample_rate_cal
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	IN	R24,0x3F
	IN	R25,0x3B
//   80  if(tmr_osc_ck){
	LDS	R16,tmr_osc_ck
	TST	R16
	BREQ	??INT7_Handler_0
//   81   if(AUTOMUTE) ess_automute=1; 			//mute,  sample rate off
	SBIS	0x01,0x07
	RJMP	??INT7_Handler_1
	LDI	R16,1
	STS	ess_automute,R16
	RJMP	??INT7_Handler_2
//   82   else ess_automute=0;            	                            //unmute, sample rate on
??INT7_Handler_1:
	LDI	R16,0
	STS	ess_automute,R16
//   83   
//   84   sample_rate_cal();
??INT7_Handler_2:
	RCALL	sample_rate_cal
//   85  }
//   86 }
??INT7_Handler_0:
	OUT	0x3B,R25
	OUT	0x3F,R24
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+15
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+14
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+13
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+12
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+11
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+10
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+9
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+8
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+7
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+6
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+5
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+4
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+3
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+2
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock50
//   87 
//   88 
//   89 //ESS LOCK-Lch
//   90 //Any logical change
//   91 //high : lock,		low : unlock
//   92 #pragma vector = INT6_vect

        RSEG CODE:CODE:NOROOT(1)
//   93 __interrupt void INT6_Handler(void)
INT6_Handler:
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function INT6_Handler
//   94 {
        FUNCALL INT6_Handler, sample_rate_cal
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	IN	R24,0x3F
	IN	R25,0x3B
//   95  if(tmr_osc_ck){
	LDS	R16,tmr_osc_ck
	TST	R16
	BREQ	??INT6_Handler_0
//   96   if(ESS_LOCK) ess_lock_ck=1;
	SBIS	0x01,0x06
	RJMP	??INT6_Handler_1
	LDI	R16,1
	STS	ess_lock_ck,R16
	RJMP	??INT6_Handler_2
//   97   else ess_lock_ck=0;
??INT6_Handler_1:
	LDI	R16,0
	STS	ess_lock_ck,R16
//   98   
//   99   sample_rate_cal();
??INT6_Handler_2:
	RCALL	sample_rate_cal
//  100  }
//  101 }
??INT6_Handler_0:
	OUT	0x3B,R25
	OUT	0x3F,R24
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+15
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+14
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+13
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+12
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+11
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+10
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+9
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+8
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+7
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+6
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+5
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+4
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+3
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+2
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock51
//  102 /*
//  103 U8 non_audio_check=0;
//  104 //U8 old_non_audio=0;
//  105 U8 non_audio_tmr=0;
//  106 //Non_audio check
//  107 //Any logical change
//  108 //high : non_audio -> sdout: muted,		low : audio -> sdout : not muted
//  109 #pragma vector = INT4_vect
//  110 __interrupt void INT4_Handler(void)
//  111 {
//  112   U8 temp;
//  113   non_audio_check=1;
//  114   non_audio_tmr=0;
//  115   
//  116   temp=I2C_Read(0x20, 0x0b);
//  117   if((temp&0x20)==0x20) I2C_Write(0x20, 0x01, 0xc4);    //muted
//  118   else I2C_Write(0x20, 0x01, 0x84);    //not muted
//  119   //if(PINE_Bit4) old_non_audio=1;
//  120   //else I2C_Write(0x20, 0x01, 0x84);    //not muted
//  121 }
//  122 */
//  123 
//  124 //Button Key
//  125 // falling edge
//  126 #pragma vector = INT3_vect

        RSEG CODE:CODE:NOROOT(1)
//  127 __interrupt void INT3_Handler(void)
INT3_Handler:
        CFI Block cfiBlock52 Using cfiCommon1
        CFI Function INT3_Handler
//  128 {
        FUNCALL INT3_Handler, channel_down
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, audio_level_up
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, ess_mute
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, channel_up
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, audio_level_down
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, femto_function
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL INT3_Handler, femto_function
        LOCFRAME CSTACK, 15, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	IN	R24,0x3F
	IN	R25,0x3B
//  129   U8 data=0;
//  130   
//  131   key_int_flag=0;
	LDI	R17,0
	STS	key_int_flag,R17
//  132   data=KEY_DATA2;
	LDI	R17,0
	SBIC	0x10,0x06
	INC	R17
??INT3_Handler_0:
	MOV	R16,R17
//  133   data<<=1;
	LSL	R16
//  134   data+=KEY_DATA1;
	LDI	R17,0
	SBIC	0x10,0x05
	INC	R17
??INT3_Handler_1:
	ADD	R16,R17
//  135   data<<=1;
	LSL	R16
//  136   data+=KEY_DATA0;
	LDI	R17,0
	SBIC	0x10,0x04
	INC	R17
??INT3_Handler_2:
	ADD	R16,R17
//  137   
//  138   // data =1 : ch-dn,   2: vol-up,  3 : mute,   4 : ch-up,  5 : vol-dn,   6 : inverse,  7 : filter
//  139   if(tmr_osc_ck){
	LDS	R17,tmr_osc_ck
	TST	R17
	BREQ	??INT3_Handler_3
//  140     //channel down
//  141     if(data==1){
	CPI	R16,1
	BRNE	??INT3_Handler_4
//  142       channel_down();
	CALL	channel_down
	RJMP	??INT3_Handler_5
//  143     }
//  144   
//  145     //volume up
//  146     else if(data==2) {
??INT3_Handler_4:
	CPI	R16,2
	BRNE	??INT3_Handler_6
//  147       audio_level_up();                            //Master Volume Up
	CALL	audio_level_up
	RJMP	??INT3_Handler_5
//  148     }
//  149   
//  150     //mute
//  151     else if(data==3){
??INT3_Handler_6:
	CPI	R16,3
	BRNE	??INT3_Handler_7
//  152       ess_mute();	//mute
	CALL	ess_mute
	RJMP	??INT3_Handler_5
//  153     }
//  154   
//  155     //channel up
//  156     else if(data==4){
??INT3_Handler_7:
	CPI	R16,4
	BRNE	??INT3_Handler_8
//  157       channel_up();
	CALL	channel_up
	RJMP	??INT3_Handler_5
//  158     }
//  159   
//  160     //volume down
//  161     else if(data==5){
??INT3_Handler_8:
	CPI	R16,5
	BRNE	??INT3_Handler_9
//  162       audio_level_down();                        //Master Volume Down
	CALL	audio_level_down
	RJMP	??INT3_Handler_5
//  163     }
//  164   
//  165     //inverse
//  166     else if(data==6){
??INT3_Handler_9:
	CPI	R16,6
	BRNE	??INT3_Handler_10
//  167       if(!key_condition) key_func=1;
	LDS	R16,key_condition
	TST	R16
	BRNE	??INT3_Handler_11
	LDI	R16,1
	STS	key_func,R16
	RJMP	??INT3_Handler_12
//  168       else key_func=3;
??INT3_Handler_11:
	LDI	R16,3
	STS	key_func,R16
//  169       femto_function();
??INT3_Handler_12:
	CALL	femto_function
	RJMP	??INT3_Handler_5
//  170       //phase_write();	//phase
//  171       //phase_ess();
//  172     }
//  173   
//  174     //filter
//  175     else if(data==7){
??INT3_Handler_10:
	CPI	R16,7
	BRNE	??INT3_Handler_5
//  176       if(!key_condition) key_func=2;
	LDS	R16,key_condition
	TST	R16
	BRNE	??INT3_Handler_13
	LDI	R16,2
	STS	key_func,R16
	RJMP	??INT3_Handler_14
//  177       else key_func=4;
??INT3_Handler_13:
	LDI	R16,4
	STS	key_func,R16
//  178       femto_function();
??INT3_Handler_14:
	CALL	femto_function
//  179       //filter_led<<=1;
//  180       //if(filter_led>0x04)  filter_led=1;	//filter1
//  181       //ess_filter(filter_led);
//  182     }
//  183     key_int_flag=1;
??INT3_Handler_5:
	LDI	R16,1
	STS	key_int_flag,R16
//  184   }
//  185 }
??INT3_Handler_3:
	OUT	0x3B,R25
	OUT	0x3F,R24
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+15
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+14
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+13
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+12
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+11
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+10
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+9
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+8
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+7
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+6
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+5
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+4
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+3
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+2
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+1
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock52
//  186 /*
//  187 //if(PINB_Bit6==0) PORTB_Bit7=0;       //Analog Power Disable
//  188  #pragma vector = INT2_vect
//  189 __interrupt void INT2_Handler(void)
//  190 {
//  191   PORTB_Bit7=0;       //Analog Power Disable
//  192 }
//  193 */
//  194 ///////////////////////////////////////////////////////////////////////////////
//  195 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//  196 U16 led_tmr=0;
led_tmr:
        DS 2

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
//  197 U8 init_sr_led=1;
init_sr_led:
        DS 1
	REQUIRE `?<Initializer for init_sr_led>`
//  198 
//  199 #pragma vector = TIMER0_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//  200 __interrupt void TIMER0_OVF_Handler(void)
TIMER0_OVF_Handler:
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function TIMER0_OVF_Handler
//  201 {
        FUNCALL TIMER0_OVF_Handler, dot_string_digit
        LOCFRAME CSTACK, 19, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER0_OVF_Handler, sample_rate_cal
        LOCFRAME CSTACK, 19, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R5
        CFI R5 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R4
        CFI R4 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R27
        CFI R27 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R26
        CFI R26 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -17)
        CFI CFA_Y Y+17
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -18)
        CFI CFA_Y Y+18
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -19)
        CFI CFA_Y Y+19
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -20)
        CFI CFA_Y Y+20
	IN	R4,0x3F
	IN	R5,0x3B
	REQUIRE	?Register_R4_is_cg_reg
	REQUIRE	?Register_R5_is_cg_reg
//  202   U8 i;
//  203   
//  204   TCNT0=255-250; //500usec 
	LDI	R16,5
	OUT	0x32,R16
//  205   // 16MHz / 32prescaling = 500kHz
//  206   // T= 1 / 500kHz = 2usec
//  207   // 2usec X 250 = 500usec
//  208   
//  209   Time_500us++;  
	LDI	R30,LOW(Time_500us)
	LDI	R31,(Time_500us) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
//  210  // if(mtime_flag) mtime_length++;
//  211   
//  212   if(tmr_osc_ck){
	LDS	R16,tmr_osc_ck
	TST	R16
	BRNE	$+2+2
	RJMP	??TIMER0_OVF_Handler_0
//  213     if(key_func){   //filter or inverse f();  
	LDS	R16,key_func
	TST	R16
	BREQ	??TIMER0_OVF_Handler_1
//  214       if(key_func_tmr>6000) { key_func=0; key_condition=0; }
	LDI	R30,LOW(key_func_tmr)
	LDI	R31,(key_func_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,113
	LDI	R18,23
	CPC	R17,R18
	BRCS	??TIMER0_OVF_Handler_2
	LDI	R16,0
	STS	key_func,R16
	LDI	R16,0
	STS	key_condition,R16
//  215       
//  216       key_func_tmr++;
??TIMER0_OVF_Handler_2:
	LDI	R30,LOW(key_func_tmr)
	LDI	R31,(key_func_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
	RJMP	??TIMER0_OVF_Handler_0
//  217     }
//  218     
//  219     else {         // channel and sample rate, volume
//  220       if(led_tmr==200){   //0.1sec      
??TIMER0_OVF_Handler_1:
	LDI	R30,LOW(led_tmr)
	LDI	R31,(led_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,200
	LDI	R18,0
	CPC	R17,R18
	BREQ	$+2+2
	RJMP	??TIMER0_OVF_Handler_3
//  221         for(i=0; i<16; i++){
	LDI	R24,0
	RJMP	??TIMER0_OVF_Handler_4
//  222           if(i<6) dot_string[i]=ch_name[ch_led_data][i];
//  223           else if(i<12) dot_string[i]=sr_name[sr_led_data][i-6];
//  224           else  dot_string[i]=ess_volume[i-12];
??TIMER0_OVF_Handler_5:
	MOV	R26,R24
	LDI	R27,0
	SBIW	R27 : R26,12
	MOVW	R31 : R30,R27 : R26
	SUBI	R30,LOW((-(ess_volume) & 0xFFFF))
	SBCI	R31,(-(ess_volume) & 0xFFFF) >> 8
	LD	R16,Z
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
??TIMER0_OVF_Handler_6:
	INC	R24
??TIMER0_OVF_Handler_4:
	CPI	R24,16
	BRCC	??TIMER0_OVF_Handler_7
	CPI	R24,6
	BRCC	??TIMER0_OVF_Handler_8
	LDI	R26,LOW(ch_name)
	LDI	R27,(ch_name) >> 8
	LDS	R20,ch_led_data
	LDI	R21,0
	LDI	R16,6
	LDI	R17,0
	CALL	?S_EC_MUL_L02
	ADD	R26,R16
	ADC	R27,R17
	LDI	R25,0
	ADD	R26,R24
	ADC	R27,R25
	LD	R16,X
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
	RJMP	??TIMER0_OVF_Handler_6
??TIMER0_OVF_Handler_8:
	CPI	R24,12
	BRCC	??TIMER0_OVF_Handler_5
	LDI	R26,LOW(sr_name)
	LDI	R27,(sr_name) >> 8
	LDS	R20,sr_led_data
	LDI	R21,0
	LDI	R16,6
	LDI	R17,0
	CALL	?S_EC_MUL_L02
	ADD	R26,R16
	ADC	R27,R17
	MOV	R16,R24
	LDI	R17,0
	SUBI	R16,6
	SBCI	R17,0
	ADD	R26,R16
	ADC	R27,R17
	LD	R16,X
	LDI	R25,0
	MOVW	R31 : R30,R25 : R24
	SUBI	R30,LOW((-(dot_string) & 0xFFFF))
	SBCI	R31,(-(dot_string) & 0xFFFF) >> 8
	ST	Z,R16
	RJMP	??TIMER0_OVF_Handler_6
//  225         }
//  226         dot_string_digit();
??TIMER0_OVF_Handler_7:
	CALL	dot_string_digit
	RJMP	??TIMER0_OVF_Handler_9
//  227         //for(i=0; i<5; i++)        dot_matrix_digit ( ch_name[ch_led_data][i],i ); 
//  228         //dot_vol_hextodeci(vol_dB);
//  229       }
//  230       
//  231       else if(led_tmr==800){  //sample rate,  0.4sec
??TIMER0_OVF_Handler_3:
	LDI	R30,LOW(led_tmr)
	LDI	R31,(led_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	CPI	R16,32
	LDI	R18,3
	CPC	R17,R18
	BRNE	??TIMER0_OVF_Handler_9
//  232         old_ess_automute=ess_automute;
	LDS	R16,ess_automute
	STS	old_ess_automute,R16
//  233         old_ess_lock_ck=ess_lock_ck;
	LDS	R16,ess_lock_ck
	STS	old_ess_lock_ck,R16
//  234         
//  235         if(AUTOMUTE) ess_automute=1; 			//mute,  sample rate off
	SBIS	0x01,0x07
	RJMP	??TIMER0_OVF_Handler_10
	LDI	R16,1
	STS	ess_automute,R16
	RJMP	??TIMER0_OVF_Handler_11
//  236         else ess_automute=0;            	                            //unmute, sample rate on
??TIMER0_OVF_Handler_10:
	LDI	R16,0
	STS	ess_automute,R16
//  237       
//  238         if(ESS_LOCK) ess_lock_ck=1;
??TIMER0_OVF_Handler_11:
	SBIS	0x01,0x06
	RJMP	??TIMER0_OVF_Handler_12
	LDI	R16,1
	STS	ess_lock_ck,R16
	RJMP	??TIMER0_OVF_Handler_13
//  239         else ess_lock_ck=0;
??TIMER0_OVF_Handler_12:
	LDI	R16,0
	STS	ess_lock_ck,R16
//  240       
//  241         if( (old_ess_automute!=ess_automute) || (old_ess_lock_ck!= ess_lock_ck))  sample_rate_cal();
??TIMER0_OVF_Handler_13:
	LDS	R16,old_ess_automute
	LDS	R17,ess_automute
	CP	R16,R17
	BRNE	??TIMER0_OVF_Handler_14
	LDS	R16,old_ess_lock_ck
	LDS	R17,ess_lock_ck
	CP	R16,R17
	BREQ	??TIMER0_OVF_Handler_15
??TIMER0_OVF_Handler_14:
	RCALL	sample_rate_cal
//  242         
//  243         //for(i=0; i<2; i++)       dot_matrix_digit ( sr_name[sr_led_data][i],i+6 );
//  244         //for(i=2; i<5; i++)       dot_matrix_digit2 ( sr_name[sr_led_data][i],i-2 );
//  245       
//  246         led_tmr=0;
??TIMER0_OVF_Handler_15:
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(led_tmr)
	LDI	R31,(led_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
//  247       }
//  248       led_tmr++;  
??TIMER0_OVF_Handler_9:
	LDI	R30,LOW(led_tmr)
	LDI	R31,(led_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
//  249     }// end else 
//  250    
//  251     
//  252   }
//  253 }
??TIMER0_OVF_Handler_0:
	OUT	0x3B,R5
	OUT	0x3F,R4
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+19
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+18
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+17
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+16
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+15
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+14
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+13
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+12
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+11
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+10
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+9
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+8
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+7
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+6
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+5
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+4
	LD	R26,Y+
        CFI R26 SameValue
        CFI CFA_Y Y+3
	LD	R27,Y+
        CFI R27 SameValue
        CFI CFA_Y Y+2
	LD	R4,Y+
        CFI R4 SameValue
        CFI CFA_Y Y+1
	LD	R5,Y+
        CFI R5 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock53

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
//  254 U8 tmr_flag_ck=1;
tmr_flag_ck:
        DS 1
	REQUIRE `?<Initializer for tmr_flag_ck>`
//  255 //Board Timer
//  256 #pragma vector = TIMER1_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//  257 __interrupt void TIMER1_OVF_Handler(void)
TIMER1_OVF_Handler:
        CFI Block cfiBlock54 Using cfiCommon1
        CFI Function TIMER1_OVF_Handler
//  258 {
        FUNCALL TIMER1_OVF_Handler, _system_init_se
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, I2C_Write
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, I2C_Write
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, init_vol_dn
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, DelayTime_ms
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, init_vol
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, dot_vol_hextodeci
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, audio_level_up
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL TIMER1_OVF_Handler, audio_level_down
        LOCFRAME CSTACK, 17, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R27
        CFI R27 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	ST	-Y,R26
        CFI R26 Frame(CFA_Y, -2)
        CFI CFA_Y Y+2
	ST	-Y,R25
        CFI R25 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	ST	-Y,R31
        CFI R31 Frame(CFA_Y, -5)
        CFI CFA_Y Y+5
	ST	-Y,R30
        CFI R30 Frame(CFA_Y, -6)
        CFI CFA_Y Y+6
	ST	-Y,R3
        CFI R3 Frame(CFA_Y, -7)
        CFI CFA_Y Y+7
	ST	-Y,R2
        CFI R2 Frame(CFA_Y, -8)
        CFI CFA_Y Y+8
	ST	-Y,R1
        CFI R1 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	ST	-Y,R0
        CFI R0 Frame(CFA_Y, -10)
        CFI CFA_Y Y+10
	ST	-Y,R23
        CFI R23 Frame(CFA_Y, -11)
        CFI CFA_Y Y+11
	ST	-Y,R22
        CFI R22 Frame(CFA_Y, -12)
        CFI CFA_Y Y+12
	ST	-Y,R21
        CFI R21 Frame(CFA_Y, -13)
        CFI CFA_Y Y+13
	ST	-Y,R20
        CFI R20 Frame(CFA_Y, -14)
        CFI CFA_Y Y+14
	ST	-Y,R19
        CFI R19 Frame(CFA_Y, -15)
        CFI CFA_Y Y+15
	ST	-Y,R18
        CFI R18 Frame(CFA_Y, -16)
        CFI CFA_Y Y+16
	ST	-Y,R17
        CFI R17 Frame(CFA_Y, -17)
        CFI CFA_Y Y+17
	ST	-Y,R16
        CFI R16 Frame(CFA_Y, -18)
        CFI CFA_Y Y+18
	IN	R24,0x3F
	IN	R25,0x3B
//  259 U8 data=0;
//  260 //U16 temp;
//  261   //TCNT1=0xffff-1563; //0.1sec 
//  262   TCNT1=0xffff-781; //0.05sec 
	LDI	R16,242
	LDI	R17,252
	OUT	0x2D,R17
	OUT	0x2C,R16
//  263   // 16MHz / 1024precaling = 15.625kHz
//  264   // T= 1 / 15.625Hz = 64usec
//  265   // 64usec X 1563 = 0.1sec
//  266   // 64usec X 781 = 50msec
//  267   
//  268   //test
//  269   if(tmr_osc) {
	LDS	R16,tmr_osc
	TST	R16
	BRNE	$+2+2
	RJMP	??TIMER1_OVF_Handler_0
//  270     if(tmr_osc<31) tmr_osc++;
	LDS	R16,tmr_osc
	CPI	R16,31
	BRCC	??TIMER1_OVF_Handler_1
	LDI	R30,LOW(tmr_osc)
	LDI	R31,(tmr_osc) >> 8
	LD	R16,Z
	INC	R16
	ST	Z,R16
//  271     if(tmr_osc==10) {   //0.5sec
??TIMER1_OVF_Handler_1:
	LDS	R16,tmr_osc
	CPI	R16,10
	BRNE	??TIMER1_OVF_Handler_2
//  272       //_system_init_1();
//  273       _system_init_se();
	RCALL	_system_init_se
	RJMP	??TIMER1_OVF_Handler_3
//  274     }
//  275     /*else if(tmr_osc==60) {    //3sec
//  276       _system_init_se();
//  277     }*/
//  278     else if(tmr_osc==30) {    //1.5sec
??TIMER1_OVF_Handler_2:
	LDS	R16,tmr_osc
	CPI	R16,30
	BRNE	??TIMER1_OVF_Handler_3
//  279       //_system_init_1();
//  280       es9018_reg10=0xce;			
	LDI	R16,206
	STS	es9018_reg10,R16
//  281       I2C_Write(0x90, 0x0a, es9018_reg10);
	LDS	R18,es9018_reg10
	LDI	R17,10
	LDI	R16,144
	CALL	I2C_Write
//  282       I2C_Write(0x92, 0x0a, es9018_reg10);
	LDS	R18,es9018_reg10
	LDI	R17,10
	LDI	R16,146
	CALL	I2C_Write
//  283       init_vol_dn(vol_dB);
	LDS	R16,vol_dB
	CALL	init_vol_dn
//  284       DelayTime_ms(50);  //50msec
	LDI	R16,50
	LDI	R17,0
	CALL	DelayTime_ms
//  285       init_vol(vol_dB);
	LDS	R16,vol_dB
	CALL	init_vol
//  286       dot_vol_hextodeci(vol_dB);
	LDS	R16,vol_dB
	CALL	dot_vol_hextodeci
//  287       tmr_osc_ck=1;
	LDI	R16,1
	STS	tmr_osc_ck,R16
//  288       init_setting_check=1;   //include remocon interrupt,
	LDI	R16,1
	STS	init_setting_check,R16
//  289     }
//  290     
//  291     if(tmr_osc_ck){
??TIMER1_OVF_Handler_3:
	LDS	R16,tmr_osc_ck
	TST	R16
	BRNE	$+2+2
	RJMP	??TIMER1_OVF_Handler_0
//  292       
//  293       if(!KEY_FLAG){
	SBIC	0x10,0x03
	RJMP	??TIMER1_OVF_Handler_4
//  294         if(key_int_flag==1 && key_tmr>5) key_int_flag=2;
	LDS	R16,key_int_flag
	CPI	R16,1
	BRNE	??TIMER1_OVF_Handler_5
	LDI	R26,LOW(key_tmr)
	LDI	R27,(key_tmr) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,6
	BRCS	??TIMER1_OVF_Handler_5
	LDI	R16,2
	STS	key_int_flag,R16
	RJMP	??TIMER1_OVF_Handler_6
//  295         else if(key_int_flag==2 && key_tmr>6){ //key_tmr=400 : 0.05sec
??TIMER1_OVF_Handler_5:
	LDS	R16,key_int_flag
	CPI	R16,2
	BRNE	??TIMER1_OVF_Handler_6
	LDI	R26,LOW(key_tmr)
	LDI	R27,(key_tmr) >> 8
	LD	R30,X+
	LD	R31,X
	SBIW	R31 : R30,7
	BRCS	??TIMER1_OVF_Handler_6
//  296  
//  297           data=KEY_DATA2;
	LDI	R18,0
	SBIC	0x10,0x06
	INC	R18
//  298           data<<=1;
??TIMER1_OVF_Handler_7:
	LSL	R18
//  299           data+=KEY_DATA1;
	LDI	R16,0
	SBIC	0x10,0x05
	INC	R16
??TIMER1_OVF_Handler_8:
	ADD	R18,R16
//  300           data<<=1;
	LSL	R18
//  301           data+=KEY_DATA0;
	LDI	R16,0
	SBIC	0x10,0x04
	INC	R16
??TIMER1_OVF_Handler_9:
	ADD	R18,R16
//  302           
//  303           if(data==2) {
	CPI	R18,2
	BRNE	??TIMER1_OVF_Handler_10
//  304             audio_level_up();                            //Master Volume Up
	CALL	audio_level_up
	RJMP	??TIMER1_OVF_Handler_6
//  305           }
//  306           else if(data==5){
??TIMER1_OVF_Handler_10:
	CPI	R18,5
	BRNE	??TIMER1_OVF_Handler_6
//  307             audio_level_down();                        //Master Volume Down
	CALL	audio_level_down
//  308           }
//  309           
//  310         }//end else if
//  311         tmr_flag_ck=0;
??TIMER1_OVF_Handler_6:
	LDI	R16,0
	STS	tmr_flag_ck,R16
//  312         key_tmr++;
	LDI	R30,LOW(key_tmr)
	LDI	R31,(key_tmr) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
	RJMP	??TIMER1_OVF_Handler_0
//  313       }
//  314       else { 
//  315         key_int_flag=0; key_tmr=0; 
??TIMER1_OVF_Handler_4:
	LDI	R16,0
	STS	key_int_flag,R16
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(key_tmr)
	LDI	R31,(key_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
//  316         if(tmr_flag_ck==0) {
	LDS	R16,tmr_flag_ck
	TST	R16
	BRNE	??TIMER1_OVF_Handler_0
//  317           tmr_flag_ck=1;
	LDI	R16,1
	STS	tmr_flag_ck,R16
//  318           rom_tmr=0;
	LDI	R16,0
	LDI	R17,0
	LDI	R30,LOW(rom_tmr)
	LDI	R31,(rom_tmr) >> 8
	ST	Z,R16
	STD	Z+1,R17
//  319         }
//  320       }
//  321       /*
//  322       if(IR_data_flag ){
//  323       //if(IR_data_flag && Time_50ms>1){
//  324         //Time_50ms=0;
//  325         //IR_data[IR_data_flag]=_remocon_data;
//  326 
//  327         if(IR_data[IR_data_flag]==0x80) {                             //Master Volume Up
//  328           //if(new_repeat_flag) { for(test_i=0; test_i<3; test_i++) audio_level_up(); }
//  329           //else audio_level_up();
//  330           if(IR_data[IR_data_flag]==0x80 && IR_data[IR_data_flag+1]==0x80) {
//  331             audio_level_sp_up();
//  332             IR_data_flag--;
//  333           }
//  334           else audio_level_up();
//  335         }
//  336         else if(IR_data[IR_data_flag]==0xA8) {                         //Master Volume Down
//  337           //if(new_repeat_flag) { for(test_i=0; test_i<3; test_i++) audio_level_down();}
//  338           //else audio_level_down();
//  339           if(IR_data[IR_data_flag]==0xA8 && IR_data[IR_data_flag+1]==0xA8) {
//  340             audio_level_sp_down();
//  341             IR_data_flag--;
//  342           }
//  343           else audio_level_down();
//  344         }
//  345           
//  346         IR_data_flag--;
//  347       }
//  348     */  
//  349       
//  350       
//  351     }
//  352   }		
//  353 	
//  354   Time_50ms++;
??TIMER1_OVF_Handler_0:
	LDI	R30,LOW(Time_50ms)
	LDI	R31,(Time_50ms) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,255
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
//  355 	
//  356 }
	OUT	0x3B,R25
	OUT	0x3F,R24
	LD	R16,Y+
        CFI R16 SameValue
        CFI CFA_Y Y+17
	LD	R17,Y+
        CFI R17 SameValue
        CFI CFA_Y Y+16
	LD	R18,Y+
        CFI R18 SameValue
        CFI CFA_Y Y+15
	LD	R19,Y+
        CFI R19 SameValue
        CFI CFA_Y Y+14
	LD	R20,Y+
        CFI R20 SameValue
        CFI CFA_Y Y+13
	LD	R21,Y+
        CFI R21 SameValue
        CFI CFA_Y Y+12
	LD	R22,Y+
        CFI R22 SameValue
        CFI CFA_Y Y+11
	LD	R23,Y+
        CFI R23 SameValue
        CFI CFA_Y Y+10
	LD	R0,Y+
        CFI R0 SameValue
        CFI CFA_Y Y+9
	LD	R1,Y+
        CFI R1 SameValue
        CFI CFA_Y Y+8
	LD	R2,Y+
        CFI R2 SameValue
        CFI CFA_Y Y+7
	LD	R3,Y+
        CFI R3 SameValue
        CFI CFA_Y Y+6
	LD	R30,Y+
        CFI R30 SameValue
        CFI CFA_Y Y+5
	LD	R31,Y+
        CFI R31 SameValue
        CFI CFA_Y Y+4
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+3
	LD	R25,Y+
        CFI R25 SameValue
        CFI CFA_Y Y+2
	LD	R26,Y+
        CFI R26 SameValue
        CFI CFA_Y Y+1
	LD	R27,Y+
        CFI R27 SameValue
        CFI CFA_Y Y+0
	RETI
        CFI EndBlock cfiBlock54
//  357 
//  358 ///////////////////////////////////////////////////////////////////////////////
//  359 //U8 non_audio_flag=0;6

        RSEG CODE:CODE:NOROOT(1)
//  360 void main(void){
main:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function main
//  361   _system_init();
        FUNCALL main, _system_init
        LOCFRAME RSTACK, 2, STACK
	RCALL	_system_init
//  362   //_system_init_1();
//  363     
//  364   while(1){
//  365     if(PINB_Bit6==0) PORTB_Bit7=0;       //Analog Power Disable
??main_0:
	SBIC	0x16,0x06
	RJMP	??main_0
	CBI	0x18,0x07
	RJMP	??main_0
        CFI EndBlock cfiBlock55
//  366     //if(tmr_osc_ck) _system_init_1();
//  367     /*
//  368     if(tmr_osc_ck){
//  369       tmr_osc_ck2=1;
//  370       tmr_osc_ck=0;
//  371       //one time
//  372       if(KeyReady){
//  373         _system_init_se();
//  374         es9018_reg10=0xce;			
//  375         I2C_Write(0x90, 0x0a, es9018_reg10);
//  376         I2C_Write(0x92, 0x0a, es9018_reg10);
//  377         //led_start_flag=1;
//  378         KeyReady=0;
//  379       }
//  380       
//  381     }//end if
//  382     */
//  383   }//end while
//  384 }

        COMMON INTVEC:CODE:ROOT(1)
        ORG 16
	JMP	INT3_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 24
	JMP	INT5_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 28
	JMP	INT6_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 32
	JMP	INT7_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 40
	JMP	TIMER2_OVF_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 56
	JMP	TIMER1_OVF_Handler

        COMMON INTVEC:CODE:ROOT(1)
        ORG 64
	JMP	TIMER0_OVF_Handler

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DP	0
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for phase_data>`:
        DB 1

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
	DW	SFE(NEAR_I) - SFB(NEAR_I)
	DW	SFB(NEAR_I)
	DP	SFB(NEAR_ID)
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for interrupt_eicra>`:
        DB 181

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for rom_save_flag>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for rom_save_flag2>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for dot_light_reg>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ch_led_enable>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for sr_led_data>`:
        DB 6

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for display_num>`:
        DB 100

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for vol_dB>`:
        DB 255

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for i2s_flag>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for usb_sr>`:
        DB 48

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for mute_enable>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for es9018_reg10>`:
        DB 206

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min44>`:
        DW 2254

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max44>`:
        DW 2359

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min48>`:
        DW 2464

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max48>`:
        DW 2569

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min88>`:
        DW 4561

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max88>`:
        DW 4666

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min96>`:
        DW 4980

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max96>`:
        DW 5085

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min176>`:
        DW 9175

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max176>`:
        DW 9279

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for min192>`:
        DW 10013

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for max192>`:
        DW 10118

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for interface_ch>`:
        DB 128

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for KeyReady>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for ch_name>`:
        DB 43H, 4FH, 41H, 58H, 31H, 20H
        DB 43H, 4FH, 41H, 58H, 32H, 20H
        DB 20H, 41H, 45H, 53H, 31H, 20H
        DB 20H, 41H, 45H, 53H, 32H, 20H
        DB 20H, 42H, 4EH, 43H, 20H, 20H
        DB 20H, 4FH, 50H, 54H, 31H, 20H
        DB 20H, 4FH, 50H, 54H, 32H, 20H
        DB 20H, 55H, 53H, 42H, 20H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for sr_name>`:
        DB 20H, 34H, 34H, 2EH, 31H, 20H
        DB 20H, 34H, 38H, 2EH, 30H, 20H
        DB 20H, 38H, 38H, 2EH, 32H, 20H
        DB 20H, 39H, 36H, 2EH, 30H, 20H
        DB 31H, 37H, 36H, 2EH, 34H, 20H
        DB 31H, 39H, 32H, 2EH, 30H, 20H
        DB 20H, 20H, 20H, 20H, 20H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for filter_name>`:
        DB 46H, 49H, 4CH, 54H, 45H, 52H, 31H, 20H
        DB 46H, 49H, 4CH, 54H, 45H, 52H, 32H, 20H
        DB 46H, 49H, 4CH, 54H, 45H, 52H, 33H, 20H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for phase_name>`:
        DB 20H, 49H, 4EH, 56H, 45H, 52H, 53H, 45H

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for normal_name>`:
        DB 20H, 20H, 4EH, 4FH, 52H, 4DH, 41H, 4CH

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f1_coeff_st1>`:
        DD 0, 1656381, 9659303, 34409768, 93398781, 209942799, 407444422
        DD 699022478, 1074874807, 1492352005, 1874902824, 2124488166
        DD 2147483647, 1887806213, 1355685389, 639107586, 4184211741
        DD 3575378619, 3250935693, 3274239131, 3604212817, 4107112925
        DD 307259942, 630274318, 690105478, 497041076, 151573293, 4094472509
        DD 3867624317, 3834699749, 3981431401, 4225727969, 163487939, 295508341
        DD 290781514, 173357845, 8625355, 4165136668, 4103278079, 4128386279
        DD 4213722653, 18370414, 89760574, 110702807, 84163673, 31575802
        DD 4274786895, 4243865679, 4240421441, 4258480823, 4285296094, 13456521
        DD 25681054, 26272207, 19136308, 9640102, 1930723, 4292721623
        DD 4291718189, 4292498491, 4293704071, 4294560129, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f1_coeff_st2>`:
        DD 1475681183, 1475681183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f2_coeff_st1>`:
        DD 0, 4293165601, 4290958653, 4289846283, 4292752816, 5996574, 16606227
        DD 22319443, 15460455, 4289712737, 4264886706, 4253862403, 4271338540
        DD 20097715, 65638314, 77510493, 33703685, 4243282078, 4168217690
        DD 4165462951, 4262125467, 122779073, 237746372, 208859258, 4955037
        DD 4009172150, 3818163031, 3920942180, 107471796, 869797120, 1652694820
        DD 2147483647, 2147483647, 1652694820, 869797120, 107471796, 3920942180
        DD 3818163031, 4009172150, 4955037, 208859258, 237746372, 122779073
        DD 4262125467, 4165462951, 4168217690, 4243282078, 33703685, 77510493
        DD 65638314, 20097715, 4271338540, 4253862403, 4264886706, 4289712737
        DD 15460455, 22319443, 16606227, 5996574, 4292752816, 4289846283
        DD 4290958653, 4293165601, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for f2_coeff_st2>`:
        DD 2147400132, 2147400132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for test_osc>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for _repeat_data>`:
        DB 48

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for init_sr_led>`:
        DB 1

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for tmr_flag_ck>`:
        DB 1

        ASEGN ABSOLUTE:DATA:NOROOT,045H
// union <unnamed> volatile __io _A_TCCR2
_A_TCCR2:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS 2

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,051H
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,052H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,056H
// union <unnamed> volatile __io _A_TIFR
_A_TIFR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,057H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,058H
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,05aH
// union <unnamed> volatile __io _A_EICRB
_A_EICRB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,061H
// union <unnamed> volatile __io _A_DDRF
_A_DDRF:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,062H
// union <unnamed> volatile __io _A_PORTF
_A_PORTF:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,063H
// union <unnamed> volatile __io _A_PING
_A_PING:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,064H
// union <unnamed> volatile __io _A_DDRG
_A_DDRG:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,065H
// union <unnamed> volatile __io _A_PORTG
_A_PORTG:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,06aH
// union <unnamed> volatile __io _A_EICRA
_A_EICRA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,020H
// union <unnamed> volatile __io _A_PINF
_A_PINF:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,021H
// union <unnamed> volatile __io _A_PINE
_A_PINE:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,022H
// union <unnamed> volatile __io _A_DDRE
_A_DDRE:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,023H
// union <unnamed> volatile __io _A_PORTE
_A_PORTE:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,033H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,034H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,036H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,039H
// union <unnamed> volatile __io _A_PINA
_A_PINA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,03aH
// union <unnamed> volatile __io _A_DDRA
_A_DDRA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,03bH
// union <unnamed> volatile __io _A_PORTA
_A_PORTA:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,044H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//  385 
//  386 
// 
//     35 bytes in segment ABSOLUTE
// 11 004 bytes in segment CODE
//     14 bytes in segment INITTAB
//     28 bytes in segment INTVEC
//    813 bytes in segment NEAR_I
//    813 bytes in segment NEAR_ID
//    196 bytes in segment NEAR_Z
// 
// 11 845 bytes of CODE memory (+ 14 bytes shared)
//  1 009 bytes of DATA memory (+ 35 bytes shared)
//
//Errors: none
//Warnings: none
