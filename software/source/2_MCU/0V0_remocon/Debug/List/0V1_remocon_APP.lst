###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.12.1.50500 for Atmel AVR        01/Sep/2017  20:18:04 #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\0V #
#                    1_remocon_APP.C                                          #
#    Command line =  D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\0V #
#                    1_remocon_APP.C --cpu=tiny13 -mt -o                      #
#                    D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\De #
#                    bug\Obj\ -lC D:\workspace\Femto2\software\source\2_MCU\0 #
#                    V0_remocon\Debug\List\ -lA D:\workspace\Femto2\software\ #
#                    source\2_MCU\0V0_remocon\Debug\List\                     #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 64 --clib -Ol                              #
#    List file    =  D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\De #
#                    bug\List\0V1_remocon_APP.lst                             #
#    Object file  =  D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\De #
#                    bug\Obj\0V1_remocon_APP.r90                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\workspace\Femto2\software\source\2_MCU\0V0_remocon\0V1_remocon_APP.C
      1          //check : SUT0, CKSEL0
      2          
      3          #include <iotiny13.h>

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_TIMSK0
   \                     _A_TIMSK0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x58
   \   union <unnamed> volatile __io _A_TIFR0
   \                     _A_TIFR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0B
   \                     _A_TCCR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1
      4          #include <inavr.h>
      5          

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      6          unsigned char carry=0;
   \                     carry:
   \   00000000                      DS8 1

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      7          unsigned char key_data=0;
   \                     key_data:
   \   00000000                      DS8 1

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
      8          unsigned long data_code;
   \                     data_code:
   \   00000000                      DS8 4

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
      9          unsigned long cp_code=0xd77a0000;
   \                     cp_code:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for cp_code>`
     10          

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
     11          unsigned char flag=1;
   \                     flag:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for flag>`

   \                                 In  segment TINY_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_I>`
     12          unsigned int hold_tmr=1;
   \                     hold_tmr:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for hold_tmr>`
     13          

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     14          unsigned int lead_tmr0;
   \                     lead_tmr0:
   \   00000000                      DS8 2

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     15          unsigned int lead_tmr1;
   \                     lead_tmr1:
   \   00000000                      DS8 2

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     16          unsigned char signal_tmr0;
   \                     signal_tmr0:
   \   00000000                      DS8 1

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     17          unsigned char signal_tmr1;
   \                     signal_tmr1:
   \   00000000                      DS8 1
     18          
     19          

   \                                 In  segment CODE, align 2, keep-with-next
     20          void IR_tmr(unsigned char h_data, unsigned int tmr)
   \                     IR_tmr:
     21          {
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
   \   00000002   2F40               MOV     R20, R16
     22            unsigned int i;
     23            
     24            carry=0;
   \   00000004   E000               LDI     R16, 0
   \   00000006   ....               LDI     R30, carry
   \   00000008   8300               ST      Z, R16
     25            h_data^=1;
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   2740               EOR     R20, R16
     26            for(i=0; i<tmr; i++){
   \   0000000E   E080               LDI     R24, 0
   \   00000010   E090               LDI     R25, 0
   \   00000012   C018               RJMP    ??IR_tmr_0
     27              TCNT0=255-10; //13usec
   \                     ??IR_tmr_1:
   \   00000014   EF05               LDI     R16, 245
   \   00000016   BF02               OUT     0x32, R16
     28              hold_tmr=1;
   \   00000018   E001               LDI     R16, 1
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ....               LDI     R30, hold_tmr
   \   0000001E   8300               ST      Z, R16
   \   00000020   8311               STD     Z+1, R17
     29              carry^=h_data;
   \   00000022   9100....           LDS     R16, carry
   \   00000026   2704               EOR     R16, R20
   \   00000028   9300....           STS     carry, R16
     30              PORTB_Bit4=carry;
   \   0000002C   ....               LDI     R30, carry
   \   0000002E   8110               LD      R17, Z
   \   00000030   FD10               SBRC    R17, 0
   \   00000032   9AC4               SBI     0x18, 0x04
   \                     ??IR_tmr_2:
   \   00000034   FF10               SBRS    R17, 0
   \   00000036   98C4               CBI     0x18, 0x04
     31              while(hold_tmr);
   \                     ??IR_tmr_3:
   \   00000038   ....               LDI     R30, hold_tmr
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   2B01               OR      R16, R17
   \   00000040   F7D9               BRNE    ??IR_tmr_3
     32            }
   \   00000042   9601               ADIW    R25:R24, 1
   \                     ??IR_tmr_0:
   \   00000044   1782               CP      R24, R18
   \   00000046   0793               CPC     R25, R19
   \   00000048   F328               BRCS    ??IR_tmr_1
     33            PORTB_Bit4=0;
   \   0000004A   98C4               CBI     0x18, 0x04
     34          }
   \   0000004C   E0E2               LDI     R30, 2
   \   0000004E   ....               RJMP    ?EPILOGUE_B2_L09
   \   00000050                      REQUIRE _A_TCNT0
   \   00000050                      REQUIRE _A_PORTB
     35          

   \                                 In  segment CODE, align 2, keep-with-next
     36          void IR_lead_trans(){
   \                     IR_lead_trans:
     37            IR_tmr(0,lead_tmr0);  //low 9msec
   \   00000000   ....               LDI     R30, lead_tmr0
   \   00000002   8120               LD      R18, Z
   \   00000004   8131               LDD     R19, Z+1
   \   00000006   E000               LDI     R16, 0
   \   00000008   ....               RCALL   IR_tmr
     38            IR_tmr(1,lead_tmr1);  //high 4.5msec
   \   0000000A   ....               LDI     R30, lead_tmr1
   \   0000000C   8120               LD      R18, Z
   \   0000000E   8131               LDD     R19, Z+1
   \   00000010   E001               LDI     R16, 1
   \   00000012   ....               RCALL   IR_tmr
     39            IR_tmr(0,signal_tmr0);   //low 0.56msec
   \   00000014   ....               LDI     R30, signal_tmr0
   \   00000016   8120               LD      R18, Z
   \   00000018   E030               LDI     R19, 0
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   ....               RCALL   IR_tmr
     40          }
   \   0000001E   9508               RET
     41          

   \                                 In  segment CODE, align 2, keep-with-next
     42          void IR_data_trans(){
   \                     IR_data_trans:
   \   00000000   938A               ST      -Y, R24
     43            unsigned char i,temp;
     44          
     45            //lead code
     46            IR_lead_trans();
   \   00000002   ....               RCALL   IR_lead_trans
     47            
     48            //1   data code
     49            for(i=0; i<32; i++){
   \   00000004   E080               LDI     R24, 0
   \   00000006   C00B               RJMP    ??IR_data_trans_0
     50              temp=(cp_code>>(31-i)) & 1;
     51              if( temp) { IR_tmr(1,signal_tmr1); IR_tmr(0,signal_tmr0);} // 1
     52              else      { IR_tmr(1,signal_tmr0); IR_tmr(0,signal_tmr0);} // 0
   \                     ??IR_data_trans_1:
   \   00000008   ....               LDI     R30, signal_tmr0
   \   0000000A   8120               LD      R18, Z
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   E001               LDI     R16, 1
   \   00000010   ....               RCALL   IR_tmr
   \   00000012   ....               LDI     R30, signal_tmr0
   \   00000014   8120               LD      R18, Z
   \   00000016   E030               LDI     R19, 0
   \   00000018   E000               LDI     R16, 0
   \   0000001A   ....               RCALL   IR_tmr
   \                     ??IR_data_trans_2:
   \   0000001C   9583               INC     R24
   \                     ??IR_data_trans_0:
   \   0000001E   3280               CPI     R24, 32
   \   00000020   F4B0               BRCC    ??IR_data_trans_3
   \   00000022   E14F               LDI     R20, 31
   \   00000024   1B48               SUB     R20, R24
   \   00000026   ....               LDI     R30, cp_code
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8122               LDD     R18, Z+2
   \   0000002E   8133               LDD     R19, Z+3
   \   00000030   ....               RCALL   ?UL_SHR_L03
   \   00000032   7001               ANDI    R16, 0x01
   \   00000034   2300               TST     R16
   \   00000036   F341               BREQ    ??IR_data_trans_1
   \   00000038   ....               LDI     R30, signal_tmr1
   \   0000003A   8120               LD      R18, Z
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   E001               LDI     R16, 1
   \   00000040   ....               RCALL   IR_tmr
   \   00000042   ....               LDI     R30, signal_tmr0
   \   00000044   8120               LD      R18, Z
   \   00000046   E030               LDI     R19, 0
   \   00000048   E000               LDI     R16, 0
   \   0000004A   ....               RCALL   IR_tmr
   \   0000004C   CFE7               RJMP    ??IR_data_trans_2
     53            }
     54          }
   \                     ??IR_data_trans_3:
   \   0000004E   9189               LD      R24, Y+
   \   00000050   9508               RET
     55          

   \                                 In  segment CODE, align 2, keep-with-next
     56          void in_key(){
   \                     in_key:
     57            //0=vol-up, 1=ch-dn, 2=ch-up, 3=filter, 4=phase, 5=vol-dn, 6=mute
     58            //data_code=0x10, data_code+=key_data, data_code<<=3;
     59            
     60            key_data=PINB;
   \   00000000   B306               IN      R16, 0x16
   \   00000002   ....               LDI     R30, key_data
   \   00000004   8300               ST      Z, R16
     61            key_data&=0x07;
   \   00000006   9100....           LDS     R16, key_data
   \   0000000A   7007               ANDI    R16, 0x07
   \   0000000C   9300....           STS     key_data, R16
     62          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_PINB
     63          

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
     64          unsigned char data_temp;
   \                     data_temp:
   \   00000000                      DS8 1
     65          

   \                                 In  segment CODE, align 2, keep-with-next
     66          void in_key_save(){
   \                     in_key_save:
     67            //unsigned char i;
     68            in_key();
   \   00000000   ....               RCALL   in_key
     69            data_code=0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
   \   00000006   E020               LDI     R18, 0
   \   00000008   E030               LDI     R19, 0
   \   0000000A   ....               LDI     R30, data_code
   \   0000000C   8300               ST      Z, R16
   \   0000000E   8311               STD     Z+1, R17
   \   00000010   8322               STD     Z+2, R18
   \   00000012   8333               STD     Z+3, R19
     70            
     71            
     72            data_temp=0x10;
   \   00000014   E100               LDI     R16, 16
   \   00000016   ....               LDI     R30, data_temp
   \   00000018   8300               ST      Z, R16
     73            data_temp+=key_data;
   \   0000001A   ....               LDI     R30, key_data
   \   0000001C   8100               LD      R16, Z
   \   0000001E   ....               LDI     R30, data_temp
   \   00000020   8110               LD      R17, Z
   \   00000022   0F10               ADD     R17, R16
   \   00000024   8310               ST      Z, R17
     74            data_temp<<=3;
   \   00000026   ....               LDI     R30, data_temp
   \   00000028   8100               LD      R16, Z
   \   0000002A   0F00               LSL     R16
   \   0000002C   0F00               LSL     R16
   \   0000002E   0F00               LSL     R16
   \   00000030   ....               LDI     R30, data_temp
   \   00000032   8300               ST      Z, R16
     75            data_code+=data_temp;
   \   00000034   ....               LDI     R30, data_temp
   \   00000036   8100               LD      R16, Z
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E020               LDI     R18, 0
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   ....               LDI     R30, data_code
   \   00000040   8140               LD      R20, Z
   \   00000042   8151               LDD     R21, Z+1
   \   00000044   8162               LDD     R22, Z+2
   \   00000046   8173               LDD     R23, Z+3
   \   00000048   0F40               ADD     R20, R16
   \   0000004A   1F51               ADC     R21, R17
   \   0000004C   1F62               ADC     R22, R18
   \   0000004E   1F73               ADC     R23, R19
   \   00000050   8340               ST      Z, R20
   \   00000052   8351               STD     Z+1, R21
   \   00000054   8362               STD     Z+2, R22
   \   00000056   8373               STD     Z+3, R23
     76            data_code<<=8;
   \   00000058   ....               LDI     R30, data_code
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   8122               LDD     R18, Z+2
   \   00000060   2F32               MOV     R19, R18
   \   00000062   2F21               MOV     R18, R17
   \   00000064   2F10               MOV     R17, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   ....               LDI     R30, data_code
   \   0000006A   8300               ST      Z, R16
   \   0000006C   8311               STD     Z+1, R17
   \   0000006E   8322               STD     Z+2, R18
   \   00000070   8333               STD     Z+3, R19
     77            data_temp^=0xff; // invert data code
   \   00000072   EF0F               LDI     R16, 255
   \   00000074   9110....           LDS     R17, data_temp
   \   00000078   2710               EOR     R17, R16
   \   0000007A   9310....           STS     data_temp, R17
     78            data_code+=data_temp;
   \   0000007E   ....               LDI     R30, data_temp
   \   00000080   8100               LD      R16, Z
   \   00000082   E010               LDI     R17, 0
   \   00000084   E020               LDI     R18, 0
   \   00000086   E030               LDI     R19, 0
   \   00000088   ....               LDI     R30, data_code
   \   0000008A   8140               LD      R20, Z
   \   0000008C   8151               LDD     R21, Z+1
   \   0000008E   8162               LDD     R22, Z+2
   \   00000090   8173               LDD     R23, Z+3
   \   00000092   0F40               ADD     R20, R16
   \   00000094   1F51               ADC     R21, R17
   \   00000096   1F62               ADC     R22, R18
   \   00000098   1F73               ADC     R23, R19
   \   0000009A   8340               ST      Z, R20
   \   0000009C   8351               STD     Z+1, R21
   \   0000009E   8362               STD     Z+2, R22
   \   000000A0   8373               STD     Z+3, R23
     79            cp_code+=data_code;
   \   000000A2   ....               LDI     R30, data_code
   \   000000A4   8100               LD      R16, Z
   \   000000A6   8111               LDD     R17, Z+1
   \   000000A8   8122               LDD     R18, Z+2
   \   000000AA   8133               LDD     R19, Z+3
   \   000000AC   ....               LDI     R30, cp_code
   \   000000AE   8140               LD      R20, Z
   \   000000B0   8151               LDD     R21, Z+1
   \   000000B2   8162               LDD     R22, Z+2
   \   000000B4   8173               LDD     R23, Z+3
   \   000000B6   0F40               ADD     R20, R16
   \   000000B8   1F51               ADC     R21, R17
   \   000000BA   1F62               ADC     R22, R18
   \   000000BC   1F73               ADC     R23, R19
   \   000000BE   8340               ST      Z, R20
   \   000000C0   8351               STD     Z+1, R21
   \   000000C2   8362               STD     Z+2, R22
   \   000000C4   8373               STD     Z+3, R23
     80            
     81            if(key_data==0 || key_data==5)  flag=2;
   \   000000C6   ....               LDI     R30, key_data
   \   000000C8   8100               LD      R16, Z
   \   000000CA   2300               TST     R16
   \   000000CC   F021               BREQ    ??in_key_save_0
   \   000000CE   ....               LDI     R30, key_data
   \   000000D0   8100               LD      R16, Z
   \   000000D2   3005               CPI     R16, 5
   \   000000D4   F421               BRNE    ??in_key_save_1
   \                     ??in_key_save_0:
   \   000000D6   E002               LDI     R16, 2
   \   000000D8   ....               LDI     R30, flag
   \   000000DA   8300               ST      Z, R16
   \   000000DC   9508               RET
     82            else flag=1;
   \                     ??in_key_save_1:
   \   000000DE   E001               LDI     R16, 1
   \   000000E0   ....               LDI     R30, flag
   \   000000E2   8300               ST      Z, R16
     83          }
   \   000000E4   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     84          void tmr_set(unsigned char j){
   \                     tmr_set:
     85            if(j==0) {
   \   00000000   2300               TST     R16
   \   00000002   F489               BRNE    ??tmr_set_0
     86              lead_tmr0=680;
   \   00000004   EA08               LDI     R16, 168
   \   00000006   E012               LDI     R17, 2
   \   00000008   ....               LDI     R30, lead_tmr0
   \   0000000A   8300               ST      Z, R16
   \   0000000C   8311               STD     Z+1, R17
     87              lead_tmr1=340;
   \   0000000E   E504               LDI     R16, 84
   \   00000010   E011               LDI     R17, 1
   \   00000012   ....               LDI     R30, lead_tmr1
   \   00000014   8300               ST      Z, R16
   \   00000016   8311               STD     Z+1, R17
     88              signal_tmr0=43;
   \   00000018   E20B               LDI     R16, 43
   \   0000001A   ....               LDI     R30, signal_tmr0
   \   0000001C   8300               ST      Z, R16
     89              signal_tmr1=130;
   \   0000001E   E802               LDI     R16, 130
   \   00000020   ....               LDI     R30, signal_tmr1
   \   00000022   8300               ST      Z, R16
   \   00000024   9508               RET
     90            }
     91            else if(j==1){
   \                     ??tmr_set_0:
   \   00000026   3001               CPI     R16, 1
   \   00000028   F481               BRNE    ??tmr_set_1
     92              lead_tmr0=660;
   \   0000002A   E904               LDI     R16, 148
   \   0000002C   E012               LDI     R17, 2
   \   0000002E   ....               LDI     R30, lead_tmr0
   \   00000030   8300               ST      Z, R16
   \   00000032   8311               STD     Z+1, R17
     93              lead_tmr1=330;
   \   00000034   E40A               LDI     R16, 74
   \   00000036   E011               LDI     R17, 1
   \   00000038   ....               LDI     R30, lead_tmr1
   \   0000003A   8300               ST      Z, R16
   \   0000003C   8311               STD     Z+1, R17
     94              signal_tmr0=43;
   \   0000003E   E20B               LDI     R16, 43
   \   00000040   ....               LDI     R30, signal_tmr0
   \   00000042   8300               ST      Z, R16
     95              signal_tmr1=120;
   \   00000044   E708               LDI     R16, 120
   \   00000046   ....               LDI     R30, signal_tmr1
   \   00000048   8300               ST      Z, R16
     96            }
     97          }
   \                     ??tmr_set_1:
   \   0000004A   9508               RET
     98          
     99          #pragma vector = TIM0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
    100          __interrupt void TIMER0_OVF_Handler(void)
   \                     TIMER0_OVF_Handler:
    101          {
   \   00000000   93EA               ST      -Y, R30
   \   00000002   932A               ST      -Y, R18
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B72F               IN      R18, 0x3F
    102            hold_tmr=0;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ....               LDI     R30, hold_tmr
   \   00000010   8300               ST      Z, R16
   \   00000012   8311               STD     Z+1, R17
    103          }
   \   00000014   BF2F               OUT     0x3F, R18
   \   00000016   9109               LD      R16, Y+
   \   00000018   9119               LD      R17, Y+
   \   0000001A   9129               LD      R18, Y+
   \   0000001C   91E9               LD      R30, Y+
   \   0000001E   9518               RETI
    104          

   \                                 In  segment TINY_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: TINY_Z>`
    105          unsigned char old_key=0;
   \                     old_key:
   \   00000000                      DS8 1

   \                                 In  segment CODE, align 2, keep-with-next
    106          void main(void){ 
   \                     main:
    107            
    108            DDRB=0x10;
   \   00000000   E100               LDI     R16, 16
   \   00000002   BB07               OUT     0x17, R16
    109            PORTB=0x1f;
   \   00000004   E10F               LDI     R16, 31
   \   00000006   BB08               OUT     0x18, R16
    110            
    111            TCCR0B=2;	// 1=1prescaling, 2=8prescaling, 3=64prescaling, 4=256prescaling
   \   00000008   E002               LDI     R16, 2
   \   0000000A   BF03               OUT     0x33, R16
    112            TCNT0=255-10; //13sec 
   \   0000000C   EF05               LDI     R16, 245
   \   0000000E   BF02               OUT     0x32, R16
    113            //TCNT0=0;
    114            TIMSK0 = 2; // (1<<TOIE0);
   \   00000010   E002               LDI     R16, 2
   \   00000012   BF09               OUT     0x39, R16
    115            TIFR0 = 2; // (1<<TOV0);
   \   00000014   E002               LDI     R16, 2
   \   00000016   BF08               OUT     0x38, R16
    116            
    117            tmr_set(1); // timer setting
   \   00000018   E001               LDI     R16, 1
   \   0000001A   ....               RCALL   tmr_set
    118                        // 0 = basic
    119                        // 1 = special 1
    120            
    121            __enable_interrupt(); 
   \   0000001C   9478               SEI
    122            
    123            in_key_save();
   \   0000001E   ....               RCALL   in_key_save
    124            old_key=key_data;
   \   00000020   ....               LDI     R30, key_data
   \   00000022   8100               LD      R16, Z
   \   00000024   ....               LDI     R30, old_key
   \   00000026   8300               ST      Z, R16
   \   00000028   C004               RJMP    ??main_0
    125            while(flag){   
    126              if(flag<2) flag--;
    127              
    128              IR_data_trans();     
    129              in_key();
    130              if(old_key!=key_data) break;
    131              IR_tmr(1,3850); //50msec wait
   \                     ??main_1:
   \   0000002A   E02A               LDI     R18, 10
   \   0000002C   E03F               LDI     R19, 15
   \   0000002E   E001               LDI     R16, 1
   \   00000030   ....               RCALL   IR_tmr
   \                     ??main_0:
   \   00000032   ....               LDI     R30, flag
   \   00000034   8100               LD      R16, Z
   \   00000036   2300               TST     R16
   \   00000038   F089               BREQ    ??main_2
   \   0000003A   ....               LDI     R30, flag
   \   0000003C   8100               LD      R16, Z
   \   0000003E   3002               CPI     R16, 2
   \   00000040   F428               BRCC    ??main_3
   \   00000042   9100....           LDS     R16, flag
   \   00000046   950A               DEC     R16
   \   00000048   9300....           STS     flag, R16
   \                     ??main_3:
   \   0000004C   ....               RCALL   IR_data_trans
   \   0000004E   ....               RCALL   in_key
   \   00000050   ....               LDI     R30, old_key
   \   00000052   8100               LD      R16, Z
   \   00000054   ....               LDI     R30, key_data
   \   00000056   8110               LD      R17, Z
   \   00000058   1701               CP      R16, R17
   \   0000005A   F339               BREQ    ??main_1
    132            }
    133            
    134            
    135          }
   \                     ??main_2:
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_DDRB
   \   0000005E                      REQUIRE _A_PORTB
   \   0000005E                      REQUIRE _A_TCCR0B
   \   0000005E                      REQUIRE _A_TCNT0
   \   0000005E                      REQUIRE _A_TIMSK0
   \   0000005E                      REQUIRE _A_TIFR0

   \                                 In  segment INTVEC, offset 0x6, root
   \                     `??TIMER0_OVF_Handler??INTVEC 6`:
   \   00000006   ....               RJMP    TIMER0_OVF_Handler

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for cp_code>`:
   \   00000000   0000D77A           DD 3615096832

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for flag>`:
   \   00000000   01                 DC8 1

   \                                 In  segment TINY_ID, align 1, keep-with-next
   \                     `?<Initializer for hold_tmr>`:
   \   00000000   0001               DC16 1
    136          
    137          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       1      4  IR_data_trans
                   1 2 -> IR_lead_trans
                   1 2 -> IR_tmr
       0      2  IR_lead_trans
                   0 2 -> IR_tmr
       2      2  IR_tmr
       4      2  TIMER0_OVF_Handler
       0      2  in_key
       0      2  in_key_save
                   0 2 -> in_key
       0      2  main
                   0 2 -> IR_data_trans
                   0 2 -> IR_tmr
                   0 2 -> in_key
                   0 2 -> in_key_save
                   0 2 -> tmr_set
       0      2  tmr_set


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for cp_code>
       1  ?<Initializer for flag>
       2  ?<Initializer for hold_tmr>
       2  ??TIMER0_OVF_Handler??INTVEC 6
      82  IR_data_trans
      32  IR_lead_trans
      80  IR_tmr
      32  TIMER0_OVF_Handler
       1  _A_DDRB
       1  _A_PINB
       1  _A_PORTB
       1  _A_TCCR0B
       1  _A_TCNT0
       1  _A_TIFR0
       1  _A_TIMSK0
       1  carry
       4  cp_code
       4  data_code
       1  data_temp
       1  flag
       2  hold_tmr
      18  in_key
     230  in_key_save
       1  key_data
       2  lead_tmr0
       2  lead_tmr1
      94  main
       1  old_key
       1  signal_tmr0
       1  signal_tmr1
      76  tmr_set
       8  -- Other

 
   7 bytes in segment ABSOLUTE
 644 bytes in segment CODE
   8 bytes in segment INITTAB
   2 bytes in segment INTVEC
   7 bytes in segment TINY_I
   7 bytes in segment TINY_ID
  14 bytes in segment TINY_Z
 
 651 bytes of CODE memory (+ 10 bytes shared)
  21 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
